{- This file was auto-generated from rpc.proto by the proto-lens-protoc program. -}
{-# LANGUAGE ScopedTypeVariables, DataKinds, TypeFamilies,
  UndecidableInstances, GeneralizedNewtypeDeriving,
  MultiParamTypeClasses, FlexibleContexts, FlexibleInstances,
  PatternSynonyms, MagicHash, NoImplicitPrelude, DataKinds,
  BangPatterns, TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-duplicate-exports#-}
-- | License: PublicDomain
--
-- Generated using protos from:
--
--   * [GRPC Gateway](https://github.com/grpc-ecosystem/grpc-gateway) version: 1.8.5.r2.g79ff520
--   * [LND](https://github.com/lightningnetwork/lnd) version: 0.6.beta.rc3.r2.g1fea5b09
module Proto.Rpc
       (WalletUnlocker(..), Lightning(..), AbandonChannelRequest(),
        AbandonChannelResponse(), AddInvoiceResponse(), AddressType(..),
        AddressType(), AddressType'UnrecognizedValue, Chain(),
        ChanBackupExportRequest(), ChanBackupSnapshot(), ChanInfoRequest(),
        ChangePasswordRequest(), ChangePasswordResponse(), Channel(),
        ChannelBackup(), ChannelBackupSubscription(), ChannelBackups(),
        ChannelBalanceRequest(), ChannelBalanceResponse(),
        ChannelCloseSummary(), ChannelCloseSummary'ClosureType(..),
        ChannelCloseSummary'ClosureType(),
        ChannelCloseSummary'ClosureType'UnrecognizedValue,
        ChannelCloseUpdate(), ChannelEdge(), ChannelEdgeUpdate(),
        ChannelEventSubscription(), ChannelEventUpdate(),
        ChannelEventUpdate'Channel(..), _ChannelEventUpdate'OpenChannel,
        _ChannelEventUpdate'ClosedChannel,
        _ChannelEventUpdate'ActiveChannel,
        _ChannelEventUpdate'InactiveChannel,
        ChannelEventUpdate'UpdateType(..), ChannelEventUpdate'UpdateType(),
        ChannelEventUpdate'UpdateType'UnrecognizedValue,
        ChannelFeeReport(), ChannelGraph(), ChannelGraphRequest(),
        ChannelOpenUpdate(), ChannelPoint(), ChannelPoint'FundingTxid(..),
        _ChannelPoint'FundingTxidBytes, _ChannelPoint'FundingTxidStr,
        CloseChannelRequest(), CloseStatusUpdate(),
        CloseStatusUpdate'Update(..), _CloseStatusUpdate'ClosePending,
        _CloseStatusUpdate'ChanClose, ClosedChannelUpdate(),
        ClosedChannelsRequest(), ClosedChannelsResponse(),
        ConfirmationUpdate(), ConnectPeerRequest(), ConnectPeerResponse(),
        DebugLevelRequest(), DebugLevelResponse(),
        DeleteAllPaymentsRequest(), DeleteAllPaymentsResponse(),
        DisconnectPeerRequest(), DisconnectPeerResponse(), EdgeLocator(),
        EstimateFeeRequest(), EstimateFeeRequest'AddrToAmountEntry(),
        EstimateFeeResponse(), ExportChannelBackupRequest(), FeeLimit(),
        FeeLimit'Limit(..), _FeeLimit'Fixed, _FeeLimit'Percent,
        FeeReportRequest(), FeeReportResponse(), ForwardingEvent(),
        ForwardingHistoryRequest(), ForwardingHistoryResponse(),
        GenSeedRequest(), GenSeedResponse(), GetInfoRequest(),
        GetInfoResponse(), GetTransactionsRequest(),
        GraphTopologySubscription(), GraphTopologyUpdate(), HTLC(), Hop(),
        HopHint(), InitWalletRequest(), InitWalletResponse(), Invoice(),
        Invoice'InvoiceState(..), Invoice'InvoiceState(),
        Invoice'InvoiceState'UnrecognizedValue, InvoiceSubscription(),
        LightningAddress(), LightningNode(), ListChannelsRequest(),
        ListChannelsResponse(), ListInvoiceRequest(),
        ListInvoiceResponse(), ListPaymentsRequest(),
        ListPaymentsResponse(), ListPeersRequest(), ListPeersResponse(),
        ListUnspentRequest(), ListUnspentResponse(), MultiChanBackup(),
        NetworkInfo(), NetworkInfoRequest(), NewAddressRequest(),
        NewAddressResponse(), NodeAddress(), NodeInfo(), NodeInfoRequest(),
        NodeUpdate(), OpenChannelRequest(), OpenStatusUpdate(),
        OpenStatusUpdate'Update(..), _OpenStatusUpdate'ChanPending,
        _OpenStatusUpdate'ChanOpen, OutPoint(), PayReq(), PayReqString(),
        Payment(), PaymentHash(), Peer(), Peer'SyncType(..),
        Peer'SyncType(), Peer'SyncType'UnrecognizedValue,
        PendingChannelsRequest(), PendingChannelsResponse(),
        PendingChannelsResponse'ClosedChannel(),
        PendingChannelsResponse'ForceClosedChannel(),
        PendingChannelsResponse'PendingChannel(),
        PendingChannelsResponse'PendingOpenChannel(),
        PendingChannelsResponse'WaitingCloseChannel(), PendingHTLC(),
        PendingUpdate(), PolicyUpdateRequest(),
        PolicyUpdateRequest'Scope(..), _PolicyUpdateRequest'Global,
        _PolicyUpdateRequest'ChanPoint, PolicyUpdateResponse(),
        QueryRoutesRequest(), QueryRoutesResponse(),
        RestoreBackupResponse(), RestoreChanBackupRequest(),
        RestoreChanBackupRequest'Backup(..),
        _RestoreChanBackupRequest'ChanBackups,
        _RestoreChanBackupRequest'MultiChanBackup, Route(), RouteHint(),
        RoutingPolicy(), SendCoinsRequest(), SendCoinsResponse(),
        SendManyRequest(), SendManyRequest'AddrToAmountEntry(),
        SendManyResponse(), SendRequest(), SendResponse(),
        SendToRouteRequest(), SignMessageRequest(), SignMessageResponse(),
        StopRequest(), StopResponse(), Transaction(), TransactionDetails(),
        UnlockWalletRequest(), UnlockWalletResponse(), Utxo(),
        VerifyChanBackupResponse(), VerifyMessageRequest(),
        VerifyMessageResponse(), WalletBalanceRequest(),
        WalletBalanceResponse())
       where
import qualified Data.ProtoLens.Runtime.Control.DeepSeq
       as Control.DeepSeq
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Prism
       as Data.ProtoLens.Prism
import qualified Data.ProtoLens.Runtime.Prelude as Prelude
import qualified Data.ProtoLens.Runtime.Data.Int as Data.Int
import qualified Data.ProtoLens.Runtime.Data.Monoid as Data.Monoid
import qualified Data.ProtoLens.Runtime.Data.Word as Data.Word
import qualified Data.ProtoLens.Runtime.Data.ProtoLens
       as Data.ProtoLens
import qualified
       Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Bytes
       as Data.ProtoLens.Encoding.Bytes
import qualified
       Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Growing
       as Data.ProtoLens.Encoding.Growing
import qualified
       Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Parser.Unsafe
       as Data.ProtoLens.Encoding.Parser.Unsafe
import qualified
       Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Wire
       as Data.ProtoLens.Encoding.Wire
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Field
       as Data.ProtoLens.Field
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Message.Enum
       as Data.ProtoLens.Message.Enum
import qualified
       Data.ProtoLens.Runtime.Data.ProtoLens.Service.Types
       as Data.ProtoLens.Service.Types
import qualified Data.ProtoLens.Runtime.Lens.Family2
       as Lens.Family2
import qualified Data.ProtoLens.Runtime.Lens.Family2.Unchecked
       as Lens.Family2.Unchecked
import qualified Data.ProtoLens.Runtime.Data.Text as Data.Text
import qualified Data.ProtoLens.Runtime.Data.Map as Data.Map
import qualified Data.ProtoLens.Runtime.Data.ByteString
       as Data.ByteString
import qualified Data.ProtoLens.Runtime.Data.ByteString.Char8
       as Data.ByteString.Char8
import qualified Data.ProtoLens.Runtime.Data.Text.Encoding
       as Data.Text.Encoding
import qualified Data.ProtoLens.Runtime.Data.Vector as Data.Vector
import qualified Data.ProtoLens.Runtime.Data.Vector.Generic
       as Data.Vector.Generic
import qualified Data.ProtoLens.Runtime.Data.Vector.Unboxed
       as Data.Vector.Unboxed
import qualified Data.ProtoLens.Runtime.Text.Read as Text.Read
import qualified Proto.Google.Api.Annotations

{- | Fields :

    * 'Proto.Rpc_Fields.channelPoint' @:: Lens' AbandonChannelRequest ChannelPoint@
    * 'Proto.Rpc_Fields.maybe'channelPoint' @:: Lens' AbandonChannelRequest (Prelude.Maybe ChannelPoint)@
 -}
data AbandonChannelRequest = AbandonChannelRequest{_AbandonChannelRequest'channelPoint
                                                   :: !(Prelude.Maybe ChannelPoint),
                                                   _AbandonChannelRequest'_unknownFields ::
                                                   !Data.ProtoLens.FieldSet}
                               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show AbandonChannelRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField AbandonChannelRequest
           "channelPoint"
           (ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _AbandonChannelRequest'channelPoint
               (\ x__ y__ -> x__{_AbandonChannelRequest'channelPoint = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField AbandonChannelRequest
           "maybe'channelPoint"
           (Prelude.Maybe ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _AbandonChannelRequest'channelPoint
               (\ x__ y__ -> x__{_AbandonChannelRequest'channelPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message AbandonChannelRequest where
        messageName _ = Data.Text.pack "lnrpc.AbandonChannelRequest"
        fieldsByTag
          = let channelPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_point"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'channelPoint"))
                      :: Data.ProtoLens.FieldDescriptor AbandonChannelRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channelPoint__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _AbandonChannelRequest'_unknownFields
              (\ x__ y__ -> x__{_AbandonChannelRequest'_unknownFields = y__})
        defMessage
          = AbandonChannelRequest{_AbandonChannelRequest'channelPoint =
                                    Prelude.Nothing,
                                  _AbandonChannelRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     AbandonChannelRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser AbandonChannelRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"channelPoint")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "AbandonChannelRequest"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'channelPoint")
                    _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData AbandonChannelRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_AbandonChannelRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_AbandonChannelRequest'channelPoint x__)
                    (())))
{- | Fields :

 -}
data AbandonChannelResponse = AbandonChannelResponse{_AbandonChannelResponse'_unknownFields
                                                     :: !Data.ProtoLens.FieldSet}
                                deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show AbandonChannelResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message AbandonChannelResponse where
        messageName _ = Data.Text.pack "lnrpc.AbandonChannelResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _AbandonChannelResponse'_unknownFields
              (\ x__ y__ -> x__{_AbandonChannelResponse'_unknownFields = y__})
        defMessage
          = AbandonChannelResponse{_AbandonChannelResponse'_unknownFields =
                                     ([])}
        parseMessage
          = let loop ::
                     AbandonChannelResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser AbandonChannelResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "AbandonChannelResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData AbandonChannelResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_AbandonChannelResponse'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.rHash' @:: Lens' AddInvoiceResponse Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.paymentRequest' @:: Lens' AddInvoiceResponse Data.Text.Text@
    * 'Proto.Rpc_Fields.addIndex' @:: Lens' AddInvoiceResponse Data.Word.Word64@
 -}
data AddInvoiceResponse = AddInvoiceResponse{_AddInvoiceResponse'rHash
                                             :: !Data.ByteString.ByteString,
                                             _AddInvoiceResponse'paymentRequest :: !Data.Text.Text,
                                             _AddInvoiceResponse'addIndex :: !Data.Word.Word64,
                                             _AddInvoiceResponse'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show AddInvoiceResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField AddInvoiceResponse "rHash"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _AddInvoiceResponse'rHash
               (\ x__ y__ -> x__{_AddInvoiceResponse'rHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField AddInvoiceResponse
           "paymentRequest"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _AddInvoiceResponse'paymentRequest
               (\ x__ y__ -> x__{_AddInvoiceResponse'paymentRequest = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField AddInvoiceResponse
           "addIndex"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _AddInvoiceResponse'addIndex
               (\ x__ y__ -> x__{_AddInvoiceResponse'addIndex = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message AddInvoiceResponse where
        messageName _ = Data.Text.pack "lnrpc.AddInvoiceResponse"
        fieldsByTag
          = let rHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "r_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"rHash"))
                      :: Data.ProtoLens.FieldDescriptor AddInvoiceResponse
                paymentRequest__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_request"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentRequest"))
                      :: Data.ProtoLens.FieldDescriptor AddInvoiceResponse
                addIndex__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "add_index"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"addIndex"))
                      :: Data.ProtoLens.FieldDescriptor AddInvoiceResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, rHash__field_descriptor),
                 (Data.ProtoLens.Tag 2, paymentRequest__field_descriptor),
                 (Data.ProtoLens.Tag 16, addIndex__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _AddInvoiceResponse'_unknownFields
              (\ x__ y__ -> x__{_AddInvoiceResponse'_unknownFields = y__})
        defMessage
          = AddInvoiceResponse{_AddInvoiceResponse'rHash =
                                 Data.ProtoLens.fieldDefault,
                               _AddInvoiceResponse'paymentRequest = Data.ProtoLens.fieldDefault,
                               _AddInvoiceResponse'addIndex = Data.ProtoLens.fieldDefault,
                               _AddInvoiceResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     AddInvoiceResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser AddInvoiceResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "r_hash"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"rHash") y
                                              x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_request"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentRequest")
                                              y
                                              x)
                                128 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "add_index"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"addIndex")
                                               y
                                               x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "AddInvoiceResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"rHash") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"paymentRequest")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"addIndex") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 128) Data.Monoid.<>
                          Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                     Data.Monoid.<>
                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                       (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData AddInvoiceResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_AddInvoiceResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_AddInvoiceResponse'rHash x__)
                    (Control.DeepSeq.deepseq (_AddInvoiceResponse'paymentRequest x__)
                       (Control.DeepSeq.deepseq (_AddInvoiceResponse'addIndex x__)
                          (())))))
newtype AddressType'UnrecognizedValue = AddressType'UnrecognizedValue Data.Int.Int32
                                          deriving (Prelude.Eq, Prelude.Ord, Prelude.Show)
data AddressType = WITNESS_PUBKEY_HASH
                 | NESTED_PUBKEY_HASH
                 | UNUSED_WITNESS_PUBKEY_HASH
                 | UNUSED_NESTED_PUBKEY_HASH
                 | AddressType'Unrecognized !AddressType'UnrecognizedValue
                     deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum AddressType where
        maybeToEnum 0 = Prelude.Just WITNESS_PUBKEY_HASH
        maybeToEnum 1 = Prelude.Just NESTED_PUBKEY_HASH
        maybeToEnum 2 = Prelude.Just UNUSED_WITNESS_PUBKEY_HASH
        maybeToEnum 3 = Prelude.Just UNUSED_NESTED_PUBKEY_HASH
        maybeToEnum k
          = Prelude.Just
              (AddressType'Unrecognized
                 (AddressType'UnrecognizedValue (Prelude.fromIntegral k)))
        showEnum WITNESS_PUBKEY_HASH = "WITNESS_PUBKEY_HASH"
        showEnum NESTED_PUBKEY_HASH = "NESTED_PUBKEY_HASH"
        showEnum UNUSED_WITNESS_PUBKEY_HASH = "UNUSED_WITNESS_PUBKEY_HASH"
        showEnum UNUSED_NESTED_PUBKEY_HASH = "UNUSED_NESTED_PUBKEY_HASH"
        showEnum
          (AddressType'Unrecognized (AddressType'UnrecognizedValue k))
          = Prelude.show k
        readEnum k
          | (k) Prelude.== "WITNESS_PUBKEY_HASH" =
            Prelude.Just WITNESS_PUBKEY_HASH
          | (k) Prelude.== "NESTED_PUBKEY_HASH" =
            Prelude.Just NESTED_PUBKEY_HASH
          | (k) Prelude.== "UNUSED_WITNESS_PUBKEY_HASH" =
            Prelude.Just UNUSED_WITNESS_PUBKEY_HASH
          | (k) Prelude.== "UNUSED_NESTED_PUBKEY_HASH" =
            Prelude.Just UNUSED_NESTED_PUBKEY_HASH
        readEnum k
          = (Text.Read.readMaybe k) Prelude.>>= Data.ProtoLens.maybeToEnum
instance Prelude.Bounded AddressType where
        minBound = WITNESS_PUBKEY_HASH
        maxBound = UNUSED_NESTED_PUBKEY_HASH
instance Prelude.Enum AddressType where
        toEnum k__
          = Prelude.maybe
              (Prelude.error
                 (("toEnum: unknown value for enum AddressType: ") Prelude.++
                    Prelude.show k__))
              Prelude.id
              (Data.ProtoLens.maybeToEnum k__)
        fromEnum WITNESS_PUBKEY_HASH = 0
        fromEnum NESTED_PUBKEY_HASH = 1
        fromEnum UNUSED_WITNESS_PUBKEY_HASH = 2
        fromEnum UNUSED_NESTED_PUBKEY_HASH = 3
        fromEnum
          (AddressType'Unrecognized (AddressType'UnrecognizedValue k))
          = Prelude.fromIntegral k
        succ UNUSED_NESTED_PUBKEY_HASH
          = Prelude.error
              "AddressType.succ: bad argument UNUSED_NESTED_PUBKEY_HASH. This value would be out of bounds."
        succ WITNESS_PUBKEY_HASH = NESTED_PUBKEY_HASH
        succ NESTED_PUBKEY_HASH = UNUSED_WITNESS_PUBKEY_HASH
        succ UNUSED_WITNESS_PUBKEY_HASH = UNUSED_NESTED_PUBKEY_HASH
        succ (AddressType'Unrecognized _)
          = Prelude.error
              "AddressType.succ: bad argument: unrecognized value"
        pred WITNESS_PUBKEY_HASH
          = Prelude.error
              "AddressType.pred: bad argument WITNESS_PUBKEY_HASH. This value would be out of bounds."
        pred NESTED_PUBKEY_HASH = WITNESS_PUBKEY_HASH
        pred UNUSED_WITNESS_PUBKEY_HASH = NESTED_PUBKEY_HASH
        pred UNUSED_NESTED_PUBKEY_HASH = UNUSED_WITNESS_PUBKEY_HASH
        pred (AddressType'Unrecognized _)
          = Prelude.error
              "AddressType.pred: bad argument: unrecognized value"
        enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
        enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
        enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
        enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault AddressType where
        fieldDefault = WITNESS_PUBKEY_HASH
instance Control.DeepSeq.NFData AddressType where
        rnf x__ = Prelude.seq x__ (())
{- | Fields :

    * 'Proto.Rpc_Fields.chain' @:: Lens' Chain Data.Text.Text@
    * 'Proto.Rpc_Fields.network' @:: Lens' Chain Data.Text.Text@
 -}
data Chain = Chain{_Chain'chain :: !Data.Text.Text,
                   _Chain'network :: !Data.Text.Text,
                   _Chain'_unknownFields :: !Data.ProtoLens.FieldSet}
               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Chain where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Chain "chain"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Chain'chain
               (\ x__ y__ -> x__{_Chain'chain = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Chain "network"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Chain'network
               (\ x__ y__ -> x__{_Chain'network = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message Chain where
        messageName _ = Data.Text.pack "lnrpc.Chain"
        fieldsByTag
          = let chain__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chain"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chain"))
                      :: Data.ProtoLens.FieldDescriptor Chain
                network__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "network"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"network"))
                      :: Data.ProtoLens.FieldDescriptor Chain
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chain__field_descriptor),
                 (Data.ProtoLens.Tag 2, network__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _Chain'_unknownFields
              (\ x__ y__ -> x__{_Chain'_unknownFields = y__})
        defMessage
          = Chain{_Chain'chain = Data.ProtoLens.fieldDefault,
                  _Chain'network = Data.ProtoLens.fieldDefault,
                  _Chain'_unknownFields = ([])}
        parseMessage
          = let loop :: Chain -> Data.ProtoLens.Encoding.Bytes.Parser Chain
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "chain"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"chain") y
                                              x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "network"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"network")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "Chain"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"chain") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"network") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData Chain where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_Chain'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_Chain'chain x__)
                    (Control.DeepSeq.deepseq (_Chain'network x__) (()))))
{- | Fields :

 -}
data ChanBackupExportRequest = ChanBackupExportRequest{_ChanBackupExportRequest'_unknownFields
                                                       :: !Data.ProtoLens.FieldSet}
                                 deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChanBackupExportRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ChanBackupExportRequest where
        messageName _ = Data.Text.pack "lnrpc.ChanBackupExportRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _ChanBackupExportRequest'_unknownFields
              (\ x__ y__ -> x__{_ChanBackupExportRequest'_unknownFields = y__})
        defMessage
          = ChanBackupExportRequest{_ChanBackupExportRequest'_unknownFields =
                                      ([])}
        parseMessage
          = let loop ::
                     ChanBackupExportRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChanBackupExportRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChanBackupExportRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChanBackupExportRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_ChanBackupExportRequest'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.singleChanBackups' @:: Lens' ChanBackupSnapshot ChannelBackups@
    * 'Proto.Rpc_Fields.maybe'singleChanBackups' @:: Lens' ChanBackupSnapshot (Prelude.Maybe ChannelBackups)@
    * 'Proto.Rpc_Fields.multiChanBackup' @:: Lens' ChanBackupSnapshot MultiChanBackup@
    * 'Proto.Rpc_Fields.maybe'multiChanBackup' @:: Lens' ChanBackupSnapshot (Prelude.Maybe MultiChanBackup)@
 -}
data ChanBackupSnapshot = ChanBackupSnapshot{_ChanBackupSnapshot'singleChanBackups
                                             :: !(Prelude.Maybe ChannelBackups),
                                             _ChanBackupSnapshot'multiChanBackup ::
                                             !(Prelude.Maybe MultiChanBackup),
                                             _ChanBackupSnapshot'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChanBackupSnapshot where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChanBackupSnapshot
           "singleChanBackups"
           (ChannelBackups)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ChanBackupSnapshot'singleChanBackups
               (\ x__ y__ -> x__{_ChanBackupSnapshot'singleChanBackups = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChanBackupSnapshot
           "maybe'singleChanBackups"
           (Prelude.Maybe ChannelBackups)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ChanBackupSnapshot'singleChanBackups
               (\ x__ y__ -> x__{_ChanBackupSnapshot'singleChanBackups = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChanBackupSnapshot
           "multiChanBackup"
           (MultiChanBackup)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChanBackupSnapshot'multiChanBackup
               (\ x__ y__ -> x__{_ChanBackupSnapshot'multiChanBackup = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChanBackupSnapshot
           "maybe'multiChanBackup"
           (Prelude.Maybe MultiChanBackup)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChanBackupSnapshot'multiChanBackup
               (\ x__ y__ -> x__{_ChanBackupSnapshot'multiChanBackup = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChanBackupSnapshot where
        messageName _ = Data.Text.pack "lnrpc.ChanBackupSnapshot"
        fieldsByTag
          = let singleChanBackups__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "single_chan_backups"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelBackups)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'singleChanBackups"))
                      :: Data.ProtoLens.FieldDescriptor ChanBackupSnapshot
                multiChanBackup__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "multi_chan_backup"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor MultiChanBackup)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'multiChanBackup"))
                      :: Data.ProtoLens.FieldDescriptor ChanBackupSnapshot
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, singleChanBackups__field_descriptor),
                 (Data.ProtoLens.Tag 2, multiChanBackup__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChanBackupSnapshot'_unknownFields
              (\ x__ y__ -> x__{_ChanBackupSnapshot'_unknownFields = y__})
        defMessage
          = ChanBackupSnapshot{_ChanBackupSnapshot'singleChanBackups =
                                 Prelude.Nothing,
                               _ChanBackupSnapshot'multiChanBackup = Prelude.Nothing,
                               _ChanBackupSnapshot'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChanBackupSnapshot ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChanBackupSnapshot
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "single_chan_backups"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"singleChanBackups")
                                              y
                                              x)
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "multi_chan_backup"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"multiChanBackup")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChanBackupSnapshot"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'singleChanBackups")
                    _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 (case
                    Lens.Family2.view
                      (Data.ProtoLens.Field.field @"maybe'multiChanBackup")
                      _x
                    of
                      (Prelude.Nothing) -> Data.Monoid.mempty
                      Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                                           Data.Monoid.<>
                                           (((\ bs ->
                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                   (Prelude.fromIntegral
                                                      (Data.ByteString.length bs)))
                                                  Data.Monoid.<>
                                                  Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                              Prelude.. Data.ProtoLens.encodeMessage)
                                             _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChanBackupSnapshot where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChanBackupSnapshot'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_ChanBackupSnapshot'singleChanBackups x__)
                    (Control.DeepSeq.deepseq (_ChanBackupSnapshot'multiChanBackup x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.chanId' @:: Lens' ChanInfoRequest Data.Word.Word64@
 -}
data ChanInfoRequest = ChanInfoRequest{_ChanInfoRequest'chanId ::
                                       !Data.Word.Word64,
                                       _ChanInfoRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
                         deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChanInfoRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChanInfoRequest "chanId"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChanInfoRequest'chanId
               (\ x__ y__ -> x__{_ChanInfoRequest'chanId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChanInfoRequest where
        messageName _ = Data.Text.pack "lnrpc.ChanInfoRequest"
        fieldsByTag
          = let chanId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanId"))
                      :: Data.ProtoLens.FieldDescriptor ChanInfoRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanId__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChanInfoRequest'_unknownFields
              (\ x__ y__ -> x__{_ChanInfoRequest'_unknownFields = y__})
        defMessage
          = ChanInfoRequest{_ChanInfoRequest'chanId =
                              Data.ProtoLens.fieldDefault,
                            _ChanInfoRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChanInfoRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChanInfoRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "chan_id"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"chanId") y
                                             x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChanInfoRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"chanId") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChanInfoRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChanInfoRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChanInfoRequest'chanId x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.currentPassword' @:: Lens' ChangePasswordRequest Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.newPassword' @:: Lens' ChangePasswordRequest Data.ByteString.ByteString@
 -}
data ChangePasswordRequest = ChangePasswordRequest{_ChangePasswordRequest'currentPassword
                                                   :: !Data.ByteString.ByteString,
                                                   _ChangePasswordRequest'newPassword ::
                                                   !Data.ByteString.ByteString,
                                                   _ChangePasswordRequest'_unknownFields ::
                                                   !Data.ProtoLens.FieldSet}
                               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChangePasswordRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChangePasswordRequest
           "currentPassword"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ChangePasswordRequest'currentPassword
               (\ x__ y__ -> x__{_ChangePasswordRequest'currentPassword = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChangePasswordRequest
           "newPassword"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChangePasswordRequest'newPassword
               (\ x__ y__ -> x__{_ChangePasswordRequest'newPassword = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChangePasswordRequest where
        messageName _ = Data.Text.pack "lnrpc.ChangePasswordRequest"
        fieldsByTag
          = let currentPassword__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "current_password"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"currentPassword"))
                      :: Data.ProtoLens.FieldDescriptor ChangePasswordRequest
                newPassword__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "new_password"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"newPassword"))
                      :: Data.ProtoLens.FieldDescriptor ChangePasswordRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, currentPassword__field_descriptor),
                 (Data.ProtoLens.Tag 2, newPassword__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChangePasswordRequest'_unknownFields
              (\ x__ y__ -> x__{_ChangePasswordRequest'_unknownFields = y__})
        defMessage
          = ChangePasswordRequest{_ChangePasswordRequest'currentPassword =
                                    Data.ProtoLens.fieldDefault,
                                  _ChangePasswordRequest'newPassword = Data.ProtoLens.fieldDefault,
                                  _ChangePasswordRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChangePasswordRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChangePasswordRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "current_password"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"currentPassword")
                                              y
                                              x)
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "new_password"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"newPassword")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChangePasswordRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"currentPassword")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"newPassword") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChangePasswordRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChangePasswordRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_ChangePasswordRequest'currentPassword x__)
                    (Control.DeepSeq.deepseq (_ChangePasswordRequest'newPassword x__)
                       (()))))
{- | Fields :

 -}
data ChangePasswordResponse = ChangePasswordResponse{_ChangePasswordResponse'_unknownFields
                                                     :: !Data.ProtoLens.FieldSet}
                                deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChangePasswordResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ChangePasswordResponse where
        messageName _ = Data.Text.pack "lnrpc.ChangePasswordResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _ChangePasswordResponse'_unknownFields
              (\ x__ y__ -> x__{_ChangePasswordResponse'_unknownFields = y__})
        defMessage
          = ChangePasswordResponse{_ChangePasswordResponse'_unknownFields =
                                     ([])}
        parseMessage
          = let loop ::
                     ChangePasswordResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChangePasswordResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChangePasswordResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChangePasswordResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_ChangePasswordResponse'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.active' @:: Lens' Channel Prelude.Bool@
    * 'Proto.Rpc_Fields.remotePubkey' @:: Lens' Channel Data.Text.Text@
    * 'Proto.Rpc_Fields.channelPoint' @:: Lens' Channel Data.Text.Text@
    * 'Proto.Rpc_Fields.chanId' @:: Lens' Channel Data.Word.Word64@
    * 'Proto.Rpc_Fields.capacity' @:: Lens' Channel Data.Int.Int64@
    * 'Proto.Rpc_Fields.localBalance' @:: Lens' Channel Data.Int.Int64@
    * 'Proto.Rpc_Fields.remoteBalance' @:: Lens' Channel Data.Int.Int64@
    * 'Proto.Rpc_Fields.commitFee' @:: Lens' Channel Data.Int.Int64@
    * 'Proto.Rpc_Fields.commitWeight' @:: Lens' Channel Data.Int.Int64@
    * 'Proto.Rpc_Fields.feePerKw' @:: Lens' Channel Data.Int.Int64@
    * 'Proto.Rpc_Fields.unsettledBalance' @:: Lens' Channel Data.Int.Int64@
    * 'Proto.Rpc_Fields.totalSatoshisSent' @:: Lens' Channel Data.Int.Int64@
    * 'Proto.Rpc_Fields.totalSatoshisReceived' @:: Lens' Channel Data.Int.Int64@
    * 'Proto.Rpc_Fields.numUpdates' @:: Lens' Channel Data.Word.Word64@
    * 'Proto.Rpc_Fields.pendingHtlcs' @:: Lens' Channel [HTLC]@
    * 'Proto.Rpc_Fields.vec'pendingHtlcs' @:: Lens' Channel (Data.Vector.Vector HTLC)@
    * 'Proto.Rpc_Fields.csvDelay' @:: Lens' Channel Data.Word.Word32@
    * 'Proto.Rpc_Fields.private' @:: Lens' Channel Prelude.Bool@
    * 'Proto.Rpc_Fields.initiator' @:: Lens' Channel Prelude.Bool@
    * 'Proto.Rpc_Fields.chanStatusFlags' @:: Lens' Channel Data.Text.Text@
 -}
data Channel = Channel{_Channel'active :: !Prelude.Bool,
                       _Channel'remotePubkey :: !Data.Text.Text,
                       _Channel'channelPoint :: !Data.Text.Text,
                       _Channel'chanId :: !Data.Word.Word64,
                       _Channel'capacity :: !Data.Int.Int64,
                       _Channel'localBalance :: !Data.Int.Int64,
                       _Channel'remoteBalance :: !Data.Int.Int64,
                       _Channel'commitFee :: !Data.Int.Int64,
                       _Channel'commitWeight :: !Data.Int.Int64,
                       _Channel'feePerKw :: !Data.Int.Int64,
                       _Channel'unsettledBalance :: !Data.Int.Int64,
                       _Channel'totalSatoshisSent :: !Data.Int.Int64,
                       _Channel'totalSatoshisReceived :: !Data.Int.Int64,
                       _Channel'numUpdates :: !Data.Word.Word64,
                       _Channel'pendingHtlcs :: !(Data.Vector.Vector HTLC),
                       _Channel'csvDelay :: !Data.Word.Word32,
                       _Channel'private :: !Prelude.Bool,
                       _Channel'initiator :: !Prelude.Bool,
                       _Channel'chanStatusFlags :: !Data.Text.Text,
                       _Channel'_unknownFields :: !Data.ProtoLens.FieldSet}
                 deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Channel where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Channel "active"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'active
               (\ x__ y__ -> x__{_Channel'active = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "remotePubkey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'remotePubkey
               (\ x__ y__ -> x__{_Channel'remotePubkey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "channelPoint"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'channelPoint
               (\ x__ y__ -> x__{_Channel'channelPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "chanId"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'chanId
               (\ x__ y__ -> x__{_Channel'chanId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "capacity"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'capacity
               (\ x__ y__ -> x__{_Channel'capacity = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "localBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'localBalance
               (\ x__ y__ -> x__{_Channel'localBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "remoteBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'remoteBalance
               (\ x__ y__ -> x__{_Channel'remoteBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "commitFee"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'commitFee
               (\ x__ y__ -> x__{_Channel'commitFee = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "commitWeight"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'commitWeight
               (\ x__ y__ -> x__{_Channel'commitWeight = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "feePerKw"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'feePerKw
               (\ x__ y__ -> x__{_Channel'feePerKw = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "unsettledBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'unsettledBalance
               (\ x__ y__ -> x__{_Channel'unsettledBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "totalSatoshisSent"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'totalSatoshisSent
               (\ x__ y__ -> x__{_Channel'totalSatoshisSent = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel
           "totalSatoshisReceived"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'totalSatoshisReceived
               (\ x__ y__ -> x__{_Channel'totalSatoshisReceived = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "numUpdates"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'numUpdates
               (\ x__ y__ -> x__{_Channel'numUpdates = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "pendingHtlcs"
           ([HTLC])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'pendingHtlcs
               (\ x__ y__ -> x__{_Channel'pendingHtlcs = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField Channel "vec'pendingHtlcs"
           (Data.Vector.Vector HTLC)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'pendingHtlcs
               (\ x__ y__ -> x__{_Channel'pendingHtlcs = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "csvDelay"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'csvDelay
               (\ x__ y__ -> x__{_Channel'csvDelay = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "private"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'private
               (\ x__ y__ -> x__{_Channel'private = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "initiator"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'initiator
               (\ x__ y__ -> x__{_Channel'initiator = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Channel "chanStatusFlags"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Channel'chanStatusFlags
               (\ x__ y__ -> x__{_Channel'chanStatusFlags = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message Channel where
        messageName _ = Data.Text.pack "lnrpc.Channel"
        fieldsByTag
          = let active__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "active"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"active"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                remotePubkey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "remote_pubkey"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"remotePubkey"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                channelPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_point"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"channelPoint"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                chanId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanId"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                capacity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "capacity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"capacity"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                localBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "local_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"localBalance"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                remoteBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "remote_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"remoteBalance"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                commitFee__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "commit_fee"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"commitFee"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                commitWeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "commit_weight"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"commitWeight"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                feePerKw__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_per_kw"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feePerKw"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                unsettledBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "unsettled_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"unsettledBalance"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                totalSatoshisSent__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_satoshis_sent"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalSatoshisSent"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                totalSatoshisReceived__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_satoshis_received"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalSatoshisReceived"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                numUpdates__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_updates"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numUpdates"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                pendingHtlcs__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pending_htlcs"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor HTLC)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"pendingHtlcs"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                csvDelay__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "csv_delay"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"csvDelay"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                private__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "private"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"private"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                initiator__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "initiator"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"initiator"))
                      :: Data.ProtoLens.FieldDescriptor Channel
                chanStatusFlags__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_status_flags"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanStatusFlags"))
                      :: Data.ProtoLens.FieldDescriptor Channel
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, active__field_descriptor),
                 (Data.ProtoLens.Tag 2, remotePubkey__field_descriptor),
                 (Data.ProtoLens.Tag 3, channelPoint__field_descriptor),
                 (Data.ProtoLens.Tag 4, chanId__field_descriptor),
                 (Data.ProtoLens.Tag 5, capacity__field_descriptor),
                 (Data.ProtoLens.Tag 6, localBalance__field_descriptor),
                 (Data.ProtoLens.Tag 7, remoteBalance__field_descriptor),
                 (Data.ProtoLens.Tag 8, commitFee__field_descriptor),
                 (Data.ProtoLens.Tag 9, commitWeight__field_descriptor),
                 (Data.ProtoLens.Tag 10, feePerKw__field_descriptor),
                 (Data.ProtoLens.Tag 11, unsettledBalance__field_descriptor),
                 (Data.ProtoLens.Tag 12, totalSatoshisSent__field_descriptor),
                 (Data.ProtoLens.Tag 13, totalSatoshisReceived__field_descriptor),
                 (Data.ProtoLens.Tag 14, numUpdates__field_descriptor),
                 (Data.ProtoLens.Tag 15, pendingHtlcs__field_descriptor),
                 (Data.ProtoLens.Tag 16, csvDelay__field_descriptor),
                 (Data.ProtoLens.Tag 17, private__field_descriptor),
                 (Data.ProtoLens.Tag 18, initiator__field_descriptor),
                 (Data.ProtoLens.Tag 19, chanStatusFlags__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _Channel'_unknownFields
              (\ x__ y__ -> x__{_Channel'_unknownFields = y__})
        defMessage
          = Channel{_Channel'active = Data.ProtoLens.fieldDefault,
                    _Channel'remotePubkey = Data.ProtoLens.fieldDefault,
                    _Channel'channelPoint = Data.ProtoLens.fieldDefault,
                    _Channel'chanId = Data.ProtoLens.fieldDefault,
                    _Channel'capacity = Data.ProtoLens.fieldDefault,
                    _Channel'localBalance = Data.ProtoLens.fieldDefault,
                    _Channel'remoteBalance = Data.ProtoLens.fieldDefault,
                    _Channel'commitFee = Data.ProtoLens.fieldDefault,
                    _Channel'commitWeight = Data.ProtoLens.fieldDefault,
                    _Channel'feePerKw = Data.ProtoLens.fieldDefault,
                    _Channel'unsettledBalance = Data.ProtoLens.fieldDefault,
                    _Channel'totalSatoshisSent = Data.ProtoLens.fieldDefault,
                    _Channel'totalSatoshisReceived = Data.ProtoLens.fieldDefault,
                    _Channel'numUpdates = Data.ProtoLens.fieldDefault,
                    _Channel'pendingHtlcs = Data.Vector.Generic.empty,
                    _Channel'csvDelay = Data.ProtoLens.fieldDefault,
                    _Channel'private = Data.ProtoLens.fieldDefault,
                    _Channel'initiator = Data.ProtoLens.fieldDefault,
                    _Channel'chanStatusFlags = Data.ProtoLens.fieldDefault,
                    _Channel'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     Channel ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         HTLC
                         -> Data.ProtoLens.Encoding.Bytes.Parser Channel
                loop x mutable'pendingHtlcs
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'pendingHtlcs <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                     (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                        mutable'pendingHtlcs)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'pendingHtlcs")
                                    frozen'pendingHtlcs
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "active"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"active") y
                                             x)
                                          mutable'pendingHtlcs
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "remote_pubkey"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"remotePubkey")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                26 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"channelPoint")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                32 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_id"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"chanId")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "capacity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"capacity")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "local_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"localBalance")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                56 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "remote_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"remoteBalance")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                64 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "commit_fee"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"commitFee")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                72 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "commit_weight"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"commitWeight")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                80 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_per_kw"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"feePerKw")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                88 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "unsettled_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"unsettledBalance")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                96 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "total_satoshis_sent"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"totalSatoshisSent")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                104 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                  Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "total_satoshis_received"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"totalSatoshisReceived")
                                               y
                                               x)
                                            mutable'pendingHtlcs
                                112 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "num_updates"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"numUpdates")
                                               y
                                               x)
                                            mutable'pendingHtlcs
                                122 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                    Data.ProtoLens.Encoding.Bytes.isolate
                                                      (Prelude.fromIntegral len)
                                                      Data.ProtoLens.parseMessage)
                                                  Data.ProtoLens.Encoding.Bytes.<?> "pending_htlcs"
                                          v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.append
                                                    mutable'pendingHtlcs
                                                    y)
                                          loop x v
                                128 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                  Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "csv_delay"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"csvDelay")
                                               y
                                               x)
                                            mutable'pendingHtlcs
                                136 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                  Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "private"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"private")
                                               y
                                               x)
                                            mutable'pendingHtlcs
                                144 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                  Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "initiator"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"initiator")
                                               y
                                               x)
                                            mutable'pendingHtlcs
                                154 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                               Data.ProtoLens.Encoding.Bytes.getBytes
                                                                 (Prelude.fromIntegral len)
                                                   Data.ProtoLens.Encoding.Bytes.runEither
                                                     (case Data.Text.Encoding.decodeUtf8' value of
                                                          Prelude.Left err -> Prelude.Left
                                                                                (Prelude.show err)
                                                          Prelude.Right r -> Prelude.Right r))
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "chan_status_flags"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"chanStatusFlags")
                                               y
                                               x)
                                            mutable'pendingHtlcs
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'pendingHtlcs
              in
              (do mutable'pendingHtlcs <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'pendingHtlcs)
                Data.ProtoLens.Encoding.Bytes.<?> "Channel"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"active") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         (\ b -> if b then 1 else 0))
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"remotePubkey") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"channelPoint") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                          (((\ bs ->
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Prelude.. Data.Text.Encoding.encodeUtf8)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"chanId") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"capacity") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"localBalance") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"remoteBalance")
                                      _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 56) Data.Monoid.<>
                                  ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                     Prelude.fromIntegral)
                                    _v)
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view (Data.ProtoLens.Field.field @"commitFee") _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 64) Data.Monoid.<>
                                    ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                       Prelude.fromIntegral)
                                      _v)
                               Data.Monoid.<>
                               (let _v
                                      = Lens.Family2.view
                                          (Data.ProtoLens.Field.field @"commitWeight")
                                          _x
                                  in
                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                    Data.Monoid.mempty else
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 72) Data.Monoid.<>
                                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                         Prelude.fromIntegral)
                                        _v)
                                 Data.Monoid.<>
                                 (let _v
                                        = Lens.Family2.view (Data.ProtoLens.Field.field @"feePerKw")
                                            _x
                                    in
                                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                      Data.Monoid.mempty else
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 80) Data.Monoid.<>
                                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                           Prelude.fromIntegral)
                                          _v)
                                   Data.Monoid.<>
                                   (let _v
                                          = Lens.Family2.view
                                              (Data.ProtoLens.Field.field @"unsettledBalance")
                                              _x
                                      in
                                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                        Data.Monoid.mempty else
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 88) Data.Monoid.<>
                                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                             Prelude.fromIntegral)
                                            _v)
                                     Data.Monoid.<>
                                     (let _v
                                            = Lens.Family2.view
                                                (Data.ProtoLens.Field.field @"totalSatoshisSent")
                                                _x
                                        in
                                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                          Data.Monoid.mempty else
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt 96)
                                            Data.Monoid.<>
                                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                               Prelude.fromIntegral)
                                              _v)
                                       Data.Monoid.<>
                                       (let _v
                                              = Lens.Family2.view
                                                  (Data.ProtoLens.Field.field
                                                     @"totalSatoshisReceived")
                                                  _x
                                          in
                                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                            Data.Monoid.mempty else
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 104)
                                              Data.Monoid.<>
                                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                                 Prelude.fromIntegral)
                                                _v)
                                         Data.Monoid.<>
                                         (let _v
                                                = Lens.Family2.view
                                                    (Data.ProtoLens.Field.field @"numUpdates")
                                                    _x
                                            in
                                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                              Data.Monoid.mempty else
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt 112)
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                                           Data.Monoid.<>
                                           (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                              (\ _v ->
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 122)
                                                   Data.Monoid.<>
                                                   (((\ bs ->
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           (Prelude.fromIntegral
                                                              (Data.ByteString.length bs)))
                                                          Data.Monoid.<>
                                                          Data.ProtoLens.Encoding.Bytes.putBytes
                                                            bs))
                                                      Prelude.. Data.ProtoLens.encodeMessage)
                                                     _v)
                                              (Lens.Family2.view
                                                 (Data.ProtoLens.Field.field @"vec'pendingHtlcs")
                                                 _x))
                                             Data.Monoid.<>
                                             (let _v
                                                    = Lens.Family2.view
                                                        (Data.ProtoLens.Field.field @"csvDelay")
                                                        _x
                                                in
                                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                                  Data.Monoid.mempty else
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 128)
                                                    Data.Monoid.<>
                                                    ((Data.ProtoLens.Encoding.Bytes.putVarInt)
                                                       Prelude.. Prelude.fromIntegral)
                                                      _v)
                                               Data.Monoid.<>
                                               (let _v
                                                      = Lens.Family2.view
                                                          (Data.ProtoLens.Field.field @"private")
                                                          _x
                                                  in
                                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault
                                                    then Data.Monoid.mempty else
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 136)
                                                      Data.Monoid.<>
                                                      ((Data.ProtoLens.Encoding.Bytes.putVarInt)
                                                         Prelude.. (\ b -> if b then 1 else 0))
                                                        _v)
                                                 Data.Monoid.<>
                                                 (let _v
                                                        = Lens.Family2.view
                                                            (Data.ProtoLens.Field.field
                                                               @"initiator")
                                                            _x
                                                    in
                                                    if (_v) Prelude.== Data.ProtoLens.fieldDefault
                                                      then Data.Monoid.mempty else
                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 144)
                                                        Data.Monoid.<>
                                                        ((Data.ProtoLens.Encoding.Bytes.putVarInt)
                                                           Prelude.. (\ b -> if b then 1 else 0))
                                                          _v)
                                                   Data.Monoid.<>
                                                   (let _v
                                                          = Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"chanStatusFlags")
                                                              _x
                                                      in
                                                      if (_v) Prelude.== Data.ProtoLens.fieldDefault
                                                        then Data.Monoid.mempty else
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           154)
                                                          Data.Monoid.<>
                                                          (((\ bs ->
                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                  (Prelude.fromIntegral
                                                                     (Data.ByteString.length bs)))
                                                                 Data.Monoid.<>
                                                                 Data.ProtoLens.Encoding.Bytes.putBytes
                                                                   bs))
                                                             Prelude..
                                                             Data.Text.Encoding.encodeUtf8)
                                                            _v)
                                                     Data.Monoid.<>
                                                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                       (Lens.Family2.view
                                                          Data.ProtoLens.unknownFields
                                                          _x))
instance Control.DeepSeq.NFData Channel where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_Channel'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_Channel'active x__)
                    (Control.DeepSeq.deepseq (_Channel'remotePubkey x__)
                       (Control.DeepSeq.deepseq (_Channel'channelPoint x__)
                          (Control.DeepSeq.deepseq (_Channel'chanId x__)
                             (Control.DeepSeq.deepseq (_Channel'capacity x__)
                                (Control.DeepSeq.deepseq (_Channel'localBalance x__)
                                   (Control.DeepSeq.deepseq (_Channel'remoteBalance x__)
                                      (Control.DeepSeq.deepseq (_Channel'commitFee x__)
                                         (Control.DeepSeq.deepseq (_Channel'commitWeight x__)
                                            (Control.DeepSeq.deepseq (_Channel'feePerKw x__)
                                               (Control.DeepSeq.deepseq
                                                  (_Channel'unsettledBalance x__)
                                                  (Control.DeepSeq.deepseq
                                                     (_Channel'totalSatoshisSent x__)
                                                     (Control.DeepSeq.deepseq
                                                        (_Channel'totalSatoshisReceived x__)
                                                        (Control.DeepSeq.deepseq
                                                           (_Channel'numUpdates x__)
                                                           (Control.DeepSeq.deepseq
                                                              (_Channel'pendingHtlcs x__)
                                                              (Control.DeepSeq.deepseq
                                                                 (_Channel'csvDelay x__)
                                                                 (Control.DeepSeq.deepseq
                                                                    (_Channel'private x__)
                                                                    (Control.DeepSeq.deepseq
                                                                       (_Channel'initiator x__)
                                                                       (Control.DeepSeq.deepseq
                                                                          (_Channel'chanStatusFlags
                                                                             x__)
                                                                          (())))))))))))))))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.chanPoint' @:: Lens' ChannelBackup ChannelPoint@
    * 'Proto.Rpc_Fields.maybe'chanPoint' @:: Lens' ChannelBackup (Prelude.Maybe ChannelPoint)@
    * 'Proto.Rpc_Fields.chanBackup' @:: Lens' ChannelBackup Data.ByteString.ByteString@
 -}
data ChannelBackup = ChannelBackup{_ChannelBackup'chanPoint ::
                                   !(Prelude.Maybe ChannelPoint),
                                   _ChannelBackup'chanBackup :: !Data.ByteString.ByteString,
                                   _ChannelBackup'_unknownFields :: !Data.ProtoLens.FieldSet}
                       deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelBackup where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelBackup "chanPoint"
           (ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelBackup'chanPoint
               (\ x__ y__ -> x__{_ChannelBackup'chanPoint = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChannelBackup
           "maybe'chanPoint"
           (Prelude.Maybe ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelBackup'chanPoint
               (\ x__ y__ -> x__{_ChannelBackup'chanPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelBackup "chanBackup"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelBackup'chanBackup
               (\ x__ y__ -> x__{_ChannelBackup'chanBackup = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelBackup where
        messageName _ = Data.Text.pack "lnrpc.ChannelBackup"
        fieldsByTag
          = let chanPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_point"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'chanPoint"))
                      :: Data.ProtoLens.FieldDescriptor ChannelBackup
                chanBackup__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_backup"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanBackup"))
                      :: Data.ProtoLens.FieldDescriptor ChannelBackup
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanPoint__field_descriptor),
                 (Data.ProtoLens.Tag 2, chanBackup__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelBackup'_unknownFields
              (\ x__ y__ -> x__{_ChannelBackup'_unknownFields = y__})
        defMessage
          = ChannelBackup{_ChannelBackup'chanPoint = Prelude.Nothing,
                          _ChannelBackup'chanBackup = Data.ProtoLens.fieldDefault,
                          _ChannelBackup'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelBackup -> Data.ProtoLens.Encoding.Bytes.Parser ChannelBackup
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanPoint")
                                              y
                                              x)
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_backup"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanBackup")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelBackup"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'chanPoint")
                    _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"chanBackup") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelBackup where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelBackup'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelBackup'chanPoint x__)
                    (Control.DeepSeq.deepseq (_ChannelBackup'chanBackup x__) (()))))
{- | Fields :

 -}
data ChannelBackupSubscription = ChannelBackupSubscription{_ChannelBackupSubscription'_unknownFields
                                                           :: !Data.ProtoLens.FieldSet}
                                   deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelBackupSubscription where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ChannelBackupSubscription where
        messageName _ = Data.Text.pack "lnrpc.ChannelBackupSubscription"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _ChannelBackupSubscription'_unknownFields
              (\ x__ y__ -> x__{_ChannelBackupSubscription'_unknownFields = y__})
        defMessage
          = ChannelBackupSubscription{_ChannelBackupSubscription'_unknownFields
                                        = ([])}
        parseMessage
          = let loop ::
                     ChannelBackupSubscription ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelBackupSubscription
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelBackupSubscription"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelBackupSubscription where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_ChannelBackupSubscription'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.chanBackups' @:: Lens' ChannelBackups [ChannelBackup]@
    * 'Proto.Rpc_Fields.vec'chanBackups' @:: Lens' ChannelBackups (Data.Vector.Vector ChannelBackup)@
 -}
data ChannelBackups = ChannelBackups{_ChannelBackups'chanBackups ::
                                     !(Data.Vector.Vector ChannelBackup),
                                     _ChannelBackups'_unknownFields :: !Data.ProtoLens.FieldSet}
                        deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelBackups where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelBackups "chanBackups"
           ([ChannelBackup])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelBackups'chanBackups
               (\ x__ y__ -> x__{_ChannelBackups'chanBackups = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField ChannelBackups
           "vec'chanBackups"
           (Data.Vector.Vector ChannelBackup)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelBackups'chanBackups
               (\ x__ y__ -> x__{_ChannelBackups'chanBackups = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelBackups where
        messageName _ = Data.Text.pack "lnrpc.ChannelBackups"
        fieldsByTag
          = let chanBackups__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_backups"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelBackup)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"chanBackups"))
                      :: Data.ProtoLens.FieldDescriptor ChannelBackups
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanBackups__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelBackups'_unknownFields
              (\ x__ y__ -> x__{_ChannelBackups'_unknownFields = y__})
        defMessage
          = ChannelBackups{_ChannelBackups'chanBackups =
                             Data.Vector.Generic.empty,
                           _ChannelBackups'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelBackups ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         ChannelBackup
                         -> Data.ProtoLens.Encoding.Bytes.Parser ChannelBackups
                loop x mutable'chanBackups
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'chanBackups <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                    (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                       mutable'chanBackups)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'chanBackups")
                                    frozen'chanBackups
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "chan_backups"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'chanBackups
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'chanBackups
              in
              (do mutable'chanBackups <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'chanBackups)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelBackups"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'chanBackups")
                     _x))
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelBackups where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelBackups'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelBackups'chanBackups x__) (())))
{- | Fields :

 -}
data ChannelBalanceRequest = ChannelBalanceRequest{_ChannelBalanceRequest'_unknownFields
                                                   :: !Data.ProtoLens.FieldSet}
                               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelBalanceRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ChannelBalanceRequest where
        messageName _ = Data.Text.pack "lnrpc.ChannelBalanceRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelBalanceRequest'_unknownFields
              (\ x__ y__ -> x__{_ChannelBalanceRequest'_unknownFields = y__})
        defMessage
          = ChannelBalanceRequest{_ChannelBalanceRequest'_unknownFields =
                                    ([])}
        parseMessage
          = let loop ::
                     ChannelBalanceRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelBalanceRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelBalanceRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelBalanceRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelBalanceRequest'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.balance' @:: Lens' ChannelBalanceResponse Data.Int.Int64@
    * 'Proto.Rpc_Fields.pendingOpenBalance' @:: Lens' ChannelBalanceResponse Data.Int.Int64@
 -}
data ChannelBalanceResponse = ChannelBalanceResponse{_ChannelBalanceResponse'balance
                                                     :: !Data.Int.Int64,
                                                     _ChannelBalanceResponse'pendingOpenBalance ::
                                                     !Data.Int.Int64,
                                                     _ChannelBalanceResponse'_unknownFields ::
                                                     !Data.ProtoLens.FieldSet}
                                deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelBalanceResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelBalanceResponse
           "balance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelBalanceResponse'balance
               (\ x__ y__ -> x__{_ChannelBalanceResponse'balance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelBalanceResponse
           "pendingOpenBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ChannelBalanceResponse'pendingOpenBalance
               (\ x__ y__ ->
                  x__{_ChannelBalanceResponse'pendingOpenBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelBalanceResponse where
        messageName _ = Data.Text.pack "lnrpc.ChannelBalanceResponse"
        fieldsByTag
          = let balance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"balance"))
                      :: Data.ProtoLens.FieldDescriptor ChannelBalanceResponse
                pendingOpenBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pending_open_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pendingOpenBalance"))
                      :: Data.ProtoLens.FieldDescriptor ChannelBalanceResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, balance__field_descriptor),
                 (Data.ProtoLens.Tag 2, pendingOpenBalance__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _ChannelBalanceResponse'_unknownFields
              (\ x__ y__ -> x__{_ChannelBalanceResponse'_unknownFields = y__})
        defMessage
          = ChannelBalanceResponse{_ChannelBalanceResponse'balance =
                                     Data.ProtoLens.fieldDefault,
                                   _ChannelBalanceResponse'pendingOpenBalance =
                                     Data.ProtoLens.fieldDefault,
                                   _ChannelBalanceResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelBalanceResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelBalanceResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "balance"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"balance")
                                             y
                                             x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "pending_open_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"pendingOpenBalance")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelBalanceResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"balance") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view
                            (Data.ProtoLens.Field.field @"pendingOpenBalance")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelBalanceResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_ChannelBalanceResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelBalanceResponse'balance x__)
                    (Control.DeepSeq.deepseq
                       (_ChannelBalanceResponse'pendingOpenBalance x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.channelPoint' @:: Lens' ChannelCloseSummary Data.Text.Text@
    * 'Proto.Rpc_Fields.chanId' @:: Lens' ChannelCloseSummary Data.Word.Word64@
    * 'Proto.Rpc_Fields.chainHash' @:: Lens' ChannelCloseSummary Data.Text.Text@
    * 'Proto.Rpc_Fields.closingTxHash' @:: Lens' ChannelCloseSummary Data.Text.Text@
    * 'Proto.Rpc_Fields.remotePubkey' @:: Lens' ChannelCloseSummary Data.Text.Text@
    * 'Proto.Rpc_Fields.capacity' @:: Lens' ChannelCloseSummary Data.Int.Int64@
    * 'Proto.Rpc_Fields.closeHeight' @:: Lens' ChannelCloseSummary Data.Word.Word32@
    * 'Proto.Rpc_Fields.settledBalance' @:: Lens' ChannelCloseSummary Data.Int.Int64@
    * 'Proto.Rpc_Fields.timeLockedBalance' @:: Lens' ChannelCloseSummary Data.Int.Int64@
    * 'Proto.Rpc_Fields.closeType' @:: Lens' ChannelCloseSummary ChannelCloseSummary'ClosureType@
 -}
data ChannelCloseSummary = ChannelCloseSummary{_ChannelCloseSummary'channelPoint
                                               :: !Data.Text.Text,
                                               _ChannelCloseSummary'chanId :: !Data.Word.Word64,
                                               _ChannelCloseSummary'chainHash :: !Data.Text.Text,
                                               _ChannelCloseSummary'closingTxHash ::
                                               !Data.Text.Text,
                                               _ChannelCloseSummary'remotePubkey :: !Data.Text.Text,
                                               _ChannelCloseSummary'capacity :: !Data.Int.Int64,
                                               _ChannelCloseSummary'closeHeight ::
                                               !Data.Word.Word32,
                                               _ChannelCloseSummary'settledBalance ::
                                               !Data.Int.Int64,
                                               _ChannelCloseSummary'timeLockedBalance ::
                                               !Data.Int.Int64,
                                               _ChannelCloseSummary'closeType ::
                                               !ChannelCloseSummary'ClosureType,
                                               _ChannelCloseSummary'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelCloseSummary where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelCloseSummary
           "channelPoint"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseSummary'channelPoint
               (\ x__ y__ -> x__{_ChannelCloseSummary'channelPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelCloseSummary "chanId"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseSummary'chanId
               (\ x__ y__ -> x__{_ChannelCloseSummary'chanId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelCloseSummary
           "chainHash"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseSummary'chainHash
               (\ x__ y__ -> x__{_ChannelCloseSummary'chainHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelCloseSummary
           "closingTxHash"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseSummary'closingTxHash
               (\ x__ y__ -> x__{_ChannelCloseSummary'closingTxHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelCloseSummary
           "remotePubkey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseSummary'remotePubkey
               (\ x__ y__ -> x__{_ChannelCloseSummary'remotePubkey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelCloseSummary
           "capacity"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseSummary'capacity
               (\ x__ y__ -> x__{_ChannelCloseSummary'capacity = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelCloseSummary
           "closeHeight"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseSummary'closeHeight
               (\ x__ y__ -> x__{_ChannelCloseSummary'closeHeight = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelCloseSummary
           "settledBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseSummary'settledBalance
               (\ x__ y__ -> x__{_ChannelCloseSummary'settledBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelCloseSummary
           "timeLockedBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ChannelCloseSummary'timeLockedBalance
               (\ x__ y__ -> x__{_ChannelCloseSummary'timeLockedBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelCloseSummary
           "closeType"
           (ChannelCloseSummary'ClosureType)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseSummary'closeType
               (\ x__ y__ -> x__{_ChannelCloseSummary'closeType = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelCloseSummary where
        messageName _ = Data.Text.pack "lnrpc.ChannelCloseSummary"
        fieldsByTag
          = let channelPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_point"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"channelPoint"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseSummary
                chanId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanId"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseSummary
                chainHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chain_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chainHash"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseSummary
                closingTxHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "closing_tx_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"closingTxHash"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseSummary
                remotePubkey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "remote_pubkey"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"remotePubkey"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseSummary
                capacity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "capacity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"capacity"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseSummary
                closeHeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "close_height"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"closeHeight"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseSummary
                settledBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "settled_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"settledBalance"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseSummary
                timeLockedBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "time_locked_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"timeLockedBalance"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseSummary
                closeType__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "close_type"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelCloseSummary'ClosureType)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"closeType"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseSummary
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channelPoint__field_descriptor),
                 (Data.ProtoLens.Tag 2, chanId__field_descriptor),
                 (Data.ProtoLens.Tag 3, chainHash__field_descriptor),
                 (Data.ProtoLens.Tag 4, closingTxHash__field_descriptor),
                 (Data.ProtoLens.Tag 5, remotePubkey__field_descriptor),
                 (Data.ProtoLens.Tag 6, capacity__field_descriptor),
                 (Data.ProtoLens.Tag 7, closeHeight__field_descriptor),
                 (Data.ProtoLens.Tag 8, settledBalance__field_descriptor),
                 (Data.ProtoLens.Tag 9, timeLockedBalance__field_descriptor),
                 (Data.ProtoLens.Tag 10, closeType__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelCloseSummary'_unknownFields
              (\ x__ y__ -> x__{_ChannelCloseSummary'_unknownFields = y__})
        defMessage
          = ChannelCloseSummary{_ChannelCloseSummary'channelPoint =
                                  Data.ProtoLens.fieldDefault,
                                _ChannelCloseSummary'chanId = Data.ProtoLens.fieldDefault,
                                _ChannelCloseSummary'chainHash = Data.ProtoLens.fieldDefault,
                                _ChannelCloseSummary'closingTxHash = Data.ProtoLens.fieldDefault,
                                _ChannelCloseSummary'remotePubkey = Data.ProtoLens.fieldDefault,
                                _ChannelCloseSummary'capacity = Data.ProtoLens.fieldDefault,
                                _ChannelCloseSummary'closeHeight = Data.ProtoLens.fieldDefault,
                                _ChannelCloseSummary'settledBalance = Data.ProtoLens.fieldDefault,
                                _ChannelCloseSummary'timeLockedBalance =
                                  Data.ProtoLens.fieldDefault,
                                _ChannelCloseSummary'closeType = Data.ProtoLens.fieldDefault,
                                _ChannelCloseSummary'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelCloseSummary ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelCloseSummary
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"channelPoint")
                                              y
                                              x)
                                16 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_id"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"chanId")
                                              y
                                              x)
                                26 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "chain_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chainHash")
                                              y
                                              x)
                                34 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "closing_tx_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"closingTxHash")
                                              y
                                              x)
                                42 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "remote_pubkey"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"remotePubkey")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "capacity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"capacity")
                                              y
                                              x)
                                56 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "close_height"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"closeHeight")
                                              y
                                              x)
                                64 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "settled_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"settledBalance")
                                              y
                                              x)
                                72 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "time_locked_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"timeLockedBalance")
                                              y
                                              x)
                                80 -> do y <- (Prelude.fmap Prelude.toEnum
                                                 (Prelude.fmap Prelude.fromIntegral
                                                    Data.ProtoLens.Encoding.Bytes.getVarInt))
                                                Data.ProtoLens.Encoding.Bytes.<?> "close_type"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"closeType")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelCloseSummary"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"channelPoint") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"chanId") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"chainHash") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                          (((\ bs ->
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Prelude.. Data.Text.Encoding.encodeUtf8)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"closingTxHash")
                                _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                            (((\ bs ->
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                               Prelude.. Data.Text.Encoding.encodeUtf8)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"remotePubkey") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 42) Data.Monoid.<>
                              (((\ bs ->
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Prelude.. Data.Text.Encoding.encodeUtf8)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"capacity") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"closeHeight") _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 56) Data.Monoid.<>
                                  ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                     Prelude.fromIntegral)
                                    _v)
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view
                                        (Data.ProtoLens.Field.field @"settledBalance")
                                        _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 64) Data.Monoid.<>
                                    ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                       Prelude.fromIntegral)
                                      _v)
                               Data.Monoid.<>
                               (let _v
                                      = Lens.Family2.view
                                          (Data.ProtoLens.Field.field @"timeLockedBalance")
                                          _x
                                  in
                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                    Data.Monoid.mempty else
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 72) Data.Monoid.<>
                                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                         Prelude.fromIntegral)
                                        _v)
                                 Data.Monoid.<>
                                 (let _v
                                        = Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"closeType")
                                            _x
                                    in
                                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                      Data.Monoid.mempty else
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 80) Data.Monoid.<>
                                        (((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                            Prelude.fromIntegral)
                                           Prelude.. Prelude.fromEnum)
                                          _v)
                                   Data.Monoid.<>
                                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelCloseSummary where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelCloseSummary'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelCloseSummary'channelPoint x__)
                    (Control.DeepSeq.deepseq (_ChannelCloseSummary'chanId x__)
                       (Control.DeepSeq.deepseq (_ChannelCloseSummary'chainHash x__)
                          (Control.DeepSeq.deepseq (_ChannelCloseSummary'closingTxHash x__)
                             (Control.DeepSeq.deepseq (_ChannelCloseSummary'remotePubkey x__)
                                (Control.DeepSeq.deepseq (_ChannelCloseSummary'capacity x__)
                                   (Control.DeepSeq.deepseq (_ChannelCloseSummary'closeHeight x__)
                                      (Control.DeepSeq.deepseq
                                         (_ChannelCloseSummary'settledBalance x__)
                                         (Control.DeepSeq.deepseq
                                            (_ChannelCloseSummary'timeLockedBalance x__)
                                            (Control.DeepSeq.deepseq
                                               (_ChannelCloseSummary'closeType x__)
                                               (()))))))))))))
newtype ChannelCloseSummary'ClosureType'UnrecognizedValue = ChannelCloseSummary'ClosureType'UnrecognizedValue Data.Int.Int32
                                                              deriving (Prelude.Eq, Prelude.Ord,
                                                                        Prelude.Show)
data ChannelCloseSummary'ClosureType = ChannelCloseSummary'COOPERATIVE_CLOSE
                                     | ChannelCloseSummary'LOCAL_FORCE_CLOSE
                                     | ChannelCloseSummary'REMOTE_FORCE_CLOSE
                                     | ChannelCloseSummary'BREACH_CLOSE
                                     | ChannelCloseSummary'FUNDING_CANCELED
                                     | ChannelCloseSummary'ABANDONED
                                     | ChannelCloseSummary'ClosureType'Unrecognized !ChannelCloseSummary'ClosureType'UnrecognizedValue
                                         deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ChannelCloseSummary'ClosureType
         where
        maybeToEnum 0 = Prelude.Just ChannelCloseSummary'COOPERATIVE_CLOSE
        maybeToEnum 1 = Prelude.Just ChannelCloseSummary'LOCAL_FORCE_CLOSE
        maybeToEnum 2 = Prelude.Just ChannelCloseSummary'REMOTE_FORCE_CLOSE
        maybeToEnum 3 = Prelude.Just ChannelCloseSummary'BREACH_CLOSE
        maybeToEnum 4 = Prelude.Just ChannelCloseSummary'FUNDING_CANCELED
        maybeToEnum 5 = Prelude.Just ChannelCloseSummary'ABANDONED
        maybeToEnum k
          = Prelude.Just
              (ChannelCloseSummary'ClosureType'Unrecognized
                 (ChannelCloseSummary'ClosureType'UnrecognizedValue
                    (Prelude.fromIntegral k)))
        showEnum ChannelCloseSummary'COOPERATIVE_CLOSE
          = "COOPERATIVE_CLOSE"
        showEnum ChannelCloseSummary'LOCAL_FORCE_CLOSE
          = "LOCAL_FORCE_CLOSE"
        showEnum ChannelCloseSummary'REMOTE_FORCE_CLOSE
          = "REMOTE_FORCE_CLOSE"
        showEnum ChannelCloseSummary'BREACH_CLOSE = "BREACH_CLOSE"
        showEnum ChannelCloseSummary'FUNDING_CANCELED = "FUNDING_CANCELED"
        showEnum ChannelCloseSummary'ABANDONED = "ABANDONED"
        showEnum
          (ChannelCloseSummary'ClosureType'Unrecognized
             (ChannelCloseSummary'ClosureType'UnrecognizedValue k))
          = Prelude.show k
        readEnum k
          | (k) Prelude.== "COOPERATIVE_CLOSE" =
            Prelude.Just ChannelCloseSummary'COOPERATIVE_CLOSE
          | (k) Prelude.== "LOCAL_FORCE_CLOSE" =
            Prelude.Just ChannelCloseSummary'LOCAL_FORCE_CLOSE
          | (k) Prelude.== "REMOTE_FORCE_CLOSE" =
            Prelude.Just ChannelCloseSummary'REMOTE_FORCE_CLOSE
          | (k) Prelude.== "BREACH_CLOSE" =
            Prelude.Just ChannelCloseSummary'BREACH_CLOSE
          | (k) Prelude.== "FUNDING_CANCELED" =
            Prelude.Just ChannelCloseSummary'FUNDING_CANCELED
          | (k) Prelude.== "ABANDONED" =
            Prelude.Just ChannelCloseSummary'ABANDONED
        readEnum k
          = (Text.Read.readMaybe k) Prelude.>>= Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ChannelCloseSummary'ClosureType where
        minBound = ChannelCloseSummary'COOPERATIVE_CLOSE
        maxBound = ChannelCloseSummary'ABANDONED
instance Prelude.Enum ChannelCloseSummary'ClosureType where
        toEnum k__
          = Prelude.maybe
              (Prelude.error
                 (("toEnum: unknown value for enum ClosureType: ") Prelude.++
                    Prelude.show k__))
              Prelude.id
              (Data.ProtoLens.maybeToEnum k__)
        fromEnum ChannelCloseSummary'COOPERATIVE_CLOSE = 0
        fromEnum ChannelCloseSummary'LOCAL_FORCE_CLOSE = 1
        fromEnum ChannelCloseSummary'REMOTE_FORCE_CLOSE = 2
        fromEnum ChannelCloseSummary'BREACH_CLOSE = 3
        fromEnum ChannelCloseSummary'FUNDING_CANCELED = 4
        fromEnum ChannelCloseSummary'ABANDONED = 5
        fromEnum
          (ChannelCloseSummary'ClosureType'Unrecognized
             (ChannelCloseSummary'ClosureType'UnrecognizedValue k))
          = Prelude.fromIntegral k
        succ ChannelCloseSummary'ABANDONED
          = Prelude.error
              "ChannelCloseSummary'ClosureType.succ: bad argument ChannelCloseSummary'ABANDONED. This value would be out of bounds."
        succ ChannelCloseSummary'COOPERATIVE_CLOSE
          = ChannelCloseSummary'LOCAL_FORCE_CLOSE
        succ ChannelCloseSummary'LOCAL_FORCE_CLOSE
          = ChannelCloseSummary'REMOTE_FORCE_CLOSE
        succ ChannelCloseSummary'REMOTE_FORCE_CLOSE
          = ChannelCloseSummary'BREACH_CLOSE
        succ ChannelCloseSummary'BREACH_CLOSE
          = ChannelCloseSummary'FUNDING_CANCELED
        succ ChannelCloseSummary'FUNDING_CANCELED
          = ChannelCloseSummary'ABANDONED
        succ (ChannelCloseSummary'ClosureType'Unrecognized _)
          = Prelude.error
              "ChannelCloseSummary'ClosureType.succ: bad argument: unrecognized value"
        pred ChannelCloseSummary'COOPERATIVE_CLOSE
          = Prelude.error
              "ChannelCloseSummary'ClosureType.pred: bad argument ChannelCloseSummary'COOPERATIVE_CLOSE. This value would be out of bounds."
        pred ChannelCloseSummary'LOCAL_FORCE_CLOSE
          = ChannelCloseSummary'COOPERATIVE_CLOSE
        pred ChannelCloseSummary'REMOTE_FORCE_CLOSE
          = ChannelCloseSummary'LOCAL_FORCE_CLOSE
        pred ChannelCloseSummary'BREACH_CLOSE
          = ChannelCloseSummary'REMOTE_FORCE_CLOSE
        pred ChannelCloseSummary'FUNDING_CANCELED
          = ChannelCloseSummary'BREACH_CLOSE
        pred ChannelCloseSummary'ABANDONED
          = ChannelCloseSummary'FUNDING_CANCELED
        pred (ChannelCloseSummary'ClosureType'Unrecognized _)
          = Prelude.error
              "ChannelCloseSummary'ClosureType.pred: bad argument: unrecognized value"
        enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
        enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
        enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
        enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault
           ChannelCloseSummary'ClosureType
         where
        fieldDefault = ChannelCloseSummary'COOPERATIVE_CLOSE
instance Control.DeepSeq.NFData ChannelCloseSummary'ClosureType
         where
        rnf x__ = Prelude.seq x__ (())
{- | Fields :

    * 'Proto.Rpc_Fields.closingTxid' @:: Lens' ChannelCloseUpdate Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.success' @:: Lens' ChannelCloseUpdate Prelude.Bool@
 -}
data ChannelCloseUpdate = ChannelCloseUpdate{_ChannelCloseUpdate'closingTxid
                                             :: !Data.ByteString.ByteString,
                                             _ChannelCloseUpdate'success :: !Prelude.Bool,
                                             _ChannelCloseUpdate'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelCloseUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelCloseUpdate
           "closingTxid"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseUpdate'closingTxid
               (\ x__ y__ -> x__{_ChannelCloseUpdate'closingTxid = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelCloseUpdate "success"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelCloseUpdate'success
               (\ x__ y__ -> x__{_ChannelCloseUpdate'success = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelCloseUpdate where
        messageName _ = Data.Text.pack "lnrpc.ChannelCloseUpdate"
        fieldsByTag
          = let closingTxid__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "closing_txid"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"closingTxid"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseUpdate
                success__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "success"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"success"))
                      :: Data.ProtoLens.FieldDescriptor ChannelCloseUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, closingTxid__field_descriptor),
                 (Data.ProtoLens.Tag 2, success__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelCloseUpdate'_unknownFields
              (\ x__ y__ -> x__{_ChannelCloseUpdate'_unknownFields = y__})
        defMessage
          = ChannelCloseUpdate{_ChannelCloseUpdate'closingTxid =
                                 Data.ProtoLens.fieldDefault,
                               _ChannelCloseUpdate'success = Data.ProtoLens.fieldDefault,
                               _ChannelCloseUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelCloseUpdate ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelCloseUpdate
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "closing_txid"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"closingTxid")
                                              y
                                              x)
                                16 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "success"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"success")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelCloseUpdate"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"closingTxid") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"success") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           (\ b -> if b then 1 else 0))
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelCloseUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelCloseUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelCloseUpdate'closingTxid x__)
                    (Control.DeepSeq.deepseq (_ChannelCloseUpdate'success x__) (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.channelId' @:: Lens' ChannelEdge Data.Word.Word64@
    * 'Proto.Rpc_Fields.chanPoint' @:: Lens' ChannelEdge Data.Text.Text@
    * 'Proto.Rpc_Fields.lastUpdate' @:: Lens' ChannelEdge Data.Word.Word32@
    * 'Proto.Rpc_Fields.node1Pub' @:: Lens' ChannelEdge Data.Text.Text@
    * 'Proto.Rpc_Fields.node2Pub' @:: Lens' ChannelEdge Data.Text.Text@
    * 'Proto.Rpc_Fields.capacity' @:: Lens' ChannelEdge Data.Int.Int64@
    * 'Proto.Rpc_Fields.node1Policy' @:: Lens' ChannelEdge RoutingPolicy@
    * 'Proto.Rpc_Fields.maybe'node1Policy' @:: Lens' ChannelEdge (Prelude.Maybe RoutingPolicy)@
    * 'Proto.Rpc_Fields.node2Policy' @:: Lens' ChannelEdge RoutingPolicy@
    * 'Proto.Rpc_Fields.maybe'node2Policy' @:: Lens' ChannelEdge (Prelude.Maybe RoutingPolicy)@
 -}
data ChannelEdge = ChannelEdge{_ChannelEdge'channelId ::
                               !Data.Word.Word64,
                               _ChannelEdge'chanPoint :: !Data.Text.Text,
                               _ChannelEdge'lastUpdate :: !Data.Word.Word32,
                               _ChannelEdge'node1Pub :: !Data.Text.Text,
                               _ChannelEdge'node2Pub :: !Data.Text.Text,
                               _ChannelEdge'capacity :: !Data.Int.Int64,
                               _ChannelEdge'node1Policy :: !(Prelude.Maybe RoutingPolicy),
                               _ChannelEdge'node2Policy :: !(Prelude.Maybe RoutingPolicy),
                               _ChannelEdge'_unknownFields :: !Data.ProtoLens.FieldSet}
                     deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelEdge where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelEdge "channelId"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdge'channelId
               (\ x__ y__ -> x__{_ChannelEdge'channelId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdge "chanPoint"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdge'chanPoint
               (\ x__ y__ -> x__{_ChannelEdge'chanPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdge "lastUpdate"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdge'lastUpdate
               (\ x__ y__ -> x__{_ChannelEdge'lastUpdate = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdge "node1Pub"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdge'node1Pub
               (\ x__ y__ -> x__{_ChannelEdge'node1Pub = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdge "node2Pub"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdge'node2Pub
               (\ x__ y__ -> x__{_ChannelEdge'node2Pub = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdge "capacity"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdge'capacity
               (\ x__ y__ -> x__{_ChannelEdge'capacity = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdge "node1Policy"
           (RoutingPolicy)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdge'node1Policy
               (\ x__ y__ -> x__{_ChannelEdge'node1Policy = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChannelEdge
           "maybe'node1Policy"
           (Prelude.Maybe RoutingPolicy)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdge'node1Policy
               (\ x__ y__ -> x__{_ChannelEdge'node1Policy = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdge "node2Policy"
           (RoutingPolicy)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdge'node2Policy
               (\ x__ y__ -> x__{_ChannelEdge'node2Policy = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChannelEdge
           "maybe'node2Policy"
           (Prelude.Maybe RoutingPolicy)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdge'node2Policy
               (\ x__ y__ -> x__{_ChannelEdge'node2Policy = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelEdge where
        messageName _ = Data.Text.pack "lnrpc.ChannelEdge"
        fieldsByTag
          = let channelId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"channelId"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdge
                chanPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_point"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanPoint"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdge
                lastUpdate__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "last_update"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"lastUpdate"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdge
                node1Pub__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "node1_pub"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"node1Pub"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdge
                node2Pub__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "node2_pub"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"node2Pub"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdge
                capacity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "capacity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"capacity"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdge
                node1Policy__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "node1_policy"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor RoutingPolicy)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'node1Policy"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdge
                node2Policy__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "node2_policy"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor RoutingPolicy)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'node2Policy"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdge
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channelId__field_descriptor),
                 (Data.ProtoLens.Tag 2, chanPoint__field_descriptor),
                 (Data.ProtoLens.Tag 3, lastUpdate__field_descriptor),
                 (Data.ProtoLens.Tag 4, node1Pub__field_descriptor),
                 (Data.ProtoLens.Tag 5, node2Pub__field_descriptor),
                 (Data.ProtoLens.Tag 6, capacity__field_descriptor),
                 (Data.ProtoLens.Tag 7, node1Policy__field_descriptor),
                 (Data.ProtoLens.Tag 8, node2Policy__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelEdge'_unknownFields
              (\ x__ y__ -> x__{_ChannelEdge'_unknownFields = y__})
        defMessage
          = ChannelEdge{_ChannelEdge'channelId = Data.ProtoLens.fieldDefault,
                        _ChannelEdge'chanPoint = Data.ProtoLens.fieldDefault,
                        _ChannelEdge'lastUpdate = Data.ProtoLens.fieldDefault,
                        _ChannelEdge'node1Pub = Data.ProtoLens.fieldDefault,
                        _ChannelEdge'node2Pub = Data.ProtoLens.fieldDefault,
                        _ChannelEdge'capacity = Data.ProtoLens.fieldDefault,
                        _ChannelEdge'node1Policy = Prelude.Nothing,
                        _ChannelEdge'node2Policy = Prelude.Nothing,
                        _ChannelEdge'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelEdge -> Data.ProtoLens.Encoding.Bytes.Parser ChannelEdge
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "channel_id"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"channelId")
                                             y
                                             x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanPoint")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "last_update"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"lastUpdate")
                                              y
                                              x)
                                34 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "node1_pub"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"node1Pub")
                                              y
                                              x)
                                42 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "node2_pub"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"node2Pub")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "capacity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"capacity")
                                              y
                                              x)
                                58 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "node1_policy"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"node1Policy")
                                              y
                                              x)
                                66 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "node2_policy"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"node2Policy")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelEdge"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"channelId") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"chanPoint") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"lastUpdate") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"node1Pub") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                            (((\ bs ->
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                               Prelude.. Data.Text.Encoding.encodeUtf8)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"node2Pub") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 42) Data.Monoid.<>
                              (((\ bs ->
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Prelude.. Data.Text.Encoding.encodeUtf8)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"capacity") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'node1Policy")
                                _x
                              of
                                (Prelude.Nothing) -> Data.Monoid.mempty
                                Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                                     Data.Monoid.<>
                                                     (((\ bs ->
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             (Prelude.fromIntegral
                                                                (Data.ByteString.length bs)))
                                                            Data.Monoid.<>
                                                            Data.ProtoLens.Encoding.Bytes.putBytes
                                                              bs))
                                                        Prelude.. Data.ProtoLens.encodeMessage)
                                                       _v)
                             Data.Monoid.<>
                             (case
                                Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'node2Policy")
                                  _x
                                of
                                  (Prelude.Nothing) -> Data.Monoid.mempty
                                  Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                                       Data.Monoid.<>
                                                       (((\ bs ->
                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                               (Prelude.fromIntegral
                                                                  (Data.ByteString.length bs)))
                                                              Data.Monoid.<>
                                                              Data.ProtoLens.Encoding.Bytes.putBytes
                                                                bs))
                                                          Prelude.. Data.ProtoLens.encodeMessage)
                                                         _v)
                               Data.Monoid.<>
                               Data.ProtoLens.Encoding.Wire.buildFieldSet
                                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelEdge where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelEdge'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelEdge'channelId x__)
                    (Control.DeepSeq.deepseq (_ChannelEdge'chanPoint x__)
                       (Control.DeepSeq.deepseq (_ChannelEdge'lastUpdate x__)
                          (Control.DeepSeq.deepseq (_ChannelEdge'node1Pub x__)
                             (Control.DeepSeq.deepseq (_ChannelEdge'node2Pub x__)
                                (Control.DeepSeq.deepseq (_ChannelEdge'capacity x__)
                                   (Control.DeepSeq.deepseq (_ChannelEdge'node1Policy x__)
                                      (Control.DeepSeq.deepseq (_ChannelEdge'node2Policy x__)
                                         (()))))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.chanId' @:: Lens' ChannelEdgeUpdate Data.Word.Word64@
    * 'Proto.Rpc_Fields.chanPoint' @:: Lens' ChannelEdgeUpdate ChannelPoint@
    * 'Proto.Rpc_Fields.maybe'chanPoint' @:: Lens' ChannelEdgeUpdate (Prelude.Maybe ChannelPoint)@
    * 'Proto.Rpc_Fields.capacity' @:: Lens' ChannelEdgeUpdate Data.Int.Int64@
    * 'Proto.Rpc_Fields.routingPolicy' @:: Lens' ChannelEdgeUpdate RoutingPolicy@
    * 'Proto.Rpc_Fields.maybe'routingPolicy' @:: Lens' ChannelEdgeUpdate (Prelude.Maybe RoutingPolicy)@
    * 'Proto.Rpc_Fields.advertisingNode' @:: Lens' ChannelEdgeUpdate Data.Text.Text@
    * 'Proto.Rpc_Fields.connectingNode' @:: Lens' ChannelEdgeUpdate Data.Text.Text@
 -}
data ChannelEdgeUpdate = ChannelEdgeUpdate{_ChannelEdgeUpdate'chanId
                                           :: !Data.Word.Word64,
                                           _ChannelEdgeUpdate'chanPoint ::
                                           !(Prelude.Maybe ChannelPoint),
                                           _ChannelEdgeUpdate'capacity :: !Data.Int.Int64,
                                           _ChannelEdgeUpdate'routingPolicy ::
                                           !(Prelude.Maybe RoutingPolicy),
                                           _ChannelEdgeUpdate'advertisingNode :: !Data.Text.Text,
                                           _ChannelEdgeUpdate'connectingNode :: !Data.Text.Text,
                                           _ChannelEdgeUpdate'_unknownFields ::
                                           !Data.ProtoLens.FieldSet}
                           deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelEdgeUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelEdgeUpdate "chanId"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdgeUpdate'chanId
               (\ x__ y__ -> x__{_ChannelEdgeUpdate'chanId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdgeUpdate
           "chanPoint"
           (ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdgeUpdate'chanPoint
               (\ x__ y__ -> x__{_ChannelEdgeUpdate'chanPoint = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChannelEdgeUpdate
           "maybe'chanPoint"
           (Prelude.Maybe ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdgeUpdate'chanPoint
               (\ x__ y__ -> x__{_ChannelEdgeUpdate'chanPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdgeUpdate "capacity"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdgeUpdate'capacity
               (\ x__ y__ -> x__{_ChannelEdgeUpdate'capacity = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdgeUpdate
           "routingPolicy"
           (RoutingPolicy)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdgeUpdate'routingPolicy
               (\ x__ y__ -> x__{_ChannelEdgeUpdate'routingPolicy = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChannelEdgeUpdate
           "maybe'routingPolicy"
           (Prelude.Maybe RoutingPolicy)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdgeUpdate'routingPolicy
               (\ x__ y__ -> x__{_ChannelEdgeUpdate'routingPolicy = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdgeUpdate
           "advertisingNode"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdgeUpdate'advertisingNode
               (\ x__ y__ -> x__{_ChannelEdgeUpdate'advertisingNode = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEdgeUpdate
           "connectingNode"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEdgeUpdate'connectingNode
               (\ x__ y__ -> x__{_ChannelEdgeUpdate'connectingNode = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelEdgeUpdate where
        messageName _ = Data.Text.pack "lnrpc.ChannelEdgeUpdate"
        fieldsByTag
          = let chanId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanId"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdgeUpdate
                chanPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_point"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'chanPoint"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdgeUpdate
                capacity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "capacity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"capacity"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdgeUpdate
                routingPolicy__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "routing_policy"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor RoutingPolicy)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'routingPolicy"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdgeUpdate
                advertisingNode__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "advertising_node"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"advertisingNode"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdgeUpdate
                connectingNode__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "connecting_node"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"connectingNode"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEdgeUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanId__field_descriptor),
                 (Data.ProtoLens.Tag 2, chanPoint__field_descriptor),
                 (Data.ProtoLens.Tag 3, capacity__field_descriptor),
                 (Data.ProtoLens.Tag 4, routingPolicy__field_descriptor),
                 (Data.ProtoLens.Tag 5, advertisingNode__field_descriptor),
                 (Data.ProtoLens.Tag 6, connectingNode__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelEdgeUpdate'_unknownFields
              (\ x__ y__ -> x__{_ChannelEdgeUpdate'_unknownFields = y__})
        defMessage
          = ChannelEdgeUpdate{_ChannelEdgeUpdate'chanId =
                                Data.ProtoLens.fieldDefault,
                              _ChannelEdgeUpdate'chanPoint = Prelude.Nothing,
                              _ChannelEdgeUpdate'capacity = Data.ProtoLens.fieldDefault,
                              _ChannelEdgeUpdate'routingPolicy = Prelude.Nothing,
                              _ChannelEdgeUpdate'advertisingNode = Data.ProtoLens.fieldDefault,
                              _ChannelEdgeUpdate'connectingNode = Data.ProtoLens.fieldDefault,
                              _ChannelEdgeUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelEdgeUpdate ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelEdgeUpdate
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "chan_id"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"chanId") y
                                             x)
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanPoint")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "capacity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"capacity")
                                              y
                                              x)
                                34 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "routing_policy"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"routingPolicy")
                                              y
                                              x)
                                42 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "advertising_node"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"advertisingNode")
                                              y
                                              x)
                                50 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "connecting_node"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"connectingNode")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelEdgeUpdate"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"chanId") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                 Data.Monoid.<>
                 (case
                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'chanPoint")
                      _x
                    of
                      (Prelude.Nothing) -> Data.Monoid.mempty
                      Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                                           Data.Monoid.<>
                                           (((\ bs ->
                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                   (Prelude.fromIntegral
                                                      (Data.ByteString.length bs)))
                                                  Data.Monoid.<>
                                                  Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                              Prelude.. Data.ProtoLens.encodeMessage)
                                             _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"capacity") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'routingPolicy")
                          _x
                        of
                          (Prelude.Nothing) -> Data.Monoid.mempty
                          Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                               Data.Monoid.<>
                                               (((\ bs ->
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                      Data.Monoid.<>
                                                      Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                  Prelude.. Data.ProtoLens.encodeMessage)
                                                 _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"advertisingNode")
                                  _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 42) Data.Monoid.<>
                              (((\ bs ->
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Prelude.. Data.Text.Encoding.encodeUtf8)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"connectingNode")
                                    _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 50) Data.Monoid.<>
                                (((\ bs ->
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                       Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Prelude.. Data.Text.Encoding.encodeUtf8)
                                  _v)
                           Data.Monoid.<>
                           Data.ProtoLens.Encoding.Wire.buildFieldSet
                             (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelEdgeUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelEdgeUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelEdgeUpdate'chanId x__)
                    (Control.DeepSeq.deepseq (_ChannelEdgeUpdate'chanPoint x__)
                       (Control.DeepSeq.deepseq (_ChannelEdgeUpdate'capacity x__)
                          (Control.DeepSeq.deepseq (_ChannelEdgeUpdate'routingPolicy x__)
                             (Control.DeepSeq.deepseq (_ChannelEdgeUpdate'advertisingNode x__)
                                (Control.DeepSeq.deepseq (_ChannelEdgeUpdate'connectingNode x__)
                                   (()))))))))
{- | Fields :

 -}
data ChannelEventSubscription = ChannelEventSubscription{_ChannelEventSubscription'_unknownFields
                                                         :: !Data.ProtoLens.FieldSet}
                                  deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelEventSubscription where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ChannelEventSubscription where
        messageName _ = Data.Text.pack "lnrpc.ChannelEventSubscription"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _ChannelEventSubscription'_unknownFields
              (\ x__ y__ -> x__{_ChannelEventSubscription'_unknownFields = y__})
        defMessage
          = ChannelEventSubscription{_ChannelEventSubscription'_unknownFields
                                       = ([])}
        parseMessage
          = let loop ::
                     ChannelEventSubscription ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelEventSubscription
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelEventSubscription"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelEventSubscription where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_ChannelEventSubscription'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.type'' @:: Lens' ChannelEventUpdate ChannelEventUpdate'UpdateType@
    * 'Proto.Rpc_Fields.maybe'channel' @:: Lens' ChannelEventUpdate (Prelude.Maybe ChannelEventUpdate'Channel)@
    * 'Proto.Rpc_Fields.maybe'openChannel' @:: Lens' ChannelEventUpdate (Prelude.Maybe Channel)@
    * 'Proto.Rpc_Fields.openChannel' @:: Lens' ChannelEventUpdate Channel@
    * 'Proto.Rpc_Fields.maybe'closedChannel' @:: Lens' ChannelEventUpdate (Prelude.Maybe ChannelCloseSummary)@
    * 'Proto.Rpc_Fields.closedChannel' @:: Lens' ChannelEventUpdate ChannelCloseSummary@
    * 'Proto.Rpc_Fields.maybe'activeChannel' @:: Lens' ChannelEventUpdate (Prelude.Maybe ChannelPoint)@
    * 'Proto.Rpc_Fields.activeChannel' @:: Lens' ChannelEventUpdate ChannelPoint@
    * 'Proto.Rpc_Fields.maybe'inactiveChannel' @:: Lens' ChannelEventUpdate (Prelude.Maybe ChannelPoint)@
    * 'Proto.Rpc_Fields.inactiveChannel' @:: Lens' ChannelEventUpdate ChannelPoint@
 -}
data ChannelEventUpdate = ChannelEventUpdate{_ChannelEventUpdate'type'
                                             :: !ChannelEventUpdate'UpdateType,
                                             _ChannelEventUpdate'channel ::
                                             !(Prelude.Maybe ChannelEventUpdate'Channel),
                                             _ChannelEventUpdate'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelEventUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
data ChannelEventUpdate'Channel = ChannelEventUpdate'OpenChannel !Channel
                                | ChannelEventUpdate'ClosedChannel !ChannelCloseSummary
                                | ChannelEventUpdate'ActiveChannel !ChannelPoint
                                | ChannelEventUpdate'InactiveChannel !ChannelPoint
                                    deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField ChannelEventUpdate "type'"
           (ChannelEventUpdate'UpdateType)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEventUpdate'type'
               (\ x__ y__ -> x__{_ChannelEventUpdate'type' = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEventUpdate
           "maybe'channel"
           (Prelude.Maybe ChannelEventUpdate'Channel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEventUpdate'channel
               (\ x__ y__ -> x__{_ChannelEventUpdate'channel = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelEventUpdate
           "maybe'openChannel"
           (Prelude.Maybe Channel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEventUpdate'channel
               (\ x__ y__ -> x__{_ChannelEventUpdate'channel = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just
                         (ChannelEventUpdate'OpenChannel x__val) -> Prelude.Just x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap ChannelEventUpdate'OpenChannel y__)
instance Data.ProtoLens.Field.HasField ChannelEventUpdate
           "openChannel"
           (Channel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEventUpdate'channel
               (\ x__ y__ -> x__{_ChannelEventUpdate'channel = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just
                          (ChannelEventUpdate'OpenChannel x__val) -> Prelude.Just x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap ChannelEventUpdate'OpenChannel y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChannelEventUpdate
           "maybe'closedChannel"
           (Prelude.Maybe ChannelCloseSummary)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEventUpdate'channel
               (\ x__ y__ -> x__{_ChannelEventUpdate'channel = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just
                         (ChannelEventUpdate'ClosedChannel x__val) -> Prelude.Just x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap ChannelEventUpdate'ClosedChannel y__)
instance Data.ProtoLens.Field.HasField ChannelEventUpdate
           "closedChannel"
           (ChannelCloseSummary)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEventUpdate'channel
               (\ x__ y__ -> x__{_ChannelEventUpdate'channel = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just
                          (ChannelEventUpdate'ClosedChannel x__val) -> Prelude.Just x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap ChannelEventUpdate'ClosedChannel y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChannelEventUpdate
           "maybe'activeChannel"
           (Prelude.Maybe ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEventUpdate'channel
               (\ x__ y__ -> x__{_ChannelEventUpdate'channel = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just
                         (ChannelEventUpdate'ActiveChannel x__val) -> Prelude.Just x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap ChannelEventUpdate'ActiveChannel y__)
instance Data.ProtoLens.Field.HasField ChannelEventUpdate
           "activeChannel"
           (ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEventUpdate'channel
               (\ x__ y__ -> x__{_ChannelEventUpdate'channel = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just
                          (ChannelEventUpdate'ActiveChannel x__val) -> Prelude.Just x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap ChannelEventUpdate'ActiveChannel y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChannelEventUpdate
           "maybe'inactiveChannel"
           (Prelude.Maybe ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEventUpdate'channel
               (\ x__ y__ -> x__{_ChannelEventUpdate'channel = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just
                         (ChannelEventUpdate'InactiveChannel x__val) -> Prelude.Just x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap ChannelEventUpdate'InactiveChannel y__)
instance Data.ProtoLens.Field.HasField ChannelEventUpdate
           "inactiveChannel"
           (ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelEventUpdate'channel
               (\ x__ y__ -> x__{_ChannelEventUpdate'channel = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just
                          (ChannelEventUpdate'InactiveChannel x__val) -> Prelude.Just x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap ChannelEventUpdate'InactiveChannel y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Message ChannelEventUpdate where
        messageName _ = Data.Text.pack "lnrpc.ChannelEventUpdate"
        fieldsByTag
          = let type'__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "type"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelEventUpdate'UpdateType)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"type'"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEventUpdate
                openChannel__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "open_channel"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Channel)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'openChannel"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEventUpdate
                closedChannel__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "closed_channel"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelCloseSummary)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'closedChannel"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEventUpdate
                activeChannel__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "active_channel"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'activeChannel"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEventUpdate
                inactiveChannel__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "inactive_channel"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'inactiveChannel"))
                      :: Data.ProtoLens.FieldDescriptor ChannelEventUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 5, type'__field_descriptor),
                 (Data.ProtoLens.Tag 1, openChannel__field_descriptor),
                 (Data.ProtoLens.Tag 2, closedChannel__field_descriptor),
                 (Data.ProtoLens.Tag 3, activeChannel__field_descriptor),
                 (Data.ProtoLens.Tag 4, inactiveChannel__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelEventUpdate'_unknownFields
              (\ x__ y__ -> x__{_ChannelEventUpdate'_unknownFields = y__})
        defMessage
          = ChannelEventUpdate{_ChannelEventUpdate'type' =
                                 Data.ProtoLens.fieldDefault,
                               _ChannelEventUpdate'channel = Prelude.Nothing,
                               _ChannelEventUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelEventUpdate ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelEventUpdate
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                40 -> do y <- (Prelude.fmap Prelude.toEnum
                                                 (Prelude.fmap Prelude.fromIntegral
                                                    Data.ProtoLens.Encoding.Bytes.getVarInt))
                                                Data.ProtoLens.Encoding.Bytes.<?> "type"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y
                                              x)
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "open_channel"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"openChannel")
                                              y
                                              x)
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "closed_channel"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"closedChannel")
                                              y
                                              x)
                                26 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "active_channel"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"activeChannel")
                                              y
                                              x)
                                34 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "inactive_channel"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"inactiveChannel")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelEventUpdate"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                      (((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                          Prelude.fromIntegral)
                         Prelude.. Prelude.fromEnum)
                        _v)
                 Data.Monoid.<>
                 (case
                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'channel") _x
                    of
                      (Prelude.Nothing) -> Data.Monoid.mempty
                      Prelude.Just
                        (ChannelEventUpdate'OpenChannel
                           v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                                   (((\ bs ->
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                          Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Prelude.. Data.ProtoLens.encodeMessage)
                                     v
                      Prelude.Just
                        (ChannelEventUpdate'ClosedChannel
                           v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                                   (((\ bs ->
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                          Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Prelude.. Data.ProtoLens.encodeMessage)
                                     v
                      Prelude.Just
                        (ChannelEventUpdate'ActiveChannel
                           v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                                   (((\ bs ->
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                          Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Prelude.. Data.ProtoLens.encodeMessage)
                                     v
                      Prelude.Just
                        (ChannelEventUpdate'InactiveChannel
                           v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                                   (((\ bs ->
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                          Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Prelude.. Data.ProtoLens.encodeMessage)
                                     v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelEventUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelEventUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelEventUpdate'type' x__)
                    (Control.DeepSeq.deepseq (_ChannelEventUpdate'channel x__) (()))))
instance Control.DeepSeq.NFData ChannelEventUpdate'Channel where
        rnf (ChannelEventUpdate'OpenChannel x__) = Control.DeepSeq.rnf x__
        rnf (ChannelEventUpdate'ClosedChannel x__)
          = Control.DeepSeq.rnf x__
        rnf (ChannelEventUpdate'ActiveChannel x__)
          = Control.DeepSeq.rnf x__
        rnf (ChannelEventUpdate'InactiveChannel x__)
          = Control.DeepSeq.rnf x__
_ChannelEventUpdate'OpenChannel ::
                                Data.ProtoLens.Prism.Prism' ChannelEventUpdate'Channel Channel
_ChannelEventUpdate'OpenChannel
  = Data.ProtoLens.Prism.prism' ChannelEventUpdate'OpenChannel
      (\ p__ ->
         case p__ of
             ChannelEventUpdate'OpenChannel p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
_ChannelEventUpdate'ClosedChannel ::
                                  Data.ProtoLens.Prism.Prism' ChannelEventUpdate'Channel
                                    ChannelCloseSummary
_ChannelEventUpdate'ClosedChannel
  = Data.ProtoLens.Prism.prism' ChannelEventUpdate'ClosedChannel
      (\ p__ ->
         case p__ of
             ChannelEventUpdate'ClosedChannel p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
_ChannelEventUpdate'ActiveChannel ::
                                  Data.ProtoLens.Prism.Prism' ChannelEventUpdate'Channel
                                    ChannelPoint
_ChannelEventUpdate'ActiveChannel
  = Data.ProtoLens.Prism.prism' ChannelEventUpdate'ActiveChannel
      (\ p__ ->
         case p__ of
             ChannelEventUpdate'ActiveChannel p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
_ChannelEventUpdate'InactiveChannel ::
                                    Data.ProtoLens.Prism.Prism' ChannelEventUpdate'Channel
                                      ChannelPoint
_ChannelEventUpdate'InactiveChannel
  = Data.ProtoLens.Prism.prism' ChannelEventUpdate'InactiveChannel
      (\ p__ ->
         case p__ of
             ChannelEventUpdate'InactiveChannel p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
newtype ChannelEventUpdate'UpdateType'UnrecognizedValue = ChannelEventUpdate'UpdateType'UnrecognizedValue Data.Int.Int32
                                                            deriving (Prelude.Eq, Prelude.Ord,
                                                                      Prelude.Show)
data ChannelEventUpdate'UpdateType = ChannelEventUpdate'OPEN_CHANNEL
                                   | ChannelEventUpdate'CLOSED_CHANNEL
                                   | ChannelEventUpdate'ACTIVE_CHANNEL
                                   | ChannelEventUpdate'INACTIVE_CHANNEL
                                   | ChannelEventUpdate'UpdateType'Unrecognized !ChannelEventUpdate'UpdateType'UnrecognizedValue
                                       deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ChannelEventUpdate'UpdateType
         where
        maybeToEnum 0 = Prelude.Just ChannelEventUpdate'OPEN_CHANNEL
        maybeToEnum 1 = Prelude.Just ChannelEventUpdate'CLOSED_CHANNEL
        maybeToEnum 2 = Prelude.Just ChannelEventUpdate'ACTIVE_CHANNEL
        maybeToEnum 3 = Prelude.Just ChannelEventUpdate'INACTIVE_CHANNEL
        maybeToEnum k
          = Prelude.Just
              (ChannelEventUpdate'UpdateType'Unrecognized
                 (ChannelEventUpdate'UpdateType'UnrecognizedValue
                    (Prelude.fromIntegral k)))
        showEnum ChannelEventUpdate'OPEN_CHANNEL = "OPEN_CHANNEL"
        showEnum ChannelEventUpdate'CLOSED_CHANNEL = "CLOSED_CHANNEL"
        showEnum ChannelEventUpdate'ACTIVE_CHANNEL = "ACTIVE_CHANNEL"
        showEnum ChannelEventUpdate'INACTIVE_CHANNEL = "INACTIVE_CHANNEL"
        showEnum
          (ChannelEventUpdate'UpdateType'Unrecognized
             (ChannelEventUpdate'UpdateType'UnrecognizedValue k))
          = Prelude.show k
        readEnum k
          | (k) Prelude.== "OPEN_CHANNEL" =
            Prelude.Just ChannelEventUpdate'OPEN_CHANNEL
          | (k) Prelude.== "CLOSED_CHANNEL" =
            Prelude.Just ChannelEventUpdate'CLOSED_CHANNEL
          | (k) Prelude.== "ACTIVE_CHANNEL" =
            Prelude.Just ChannelEventUpdate'ACTIVE_CHANNEL
          | (k) Prelude.== "INACTIVE_CHANNEL" =
            Prelude.Just ChannelEventUpdate'INACTIVE_CHANNEL
        readEnum k
          = (Text.Read.readMaybe k) Prelude.>>= Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ChannelEventUpdate'UpdateType where
        minBound = ChannelEventUpdate'OPEN_CHANNEL
        maxBound = ChannelEventUpdate'INACTIVE_CHANNEL
instance Prelude.Enum ChannelEventUpdate'UpdateType where
        toEnum k__
          = Prelude.maybe
              (Prelude.error
                 (("toEnum: unknown value for enum UpdateType: ") Prelude.++
                    Prelude.show k__))
              Prelude.id
              (Data.ProtoLens.maybeToEnum k__)
        fromEnum ChannelEventUpdate'OPEN_CHANNEL = 0
        fromEnum ChannelEventUpdate'CLOSED_CHANNEL = 1
        fromEnum ChannelEventUpdate'ACTIVE_CHANNEL = 2
        fromEnum ChannelEventUpdate'INACTIVE_CHANNEL = 3
        fromEnum
          (ChannelEventUpdate'UpdateType'Unrecognized
             (ChannelEventUpdate'UpdateType'UnrecognizedValue k))
          = Prelude.fromIntegral k
        succ ChannelEventUpdate'INACTIVE_CHANNEL
          = Prelude.error
              "ChannelEventUpdate'UpdateType.succ: bad argument ChannelEventUpdate'INACTIVE_CHANNEL. This value would be out of bounds."
        succ ChannelEventUpdate'OPEN_CHANNEL
          = ChannelEventUpdate'CLOSED_CHANNEL
        succ ChannelEventUpdate'CLOSED_CHANNEL
          = ChannelEventUpdate'ACTIVE_CHANNEL
        succ ChannelEventUpdate'ACTIVE_CHANNEL
          = ChannelEventUpdate'INACTIVE_CHANNEL
        succ (ChannelEventUpdate'UpdateType'Unrecognized _)
          = Prelude.error
              "ChannelEventUpdate'UpdateType.succ: bad argument: unrecognized value"
        pred ChannelEventUpdate'OPEN_CHANNEL
          = Prelude.error
              "ChannelEventUpdate'UpdateType.pred: bad argument ChannelEventUpdate'OPEN_CHANNEL. This value would be out of bounds."
        pred ChannelEventUpdate'CLOSED_CHANNEL
          = ChannelEventUpdate'OPEN_CHANNEL
        pred ChannelEventUpdate'ACTIVE_CHANNEL
          = ChannelEventUpdate'CLOSED_CHANNEL
        pred ChannelEventUpdate'INACTIVE_CHANNEL
          = ChannelEventUpdate'ACTIVE_CHANNEL
        pred (ChannelEventUpdate'UpdateType'Unrecognized _)
          = Prelude.error
              "ChannelEventUpdate'UpdateType.pred: bad argument: unrecognized value"
        enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
        enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
        enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
        enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ChannelEventUpdate'UpdateType
         where
        fieldDefault = ChannelEventUpdate'OPEN_CHANNEL
instance Control.DeepSeq.NFData ChannelEventUpdate'UpdateType where
        rnf x__ = Prelude.seq x__ (())
{- | Fields :

    * 'Proto.Rpc_Fields.chanPoint' @:: Lens' ChannelFeeReport Data.Text.Text@
    * 'Proto.Rpc_Fields.baseFeeMsat' @:: Lens' ChannelFeeReport Data.Int.Int64@
    * 'Proto.Rpc_Fields.feePerMil' @:: Lens' ChannelFeeReport Data.Int.Int64@
    * 'Proto.Rpc_Fields.feeRate' @:: Lens' ChannelFeeReport Prelude.Double@
 -}
data ChannelFeeReport = ChannelFeeReport{_ChannelFeeReport'chanPoint
                                         :: !Data.Text.Text,
                                         _ChannelFeeReport'baseFeeMsat :: !Data.Int.Int64,
                                         _ChannelFeeReport'feePerMil :: !Data.Int.Int64,
                                         _ChannelFeeReport'feeRate :: !Prelude.Double,
                                         _ChannelFeeReport'_unknownFields ::
                                         !Data.ProtoLens.FieldSet}
                          deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelFeeReport where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelFeeReport "chanPoint"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelFeeReport'chanPoint
               (\ x__ y__ -> x__{_ChannelFeeReport'chanPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelFeeReport
           "baseFeeMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelFeeReport'baseFeeMsat
               (\ x__ y__ -> x__{_ChannelFeeReport'baseFeeMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelFeeReport "feePerMil"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelFeeReport'feePerMil
               (\ x__ y__ -> x__{_ChannelFeeReport'feePerMil = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelFeeReport "feeRate"
           (Prelude.Double)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelFeeReport'feeRate
               (\ x__ y__ -> x__{_ChannelFeeReport'feeRate = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelFeeReport where
        messageName _ = Data.Text.pack "lnrpc.ChannelFeeReport"
        fieldsByTag
          = let chanPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_point"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanPoint"))
                      :: Data.ProtoLens.FieldDescriptor ChannelFeeReport
                baseFeeMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "base_fee_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"baseFeeMsat"))
                      :: Data.ProtoLens.FieldDescriptor ChannelFeeReport
                feePerMil__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_per_mil"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feePerMil"))
                      :: Data.ProtoLens.FieldDescriptor ChannelFeeReport
                feeRate__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_rate"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.DoubleField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Double)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feeRate"))
                      :: Data.ProtoLens.FieldDescriptor ChannelFeeReport
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanPoint__field_descriptor),
                 (Data.ProtoLens.Tag 2, baseFeeMsat__field_descriptor),
                 (Data.ProtoLens.Tag 3, feePerMil__field_descriptor),
                 (Data.ProtoLens.Tag 4, feeRate__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelFeeReport'_unknownFields
              (\ x__ y__ -> x__{_ChannelFeeReport'_unknownFields = y__})
        defMessage
          = ChannelFeeReport{_ChannelFeeReport'chanPoint =
                               Data.ProtoLens.fieldDefault,
                             _ChannelFeeReport'baseFeeMsat = Data.ProtoLens.fieldDefault,
                             _ChannelFeeReport'feePerMil = Data.ProtoLens.fieldDefault,
                             _ChannelFeeReport'feeRate = Data.ProtoLens.fieldDefault,
                             _ChannelFeeReport'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelFeeReport ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelFeeReport
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanPoint")
                                              y
                                              x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "base_fee_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"baseFeeMsat")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_per_mil"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"feePerMil")
                                              y
                                              x)
                                33 -> do y <- (Prelude.fmap
                                                 Data.ProtoLens.Encoding.Bytes.wordToDouble
                                                 Data.ProtoLens.Encoding.Bytes.getFixed64)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_rate"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"feeRate")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelFeeReport"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"chanPoint") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"baseFeeMsat") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"feePerMil") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"feeRate") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 33) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putFixed64) Prelude..
                               Data.ProtoLens.Encoding.Bytes.doubleToWord)
                              _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelFeeReport where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelFeeReport'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelFeeReport'chanPoint x__)
                    (Control.DeepSeq.deepseq (_ChannelFeeReport'baseFeeMsat x__)
                       (Control.DeepSeq.deepseq (_ChannelFeeReport'feePerMil x__)
                          (Control.DeepSeq.deepseq (_ChannelFeeReport'feeRate x__) (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.nodes' @:: Lens' ChannelGraph [LightningNode]@
    * 'Proto.Rpc_Fields.vec'nodes' @:: Lens' ChannelGraph (Data.Vector.Vector LightningNode)@
    * 'Proto.Rpc_Fields.edges' @:: Lens' ChannelGraph [ChannelEdge]@
    * 'Proto.Rpc_Fields.vec'edges' @:: Lens' ChannelGraph (Data.Vector.Vector ChannelEdge)@
 -}
data ChannelGraph = ChannelGraph{_ChannelGraph'nodes ::
                                 !(Data.Vector.Vector LightningNode),
                                 _ChannelGraph'edges :: !(Data.Vector.Vector ChannelEdge),
                                 _ChannelGraph'_unknownFields :: !Data.ProtoLens.FieldSet}
                      deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelGraph where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelGraph "nodes"
           ([LightningNode])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelGraph'nodes
               (\ x__ y__ -> x__{_ChannelGraph'nodes = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField ChannelGraph "vec'nodes"
           (Data.Vector.Vector LightningNode)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelGraph'nodes
               (\ x__ y__ -> x__{_ChannelGraph'nodes = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelGraph "edges"
           ([ChannelEdge])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelGraph'edges
               (\ x__ y__ -> x__{_ChannelGraph'edges = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField ChannelGraph "vec'edges"
           (Data.Vector.Vector ChannelEdge)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelGraph'edges
               (\ x__ y__ -> x__{_ChannelGraph'edges = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelGraph where
        messageName _ = Data.Text.pack "lnrpc.ChannelGraph"
        fieldsByTag
          = let nodes__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "nodes"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor LightningNode)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"nodes"))
                      :: Data.ProtoLens.FieldDescriptor ChannelGraph
                edges__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "edges"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelEdge)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"edges"))
                      :: Data.ProtoLens.FieldDescriptor ChannelGraph
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, nodes__field_descriptor),
                 (Data.ProtoLens.Tag 2, edges__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelGraph'_unknownFields
              (\ x__ y__ -> x__{_ChannelGraph'_unknownFields = y__})
        defMessage
          = ChannelGraph{_ChannelGraph'nodes = Data.Vector.Generic.empty,
                         _ChannelGraph'edges = Data.Vector.Generic.empty,
                         _ChannelGraph'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelGraph ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         ChannelEdge
                         ->
                         Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                           Data.ProtoLens.Encoding.Growing.RealWorld
                           LightningNode
                           -> Data.ProtoLens.Encoding.Bytes.Parser ChannelGraph
                loop x mutable'edges mutable'nodes
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'edges <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'edges)
                            frozen'nodes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'nodes)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'edges")
                                    frozen'edges
                                    (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'nodes")
                                       frozen'nodes
                                       x)))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "nodes"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'nodes
                                                   y)
                                         loop x mutable'edges v
                                18 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "edges"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'edges
                                                   y)
                                         loop x v mutable'nodes
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'edges
                                             mutable'nodes
              in
              (do mutable'edges <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     Data.ProtoLens.Encoding.Growing.new
                  mutable'nodes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'edges mutable'nodes)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelGraph"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'nodes") _x))
                 Data.Monoid.<>
                 (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                    (\ _v ->
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                         (((\ bs ->
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                            Prelude.. Data.ProtoLens.encodeMessage)
                           _v)
                    (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'edges") _x))
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelGraph where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelGraph'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelGraph'nodes x__)
                    (Control.DeepSeq.deepseq (_ChannelGraph'edges x__) (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.includeUnannounced' @:: Lens' ChannelGraphRequest Prelude.Bool@
 -}
data ChannelGraphRequest = ChannelGraphRequest{_ChannelGraphRequest'includeUnannounced
                                               :: !Prelude.Bool,
                                               _ChannelGraphRequest'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelGraphRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelGraphRequest
           "includeUnannounced"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ChannelGraphRequest'includeUnannounced
               (\ x__ y__ -> x__{_ChannelGraphRequest'includeUnannounced = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelGraphRequest where
        messageName _ = Data.Text.pack "lnrpc.ChannelGraphRequest"
        fieldsByTag
          = let includeUnannounced__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "include_unannounced"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"includeUnannounced"))
                      :: Data.ProtoLens.FieldDescriptor ChannelGraphRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, includeUnannounced__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelGraphRequest'_unknownFields
              (\ x__ y__ -> x__{_ChannelGraphRequest'_unknownFields = y__})
        defMessage
          = ChannelGraphRequest{_ChannelGraphRequest'includeUnannounced =
                                  Data.ProtoLens.fieldDefault,
                                _ChannelGraphRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelGraphRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelGraphRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?>
                                               "include_unannounced"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"includeUnannounced")
                                             y
                                             x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelGraphRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view
                          (Data.ProtoLens.Field.field @"includeUnannounced")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         (\ b -> if b then 1 else 0))
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelGraphRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelGraphRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_ChannelGraphRequest'includeUnannounced x__)
                    (())))
{- | Fields :

    * 'Proto.Rpc_Fields.channelPoint' @:: Lens' ChannelOpenUpdate ChannelPoint@
    * 'Proto.Rpc_Fields.maybe'channelPoint' @:: Lens' ChannelOpenUpdate (Prelude.Maybe ChannelPoint)@
 -}
data ChannelOpenUpdate = ChannelOpenUpdate{_ChannelOpenUpdate'channelPoint
                                           :: !(Prelude.Maybe ChannelPoint),
                                           _ChannelOpenUpdate'_unknownFields ::
                                           !Data.ProtoLens.FieldSet}
                           deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelOpenUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ChannelOpenUpdate
           "channelPoint"
           (ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelOpenUpdate'channelPoint
               (\ x__ y__ -> x__{_ChannelOpenUpdate'channelPoint = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ChannelOpenUpdate
           "maybe'channelPoint"
           (Prelude.Maybe ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelOpenUpdate'channelPoint
               (\ x__ y__ -> x__{_ChannelOpenUpdate'channelPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ChannelOpenUpdate where
        messageName _ = Data.Text.pack "lnrpc.ChannelOpenUpdate"
        fieldsByTag
          = let channelPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_point"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'channelPoint"))
                      :: Data.ProtoLens.FieldDescriptor ChannelOpenUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channelPoint__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelOpenUpdate'_unknownFields
              (\ x__ y__ -> x__{_ChannelOpenUpdate'_unknownFields = y__})
        defMessage
          = ChannelOpenUpdate{_ChannelOpenUpdate'channelPoint =
                                Prelude.Nothing,
                              _ChannelOpenUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelOpenUpdate ->
                       Data.ProtoLens.Encoding.Bytes.Parser ChannelOpenUpdate
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"channelPoint")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelOpenUpdate"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'channelPoint")
                    _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelOpenUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelOpenUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelOpenUpdate'channelPoint x__)
                    (())))
{- | Fields :

    * 'Proto.Rpc_Fields.outputIndex' @:: Lens' ChannelPoint Data.Word.Word32@
    * 'Proto.Rpc_Fields.maybe'fundingTxid' @:: Lens' ChannelPoint (Prelude.Maybe ChannelPoint'FundingTxid)@
    * 'Proto.Rpc_Fields.maybe'fundingTxidBytes' @:: Lens' ChannelPoint (Prelude.Maybe Data.ByteString.ByteString)@
    * 'Proto.Rpc_Fields.fundingTxidBytes' @:: Lens' ChannelPoint Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.maybe'fundingTxidStr' @:: Lens' ChannelPoint (Prelude.Maybe Data.Text.Text)@
    * 'Proto.Rpc_Fields.fundingTxidStr' @:: Lens' ChannelPoint Data.Text.Text@
 -}
data ChannelPoint = ChannelPoint{_ChannelPoint'outputIndex ::
                                 !Data.Word.Word32,
                                 _ChannelPoint'fundingTxid ::
                                 !(Prelude.Maybe ChannelPoint'FundingTxid),
                                 _ChannelPoint'_unknownFields :: !Data.ProtoLens.FieldSet}
                      deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ChannelPoint where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
data ChannelPoint'FundingTxid = ChannelPoint'FundingTxidBytes !Data.ByteString.ByteString
                              | ChannelPoint'FundingTxidStr !Data.Text.Text
                                  deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField ChannelPoint "outputIndex"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelPoint'outputIndex
               (\ x__ y__ -> x__{_ChannelPoint'outputIndex = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelPoint
           "maybe'fundingTxid"
           (Prelude.Maybe ChannelPoint'FundingTxid)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelPoint'fundingTxid
               (\ x__ y__ -> x__{_ChannelPoint'fundingTxid = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ChannelPoint
           "maybe'fundingTxidBytes"
           (Prelude.Maybe Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelPoint'fundingTxid
               (\ x__ y__ -> x__{_ChannelPoint'fundingTxid = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just (ChannelPoint'FundingTxidBytes x__val) -> Prelude.Just
                                                                                x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap ChannelPoint'FundingTxidBytes y__)
instance Data.ProtoLens.Field.HasField ChannelPoint
           "fundingTxidBytes"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelPoint'fundingTxid
               (\ x__ y__ -> x__{_ChannelPoint'fundingTxid = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just (ChannelPoint'FundingTxidBytes x__val) -> Prelude.Just
                                                                                 x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap ChannelPoint'FundingTxidBytes y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault
instance Data.ProtoLens.Field.HasField ChannelPoint
           "maybe'fundingTxidStr"
           (Prelude.Maybe Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelPoint'fundingTxid
               (\ x__ y__ -> x__{_ChannelPoint'fundingTxid = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just (ChannelPoint'FundingTxidStr x__val) -> Prelude.Just
                                                                              x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap ChannelPoint'FundingTxidStr y__)
instance Data.ProtoLens.Field.HasField ChannelPoint
           "fundingTxidStr"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ChannelPoint'fundingTxid
               (\ x__ y__ -> x__{_ChannelPoint'fundingTxid = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just (ChannelPoint'FundingTxidStr x__val) -> Prelude.Just
                                                                               x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap ChannelPoint'FundingTxidStr y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault
instance Data.ProtoLens.Message ChannelPoint where
        messageName _ = Data.Text.pack "lnrpc.ChannelPoint"
        fieldsByTag
          = let outputIndex__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "output_index"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"outputIndex"))
                      :: Data.ProtoLens.FieldDescriptor ChannelPoint
                fundingTxidBytes__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "funding_txid_bytes"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'fundingTxidBytes"))
                      :: Data.ProtoLens.FieldDescriptor ChannelPoint
                fundingTxidStr__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "funding_txid_str"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'fundingTxidStr"))
                      :: Data.ProtoLens.FieldDescriptor ChannelPoint
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 3, outputIndex__field_descriptor),
                 (Data.ProtoLens.Tag 1, fundingTxidBytes__field_descriptor),
                 (Data.ProtoLens.Tag 2, fundingTxidStr__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ChannelPoint'_unknownFields
              (\ x__ y__ -> x__{_ChannelPoint'_unknownFields = y__})
        defMessage
          = ChannelPoint{_ChannelPoint'outputIndex =
                           Data.ProtoLens.fieldDefault,
                         _ChannelPoint'fundingTxid = Prelude.Nothing,
                         _ChannelPoint'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ChannelPoint -> Data.ProtoLens.Encoding.Bytes.Parser ChannelPoint
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "output_index"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"outputIndex")
                                              y
                                              x)
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "funding_txid_bytes"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"fundingTxidBytes")
                                              y
                                              x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "funding_txid_str"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"fundingTxidStr")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ChannelPoint"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"outputIndex") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (case
                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'fundingTxid")
                      _x
                    of
                      (Prelude.Nothing) -> Data.Monoid.mempty
                      Prelude.Just
                        (ChannelPoint'FundingTxidBytes
                           v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                                   (\ bs ->
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                                     v
                      Prelude.Just
                        (ChannelPoint'FundingTxidStr
                           v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                                   (((\ bs ->
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                          Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Prelude.. Data.Text.Encoding.encodeUtf8)
                                     v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ChannelPoint where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ChannelPoint'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ChannelPoint'outputIndex x__)
                    (Control.DeepSeq.deepseq (_ChannelPoint'fundingTxid x__) (()))))
instance Control.DeepSeq.NFData ChannelPoint'FundingTxid where
        rnf (ChannelPoint'FundingTxidBytes x__) = Control.DeepSeq.rnf x__
        rnf (ChannelPoint'FundingTxidStr x__) = Control.DeepSeq.rnf x__
_ChannelPoint'FundingTxidBytes ::
                               Data.ProtoLens.Prism.Prism' ChannelPoint'FundingTxid
                                 Data.ByteString.ByteString
_ChannelPoint'FundingTxidBytes
  = Data.ProtoLens.Prism.prism' ChannelPoint'FundingTxidBytes
      (\ p__ ->
         case p__ of
             ChannelPoint'FundingTxidBytes p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
_ChannelPoint'FundingTxidStr ::
                             Data.ProtoLens.Prism.Prism' ChannelPoint'FundingTxid Data.Text.Text
_ChannelPoint'FundingTxidStr
  = Data.ProtoLens.Prism.prism' ChannelPoint'FundingTxidStr
      (\ p__ ->
         case p__ of
             ChannelPoint'FundingTxidStr p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
{- | Fields :

    * 'Proto.Rpc_Fields.channelPoint' @:: Lens' CloseChannelRequest ChannelPoint@
    * 'Proto.Rpc_Fields.maybe'channelPoint' @:: Lens' CloseChannelRequest (Prelude.Maybe ChannelPoint)@
    * 'Proto.Rpc_Fields.force' @:: Lens' CloseChannelRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.targetConf' @:: Lens' CloseChannelRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.satPerByte' @:: Lens' CloseChannelRequest Data.Int.Int64@
 -}
data CloseChannelRequest = CloseChannelRequest{_CloseChannelRequest'channelPoint
                                               :: !(Prelude.Maybe ChannelPoint),
                                               _CloseChannelRequest'force :: !Prelude.Bool,
                                               _CloseChannelRequest'targetConf :: !Data.Int.Int32,
                                               _CloseChannelRequest'satPerByte :: !Data.Int.Int64,
                                               _CloseChannelRequest'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CloseChannelRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CloseChannelRequest
           "channelPoint"
           (ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _CloseChannelRequest'channelPoint
               (\ x__ y__ -> x__{_CloseChannelRequest'channelPoint = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField CloseChannelRequest
           "maybe'channelPoint"
           (Prelude.Maybe ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _CloseChannelRequest'channelPoint
               (\ x__ y__ -> x__{_CloseChannelRequest'channelPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField CloseChannelRequest "force"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _CloseChannelRequest'force
               (\ x__ y__ -> x__{_CloseChannelRequest'force = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField CloseChannelRequest
           "targetConf"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _CloseChannelRequest'targetConf
               (\ x__ y__ -> x__{_CloseChannelRequest'targetConf = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField CloseChannelRequest
           "satPerByte"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _CloseChannelRequest'satPerByte
               (\ x__ y__ -> x__{_CloseChannelRequest'satPerByte = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message CloseChannelRequest where
        messageName _ = Data.Text.pack "lnrpc.CloseChannelRequest"
        fieldsByTag
          = let channelPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_point"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'channelPoint"))
                      :: Data.ProtoLens.FieldDescriptor CloseChannelRequest
                force__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "force"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"force"))
                      :: Data.ProtoLens.FieldDescriptor CloseChannelRequest
                targetConf__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "target_conf"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"targetConf"))
                      :: Data.ProtoLens.FieldDescriptor CloseChannelRequest
                satPerByte__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "sat_per_byte"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"satPerByte"))
                      :: Data.ProtoLens.FieldDescriptor CloseChannelRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channelPoint__field_descriptor),
                 (Data.ProtoLens.Tag 2, force__field_descriptor),
                 (Data.ProtoLens.Tag 3, targetConf__field_descriptor),
                 (Data.ProtoLens.Tag 4, satPerByte__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _CloseChannelRequest'_unknownFields
              (\ x__ y__ -> x__{_CloseChannelRequest'_unknownFields = y__})
        defMessage
          = CloseChannelRequest{_CloseChannelRequest'channelPoint =
                                  Prelude.Nothing,
                                _CloseChannelRequest'force = Data.ProtoLens.fieldDefault,
                                _CloseChannelRequest'targetConf = Data.ProtoLens.fieldDefault,
                                _CloseChannelRequest'satPerByte = Data.ProtoLens.fieldDefault,
                                _CloseChannelRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     CloseChannelRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser CloseChannelRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"channelPoint")
                                              y
                                              x)
                                16 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "force"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"force") y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "target_conf"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"targetConf")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "sat_per_byte"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"satPerByte")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "CloseChannelRequest"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'channelPoint")
                    _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"force") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           (\ b -> if b then 1 else 0))
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"targetConf") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"satPerByte") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData CloseChannelRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_CloseChannelRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_CloseChannelRequest'channelPoint x__)
                    (Control.DeepSeq.deepseq (_CloseChannelRequest'force x__)
                       (Control.DeepSeq.deepseq (_CloseChannelRequest'targetConf x__)
                          (Control.DeepSeq.deepseq (_CloseChannelRequest'satPerByte x__)
                             (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.maybe'update' @:: Lens' CloseStatusUpdate (Prelude.Maybe CloseStatusUpdate'Update)@
    * 'Proto.Rpc_Fields.maybe'closePending' @:: Lens' CloseStatusUpdate (Prelude.Maybe PendingUpdate)@
    * 'Proto.Rpc_Fields.closePending' @:: Lens' CloseStatusUpdate PendingUpdate@
    * 'Proto.Rpc_Fields.maybe'chanClose' @:: Lens' CloseStatusUpdate (Prelude.Maybe ChannelCloseUpdate)@
    * 'Proto.Rpc_Fields.chanClose' @:: Lens' CloseStatusUpdate ChannelCloseUpdate@
 -}
data CloseStatusUpdate = CloseStatusUpdate{_CloseStatusUpdate'update
                                           :: !(Prelude.Maybe CloseStatusUpdate'Update),
                                           _CloseStatusUpdate'_unknownFields ::
                                           !Data.ProtoLens.FieldSet}
                           deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CloseStatusUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
data CloseStatusUpdate'Update = CloseStatusUpdate'ClosePending !PendingUpdate
                              | CloseStatusUpdate'ChanClose !ChannelCloseUpdate
                                  deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField CloseStatusUpdate
           "maybe'update"
           (Prelude.Maybe CloseStatusUpdate'Update)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _CloseStatusUpdate'update
               (\ x__ y__ -> x__{_CloseStatusUpdate'update = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField CloseStatusUpdate
           "maybe'closePending"
           (Prelude.Maybe PendingUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _CloseStatusUpdate'update
               (\ x__ y__ -> x__{_CloseStatusUpdate'update = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just
                         (CloseStatusUpdate'ClosePending x__val) -> Prelude.Just x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap CloseStatusUpdate'ClosePending y__)
instance Data.ProtoLens.Field.HasField CloseStatusUpdate
           "closePending"
           (PendingUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _CloseStatusUpdate'update
               (\ x__ y__ -> x__{_CloseStatusUpdate'update = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just
                          (CloseStatusUpdate'ClosePending x__val) -> Prelude.Just x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap CloseStatusUpdate'ClosePending y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField CloseStatusUpdate
           "maybe'chanClose"
           (Prelude.Maybe ChannelCloseUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _CloseStatusUpdate'update
               (\ x__ y__ -> x__{_CloseStatusUpdate'update = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just (CloseStatusUpdate'ChanClose x__val) -> Prelude.Just
                                                                              x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap CloseStatusUpdate'ChanClose y__)
instance Data.ProtoLens.Field.HasField CloseStatusUpdate
           "chanClose"
           (ChannelCloseUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _CloseStatusUpdate'update
               (\ x__ y__ -> x__{_CloseStatusUpdate'update = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just (CloseStatusUpdate'ChanClose x__val) -> Prelude.Just
                                                                               x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap CloseStatusUpdate'ChanClose y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Message CloseStatusUpdate where
        messageName _ = Data.Text.pack "lnrpc.CloseStatusUpdate"
        fieldsByTag
          = let closePending__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "close_pending"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor PendingUpdate)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'closePending"))
                      :: Data.ProtoLens.FieldDescriptor CloseStatusUpdate
                chanClose__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_close"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelCloseUpdate)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'chanClose"))
                      :: Data.ProtoLens.FieldDescriptor CloseStatusUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, closePending__field_descriptor),
                 (Data.ProtoLens.Tag 3, chanClose__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _CloseStatusUpdate'_unknownFields
              (\ x__ y__ -> x__{_CloseStatusUpdate'_unknownFields = y__})
        defMessage
          = CloseStatusUpdate{_CloseStatusUpdate'update = Prelude.Nothing,
                              _CloseStatusUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     CloseStatusUpdate ->
                       Data.ProtoLens.Encoding.Bytes.Parser CloseStatusUpdate
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "close_pending"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"closePending")
                                              y
                                              x)
                                26 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_close"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanClose")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "CloseStatusUpdate"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'update") _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just
                      (CloseStatusUpdate'ClosePending
                         v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                                 (((\ bs ->
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Prelude.. Data.ProtoLens.encodeMessage)
                                   v
                    Prelude.Just
                      (CloseStatusUpdate'ChanClose
                         v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                                 (((\ bs ->
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Prelude.. Data.ProtoLens.encodeMessage)
                                   v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData CloseStatusUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_CloseStatusUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_CloseStatusUpdate'update x__) (())))
instance Control.DeepSeq.NFData CloseStatusUpdate'Update where
        rnf (CloseStatusUpdate'ClosePending x__) = Control.DeepSeq.rnf x__
        rnf (CloseStatusUpdate'ChanClose x__) = Control.DeepSeq.rnf x__
_CloseStatusUpdate'ClosePending ::
                                Data.ProtoLens.Prism.Prism' CloseStatusUpdate'Update PendingUpdate
_CloseStatusUpdate'ClosePending
  = Data.ProtoLens.Prism.prism' CloseStatusUpdate'ClosePending
      (\ p__ ->
         case p__ of
             CloseStatusUpdate'ClosePending p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
_CloseStatusUpdate'ChanClose ::
                             Data.ProtoLens.Prism.Prism' CloseStatusUpdate'Update
                               ChannelCloseUpdate
_CloseStatusUpdate'ChanClose
  = Data.ProtoLens.Prism.prism' CloseStatusUpdate'ChanClose
      (\ p__ ->
         case p__ of
             CloseStatusUpdate'ChanClose p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
{- | Fields :

    * 'Proto.Rpc_Fields.chanId' @:: Lens' ClosedChannelUpdate Data.Word.Word64@
    * 'Proto.Rpc_Fields.capacity' @:: Lens' ClosedChannelUpdate Data.Int.Int64@
    * 'Proto.Rpc_Fields.closedHeight' @:: Lens' ClosedChannelUpdate Data.Word.Word32@
    * 'Proto.Rpc_Fields.chanPoint' @:: Lens' ClosedChannelUpdate ChannelPoint@
    * 'Proto.Rpc_Fields.maybe'chanPoint' @:: Lens' ClosedChannelUpdate (Prelude.Maybe ChannelPoint)@
 -}
data ClosedChannelUpdate = ClosedChannelUpdate{_ClosedChannelUpdate'chanId
                                               :: !Data.Word.Word64,
                                               _ClosedChannelUpdate'capacity :: !Data.Int.Int64,
                                               _ClosedChannelUpdate'closedHeight ::
                                               !Data.Word.Word32,
                                               _ClosedChannelUpdate'chanPoint ::
                                               !(Prelude.Maybe ChannelPoint),
                                               _ClosedChannelUpdate'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ClosedChannelUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ClosedChannelUpdate "chanId"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelUpdate'chanId
               (\ x__ y__ -> x__{_ClosedChannelUpdate'chanId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ClosedChannelUpdate
           "capacity"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelUpdate'capacity
               (\ x__ y__ -> x__{_ClosedChannelUpdate'capacity = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ClosedChannelUpdate
           "closedHeight"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelUpdate'closedHeight
               (\ x__ y__ -> x__{_ClosedChannelUpdate'closedHeight = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ClosedChannelUpdate
           "chanPoint"
           (ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelUpdate'chanPoint
               (\ x__ y__ -> x__{_ClosedChannelUpdate'chanPoint = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ClosedChannelUpdate
           "maybe'chanPoint"
           (Prelude.Maybe ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelUpdate'chanPoint
               (\ x__ y__ -> x__{_ClosedChannelUpdate'chanPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ClosedChannelUpdate where
        messageName _ = Data.Text.pack "lnrpc.ClosedChannelUpdate"
        fieldsByTag
          = let chanId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanId"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelUpdate
                capacity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "capacity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"capacity"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelUpdate
                closedHeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "closed_height"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"closedHeight"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelUpdate
                chanPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_point"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'chanPoint"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanId__field_descriptor),
                 (Data.ProtoLens.Tag 2, capacity__field_descriptor),
                 (Data.ProtoLens.Tag 3, closedHeight__field_descriptor),
                 (Data.ProtoLens.Tag 4, chanPoint__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ClosedChannelUpdate'_unknownFields
              (\ x__ y__ -> x__{_ClosedChannelUpdate'_unknownFields = y__})
        defMessage
          = ClosedChannelUpdate{_ClosedChannelUpdate'chanId =
                                  Data.ProtoLens.fieldDefault,
                                _ClosedChannelUpdate'capacity = Data.ProtoLens.fieldDefault,
                                _ClosedChannelUpdate'closedHeight = Data.ProtoLens.fieldDefault,
                                _ClosedChannelUpdate'chanPoint = Prelude.Nothing,
                                _ClosedChannelUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ClosedChannelUpdate ->
                       Data.ProtoLens.Encoding.Bytes.Parser ClosedChannelUpdate
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "chan_id"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"chanId") y
                                             x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "capacity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"capacity")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "closed_height"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"closedHeight")
                                              y
                                              x)
                                34 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanPoint")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ClosedChannelUpdate"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"chanId") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"capacity") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"closedHeight") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'chanPoint")
                          _x
                        of
                          (Prelude.Nothing) -> Data.Monoid.mempty
                          Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                               Data.Monoid.<>
                                               (((\ bs ->
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                      Data.Monoid.<>
                                                      Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                  Prelude.. Data.ProtoLens.encodeMessage)
                                                 _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ClosedChannelUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ClosedChannelUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ClosedChannelUpdate'chanId x__)
                    (Control.DeepSeq.deepseq (_ClosedChannelUpdate'capacity x__)
                       (Control.DeepSeq.deepseq (_ClosedChannelUpdate'closedHeight x__)
                          (Control.DeepSeq.deepseq (_ClosedChannelUpdate'chanPoint x__)
                             (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.cooperative' @:: Lens' ClosedChannelsRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.localForce' @:: Lens' ClosedChannelsRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.remoteForce' @:: Lens' ClosedChannelsRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.breach' @:: Lens' ClosedChannelsRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.fundingCanceled' @:: Lens' ClosedChannelsRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.abandoned' @:: Lens' ClosedChannelsRequest Prelude.Bool@
 -}
data ClosedChannelsRequest = ClosedChannelsRequest{_ClosedChannelsRequest'cooperative
                                                   :: !Prelude.Bool,
                                                   _ClosedChannelsRequest'localForce ::
                                                   !Prelude.Bool,
                                                   _ClosedChannelsRequest'remoteForce ::
                                                   !Prelude.Bool,
                                                   _ClosedChannelsRequest'breach :: !Prelude.Bool,
                                                   _ClosedChannelsRequest'fundingCanceled ::
                                                   !Prelude.Bool,
                                                   _ClosedChannelsRequest'abandoned ::
                                                   !Prelude.Bool,
                                                   _ClosedChannelsRequest'_unknownFields ::
                                                   !Data.ProtoLens.FieldSet}
                               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ClosedChannelsRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ClosedChannelsRequest
           "cooperative"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelsRequest'cooperative
               (\ x__ y__ -> x__{_ClosedChannelsRequest'cooperative = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ClosedChannelsRequest
           "localForce"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelsRequest'localForce
               (\ x__ y__ -> x__{_ClosedChannelsRequest'localForce = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ClosedChannelsRequest
           "remoteForce"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelsRequest'remoteForce
               (\ x__ y__ -> x__{_ClosedChannelsRequest'remoteForce = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ClosedChannelsRequest
           "breach"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelsRequest'breach
               (\ x__ y__ -> x__{_ClosedChannelsRequest'breach = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ClosedChannelsRequest
           "fundingCanceled"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ClosedChannelsRequest'fundingCanceled
               (\ x__ y__ -> x__{_ClosedChannelsRequest'fundingCanceled = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ClosedChannelsRequest
           "abandoned"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelsRequest'abandoned
               (\ x__ y__ -> x__{_ClosedChannelsRequest'abandoned = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ClosedChannelsRequest where
        messageName _ = Data.Text.pack "lnrpc.ClosedChannelsRequest"
        fieldsByTag
          = let cooperative__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "cooperative"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"cooperative"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelsRequest
                localForce__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "local_force"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"localForce"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelsRequest
                remoteForce__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "remote_force"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"remoteForce"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelsRequest
                breach__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "breach"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"breach"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelsRequest
                fundingCanceled__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "funding_canceled"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"fundingCanceled"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelsRequest
                abandoned__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "abandoned"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"abandoned"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelsRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, cooperative__field_descriptor),
                 (Data.ProtoLens.Tag 2, localForce__field_descriptor),
                 (Data.ProtoLens.Tag 3, remoteForce__field_descriptor),
                 (Data.ProtoLens.Tag 4, breach__field_descriptor),
                 (Data.ProtoLens.Tag 5, fundingCanceled__field_descriptor),
                 (Data.ProtoLens.Tag 6, abandoned__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ClosedChannelsRequest'_unknownFields
              (\ x__ y__ -> x__{_ClosedChannelsRequest'_unknownFields = y__})
        defMessage
          = ClosedChannelsRequest{_ClosedChannelsRequest'cooperative =
                                    Data.ProtoLens.fieldDefault,
                                  _ClosedChannelsRequest'localForce = Data.ProtoLens.fieldDefault,
                                  _ClosedChannelsRequest'remoteForce = Data.ProtoLens.fieldDefault,
                                  _ClosedChannelsRequest'breach = Data.ProtoLens.fieldDefault,
                                  _ClosedChannelsRequest'fundingCanceled =
                                    Data.ProtoLens.fieldDefault,
                                  _ClosedChannelsRequest'abandoned = Data.ProtoLens.fieldDefault,
                                  _ClosedChannelsRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ClosedChannelsRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ClosedChannelsRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "cooperative"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"cooperative")
                                             y
                                             x)
                                16 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "local_force"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"localForce")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "remote_force"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"remoteForce")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "breach"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"breach")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "funding_canceled"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"fundingCanceled")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "abandoned"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"abandoned")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ClosedChannelsRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"cooperative") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         (\ b -> if b then 1 else 0))
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"localForce") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           (\ b -> if b then 1 else 0))
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"remoteForce") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             (\ b -> if b then 1 else 0))
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"breach") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               (\ b -> if b then 1 else 0))
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"fundingCanceled")
                                  _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 (\ b -> if b then 1 else 0))
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"abandoned") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   (\ b -> if b then 1 else 0))
                                  _v)
                           Data.Monoid.<>
                           Data.ProtoLens.Encoding.Wire.buildFieldSet
                             (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ClosedChannelsRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ClosedChannelsRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ClosedChannelsRequest'cooperative x__)
                    (Control.DeepSeq.deepseq (_ClosedChannelsRequest'localForce x__)
                       (Control.DeepSeq.deepseq (_ClosedChannelsRequest'remoteForce x__)
                          (Control.DeepSeq.deepseq (_ClosedChannelsRequest'breach x__)
                             (Control.DeepSeq.deepseq
                                (_ClosedChannelsRequest'fundingCanceled x__)
                                (Control.DeepSeq.deepseq (_ClosedChannelsRequest'abandoned x__)
                                   (()))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.channels' @:: Lens' ClosedChannelsResponse [ChannelCloseSummary]@
    * 'Proto.Rpc_Fields.vec'channels' @:: Lens' ClosedChannelsResponse
  (Data.Vector.Vector ChannelCloseSummary)@
 -}
data ClosedChannelsResponse = ClosedChannelsResponse{_ClosedChannelsResponse'channels
                                                     :: !(Data.Vector.Vector ChannelCloseSummary),
                                                     _ClosedChannelsResponse'_unknownFields ::
                                                     !Data.ProtoLens.FieldSet}
                                deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ClosedChannelsResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ClosedChannelsResponse
           "channels"
           ([ChannelCloseSummary])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelsResponse'channels
               (\ x__ y__ -> x__{_ClosedChannelsResponse'channels = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField ClosedChannelsResponse
           "vec'channels"
           (Data.Vector.Vector ChannelCloseSummary)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ClosedChannelsResponse'channels
               (\ x__ y__ -> x__{_ClosedChannelsResponse'channels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ClosedChannelsResponse where
        messageName _ = Data.Text.pack "lnrpc.ClosedChannelsResponse"
        fieldsByTag
          = let channels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channels"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelCloseSummary)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"channels"))
                      :: Data.ProtoLens.FieldDescriptor ClosedChannelsResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channels__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _ClosedChannelsResponse'_unknownFields
              (\ x__ y__ -> x__{_ClosedChannelsResponse'_unknownFields = y__})
        defMessage
          = ClosedChannelsResponse{_ClosedChannelsResponse'channels =
                                     Data.Vector.Generic.empty,
                                   _ClosedChannelsResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ClosedChannelsResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         ChannelCloseSummary
                         -> Data.ProtoLens.Encoding.Bytes.Parser ClosedChannelsResponse
                loop x mutable'channels
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'channels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                    mutable'channels)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'channels")
                                    frozen'channels
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "channels"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'channels
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'channels
              in
              (do mutable'channels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'channels)
                Data.ProtoLens.Encoding.Bytes.<?> "ClosedChannelsResponse"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'channels")
                     _x))
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ClosedChannelsResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_ClosedChannelsResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ClosedChannelsResponse'channels x__)
                    (())))
{- | Fields :

    * 'Proto.Rpc_Fields.blockSha' @:: Lens' ConfirmationUpdate Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.blockHeight' @:: Lens' ConfirmationUpdate Data.Int.Int32@
    * 'Proto.Rpc_Fields.numConfsLeft' @:: Lens' ConfirmationUpdate Data.Word.Word32@
 -}
data ConfirmationUpdate = ConfirmationUpdate{_ConfirmationUpdate'blockSha
                                             :: !Data.ByteString.ByteString,
                                             _ConfirmationUpdate'blockHeight :: !Data.Int.Int32,
                                             _ConfirmationUpdate'numConfsLeft :: !Data.Word.Word32,
                                             _ConfirmationUpdate'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ConfirmationUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ConfirmationUpdate
           "blockSha"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ConfirmationUpdate'blockSha
               (\ x__ y__ -> x__{_ConfirmationUpdate'blockSha = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ConfirmationUpdate
           "blockHeight"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ConfirmationUpdate'blockHeight
               (\ x__ y__ -> x__{_ConfirmationUpdate'blockHeight = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ConfirmationUpdate
           "numConfsLeft"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ConfirmationUpdate'numConfsLeft
               (\ x__ y__ -> x__{_ConfirmationUpdate'numConfsLeft = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ConfirmationUpdate where
        messageName _ = Data.Text.pack "lnrpc.ConfirmationUpdate"
        fieldsByTag
          = let blockSha__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "block_sha"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"blockSha"))
                      :: Data.ProtoLens.FieldDescriptor ConfirmationUpdate
                blockHeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "block_height"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"blockHeight"))
                      :: Data.ProtoLens.FieldDescriptor ConfirmationUpdate
                numConfsLeft__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_confs_left"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numConfsLeft"))
                      :: Data.ProtoLens.FieldDescriptor ConfirmationUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, blockSha__field_descriptor),
                 (Data.ProtoLens.Tag 2, blockHeight__field_descriptor),
                 (Data.ProtoLens.Tag 3, numConfsLeft__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ConfirmationUpdate'_unknownFields
              (\ x__ y__ -> x__{_ConfirmationUpdate'_unknownFields = y__})
        defMessage
          = ConfirmationUpdate{_ConfirmationUpdate'blockSha =
                                 Data.ProtoLens.fieldDefault,
                               _ConfirmationUpdate'blockHeight = Data.ProtoLens.fieldDefault,
                               _ConfirmationUpdate'numConfsLeft = Data.ProtoLens.fieldDefault,
                               _ConfirmationUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ConfirmationUpdate ->
                       Data.ProtoLens.Encoding.Bytes.Parser ConfirmationUpdate
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "block_sha"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"blockSha")
                                              y
                                              x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "block_height"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"blockHeight")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "num_confs_left"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numConfsLeft")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ConfirmationUpdate"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"blockSha") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"blockHeight") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"numConfsLeft") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                       (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ConfirmationUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ConfirmationUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ConfirmationUpdate'blockSha x__)
                    (Control.DeepSeq.deepseq (_ConfirmationUpdate'blockHeight x__)
                       (Control.DeepSeq.deepseq (_ConfirmationUpdate'numConfsLeft x__)
                          (())))))
{- | Fields :

    * 'Proto.Rpc_Fields.addr' @:: Lens' ConnectPeerRequest LightningAddress@
    * 'Proto.Rpc_Fields.maybe'addr' @:: Lens' ConnectPeerRequest (Prelude.Maybe LightningAddress)@
    * 'Proto.Rpc_Fields.perm' @:: Lens' ConnectPeerRequest Prelude.Bool@
 -}
data ConnectPeerRequest = ConnectPeerRequest{_ConnectPeerRequest'addr
                                             :: !(Prelude.Maybe LightningAddress),
                                             _ConnectPeerRequest'perm :: !Prelude.Bool,
                                             _ConnectPeerRequest'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ConnectPeerRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ConnectPeerRequest "addr"
           (LightningAddress)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ConnectPeerRequest'addr
               (\ x__ y__ -> x__{_ConnectPeerRequest'addr = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ConnectPeerRequest
           "maybe'addr"
           (Prelude.Maybe LightningAddress)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ConnectPeerRequest'addr
               (\ x__ y__ -> x__{_ConnectPeerRequest'addr = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ConnectPeerRequest "perm"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ConnectPeerRequest'perm
               (\ x__ y__ -> x__{_ConnectPeerRequest'perm = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ConnectPeerRequest where
        messageName _ = Data.Text.pack "lnrpc.ConnectPeerRequest"
        fieldsByTag
          = let addr__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "addr"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor LightningAddress)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'addr"))
                      :: Data.ProtoLens.FieldDescriptor ConnectPeerRequest
                perm__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "perm"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"perm"))
                      :: Data.ProtoLens.FieldDescriptor ConnectPeerRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, addr__field_descriptor),
                 (Data.ProtoLens.Tag 2, perm__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ConnectPeerRequest'_unknownFields
              (\ x__ y__ -> x__{_ConnectPeerRequest'_unknownFields = y__})
        defMessage
          = ConnectPeerRequest{_ConnectPeerRequest'addr = Prelude.Nothing,
                               _ConnectPeerRequest'perm = Data.ProtoLens.fieldDefault,
                               _ConnectPeerRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ConnectPeerRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ConnectPeerRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "addr"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"addr") y
                                              x)
                                16 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "perm"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"perm") y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ConnectPeerRequest"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'addr") _x of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"perm") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           (\ b -> if b then 1 else 0))
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ConnectPeerRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ConnectPeerRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ConnectPeerRequest'addr x__)
                    (Control.DeepSeq.deepseq (_ConnectPeerRequest'perm x__) (()))))
{- | Fields :

 -}
data ConnectPeerResponse = ConnectPeerResponse{_ConnectPeerResponse'_unknownFields
                                               :: !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ConnectPeerResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ConnectPeerResponse where
        messageName _ = Data.Text.pack "lnrpc.ConnectPeerResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _ConnectPeerResponse'_unknownFields
              (\ x__ y__ -> x__{_ConnectPeerResponse'_unknownFields = y__})
        defMessage
          = ConnectPeerResponse{_ConnectPeerResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ConnectPeerResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser ConnectPeerResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ConnectPeerResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ConnectPeerResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ConnectPeerResponse'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.show' @:: Lens' DebugLevelRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.levelSpec' @:: Lens' DebugLevelRequest Data.Text.Text@
 -}
data DebugLevelRequest = DebugLevelRequest{_DebugLevelRequest'show
                                           :: !Prelude.Bool,
                                           _DebugLevelRequest'levelSpec :: !Data.Text.Text,
                                           _DebugLevelRequest'_unknownFields ::
                                           !Data.ProtoLens.FieldSet}
                           deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DebugLevelRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField DebugLevelRequest "show"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _DebugLevelRequest'show
               (\ x__ y__ -> x__{_DebugLevelRequest'show = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField DebugLevelRequest
           "levelSpec"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _DebugLevelRequest'levelSpec
               (\ x__ y__ -> x__{_DebugLevelRequest'levelSpec = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message DebugLevelRequest where
        messageName _ = Data.Text.pack "lnrpc.DebugLevelRequest"
        fieldsByTag
          = let show__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "show"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"show"))
                      :: Data.ProtoLens.FieldDescriptor DebugLevelRequest
                levelSpec__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "level_spec"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"levelSpec"))
                      :: Data.ProtoLens.FieldDescriptor DebugLevelRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, show__field_descriptor),
                 (Data.ProtoLens.Tag 2, levelSpec__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _DebugLevelRequest'_unknownFields
              (\ x__ y__ -> x__{_DebugLevelRequest'_unknownFields = y__})
        defMessage
          = DebugLevelRequest{_DebugLevelRequest'show =
                                Data.ProtoLens.fieldDefault,
                              _DebugLevelRequest'levelSpec = Data.ProtoLens.fieldDefault,
                              _DebugLevelRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     DebugLevelRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser DebugLevelRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "show"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"show") y
                                             x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "level_spec"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"levelSpec")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "DebugLevelRequest"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"show") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         (\ b -> if b then 1 else 0))
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"levelSpec") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData DebugLevelRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_DebugLevelRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_DebugLevelRequest'show x__)
                    (Control.DeepSeq.deepseq (_DebugLevelRequest'levelSpec x__) (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.subSystems' @:: Lens' DebugLevelResponse Data.Text.Text@
 -}
data DebugLevelResponse = DebugLevelResponse{_DebugLevelResponse'subSystems
                                             :: !Data.Text.Text,
                                             _DebugLevelResponse'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DebugLevelResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField DebugLevelResponse
           "subSystems"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _DebugLevelResponse'subSystems
               (\ x__ y__ -> x__{_DebugLevelResponse'subSystems = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message DebugLevelResponse where
        messageName _ = Data.Text.pack "lnrpc.DebugLevelResponse"
        fieldsByTag
          = let subSystems__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "sub_systems"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"subSystems"))
                      :: Data.ProtoLens.FieldDescriptor DebugLevelResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, subSystems__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _DebugLevelResponse'_unknownFields
              (\ x__ y__ -> x__{_DebugLevelResponse'_unknownFields = y__})
        defMessage
          = DebugLevelResponse{_DebugLevelResponse'subSystems =
                                 Data.ProtoLens.fieldDefault,
                               _DebugLevelResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     DebugLevelResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser DebugLevelResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "sub_systems"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"subSystems")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "DebugLevelResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"subSystems") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData DebugLevelResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_DebugLevelResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_DebugLevelResponse'subSystems x__)
                    (())))
{- | Fields :

 -}
data DeleteAllPaymentsRequest = DeleteAllPaymentsRequest{_DeleteAllPaymentsRequest'_unknownFields
                                                         :: !Data.ProtoLens.FieldSet}
                                  deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DeleteAllPaymentsRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message DeleteAllPaymentsRequest where
        messageName _ = Data.Text.pack "lnrpc.DeleteAllPaymentsRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _DeleteAllPaymentsRequest'_unknownFields
              (\ x__ y__ -> x__{_DeleteAllPaymentsRequest'_unknownFields = y__})
        defMessage
          = DeleteAllPaymentsRequest{_DeleteAllPaymentsRequest'_unknownFields
                                       = ([])}
        parseMessage
          = let loop ::
                     DeleteAllPaymentsRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser DeleteAllPaymentsRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "DeleteAllPaymentsRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData DeleteAllPaymentsRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_DeleteAllPaymentsRequest'_unknownFields x__)
                 (()))
{- | Fields :

 -}
data DeleteAllPaymentsResponse = DeleteAllPaymentsResponse{_DeleteAllPaymentsResponse'_unknownFields
                                                           :: !Data.ProtoLens.FieldSet}
                                   deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DeleteAllPaymentsResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message DeleteAllPaymentsResponse where
        messageName _ = Data.Text.pack "lnrpc.DeleteAllPaymentsResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _DeleteAllPaymentsResponse'_unknownFields
              (\ x__ y__ -> x__{_DeleteAllPaymentsResponse'_unknownFields = y__})
        defMessage
          = DeleteAllPaymentsResponse{_DeleteAllPaymentsResponse'_unknownFields
                                        = ([])}
        parseMessage
          = let loop ::
                     DeleteAllPaymentsResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser DeleteAllPaymentsResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "DeleteAllPaymentsResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData DeleteAllPaymentsResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_DeleteAllPaymentsResponse'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.pubKey' @:: Lens' DisconnectPeerRequest Data.Text.Text@
 -}
data DisconnectPeerRequest = DisconnectPeerRequest{_DisconnectPeerRequest'pubKey
                                                   :: !Data.Text.Text,
                                                   _DisconnectPeerRequest'_unknownFields ::
                                                   !Data.ProtoLens.FieldSet}
                               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DisconnectPeerRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField DisconnectPeerRequest
           "pubKey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _DisconnectPeerRequest'pubKey
               (\ x__ y__ -> x__{_DisconnectPeerRequest'pubKey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message DisconnectPeerRequest where
        messageName _ = Data.Text.pack "lnrpc.DisconnectPeerRequest"
        fieldsByTag
          = let pubKey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pub_key"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pubKey"))
                      :: Data.ProtoLens.FieldDescriptor DisconnectPeerRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, pubKey__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _DisconnectPeerRequest'_unknownFields
              (\ x__ y__ -> x__{_DisconnectPeerRequest'_unknownFields = y__})
        defMessage
          = DisconnectPeerRequest{_DisconnectPeerRequest'pubKey =
                                    Data.ProtoLens.fieldDefault,
                                  _DisconnectPeerRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     DisconnectPeerRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser DisconnectPeerRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "pub_key"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"pubKey")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "DisconnectPeerRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"pubKey") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData DisconnectPeerRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_DisconnectPeerRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_DisconnectPeerRequest'pubKey x__) (())))
{- | Fields :

 -}
data DisconnectPeerResponse = DisconnectPeerResponse{_DisconnectPeerResponse'_unknownFields
                                                     :: !Data.ProtoLens.FieldSet}
                                deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DisconnectPeerResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message DisconnectPeerResponse where
        messageName _ = Data.Text.pack "lnrpc.DisconnectPeerResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _DisconnectPeerResponse'_unknownFields
              (\ x__ y__ -> x__{_DisconnectPeerResponse'_unknownFields = y__})
        defMessage
          = DisconnectPeerResponse{_DisconnectPeerResponse'_unknownFields =
                                     ([])}
        parseMessage
          = let loop ::
                     DisconnectPeerResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser DisconnectPeerResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "DisconnectPeerResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData DisconnectPeerResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_DisconnectPeerResponse'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.channelId' @:: Lens' EdgeLocator Data.Word.Word64@
    * 'Proto.Rpc_Fields.directionReverse' @:: Lens' EdgeLocator Prelude.Bool@
 -}
data EdgeLocator = EdgeLocator{_EdgeLocator'channelId ::
                               !Data.Word.Word64,
                               _EdgeLocator'directionReverse :: !Prelude.Bool,
                               _EdgeLocator'_unknownFields :: !Data.ProtoLens.FieldSet}
                     deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EdgeLocator where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EdgeLocator "channelId"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _EdgeLocator'channelId
               (\ x__ y__ -> x__{_EdgeLocator'channelId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField EdgeLocator
           "directionReverse"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _EdgeLocator'directionReverse
               (\ x__ y__ -> x__{_EdgeLocator'directionReverse = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message EdgeLocator where
        messageName _ = Data.Text.pack "lnrpc.EdgeLocator"
        fieldsByTag
          = let channelId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"channelId"))
                      :: Data.ProtoLens.FieldDescriptor EdgeLocator
                directionReverse__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "direction_reverse"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"directionReverse"))
                      :: Data.ProtoLens.FieldDescriptor EdgeLocator
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channelId__field_descriptor),
                 (Data.ProtoLens.Tag 2, directionReverse__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _EdgeLocator'_unknownFields
              (\ x__ y__ -> x__{_EdgeLocator'_unknownFields = y__})
        defMessage
          = EdgeLocator{_EdgeLocator'channelId = Data.ProtoLens.fieldDefault,
                        _EdgeLocator'directionReverse = Data.ProtoLens.fieldDefault,
                        _EdgeLocator'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     EdgeLocator -> Data.ProtoLens.Encoding.Bytes.Parser EdgeLocator
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "channel_id"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"channelId")
                                             y
                                             x)
                                16 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "direction_reverse"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"directionReverse")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "EdgeLocator"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"channelId") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view
                            (Data.ProtoLens.Field.field @"directionReverse")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           (\ b -> if b then 1 else 0))
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData EdgeLocator where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_EdgeLocator'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_EdgeLocator'channelId x__)
                    (Control.DeepSeq.deepseq (_EdgeLocator'directionReverse x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.addrToAmount' @:: Lens' EstimateFeeRequest
  (Data.Map.Map Data.Text.Text Data.Int.Int64)@
    * 'Proto.Rpc_Fields.targetConf' @:: Lens' EstimateFeeRequest Data.Int.Int32@
 -}
data EstimateFeeRequest = EstimateFeeRequest{_EstimateFeeRequest'addrToAmount
                                             :: !(Data.Map.Map Data.Text.Text Data.Int.Int64),
                                             _EstimateFeeRequest'targetConf :: !Data.Int.Int32,
                                             _EstimateFeeRequest'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EstimateFeeRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EstimateFeeRequest
           "addrToAmount"
           (Data.Map.Map Data.Text.Text Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _EstimateFeeRequest'addrToAmount
               (\ x__ y__ -> x__{_EstimateFeeRequest'addrToAmount = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField EstimateFeeRequest
           "targetConf"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _EstimateFeeRequest'targetConf
               (\ x__ y__ -> x__{_EstimateFeeRequest'targetConf = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message EstimateFeeRequest where
        messageName _ = Data.Text.pack "lnrpc.EstimateFeeRequest"
        fieldsByTag
          = let addrToAmount__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "AddrToAmount"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor
                           EstimateFeeRequest'AddrToAmountEntry)
                      (Data.ProtoLens.MapField (Data.ProtoLens.Field.field @"key")
                         (Data.ProtoLens.Field.field @"value")
                         (Data.ProtoLens.Field.field @"addrToAmount"))
                      :: Data.ProtoLens.FieldDescriptor EstimateFeeRequest
                targetConf__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "target_conf"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"targetConf"))
                      :: Data.ProtoLens.FieldDescriptor EstimateFeeRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, addrToAmount__field_descriptor),
                 (Data.ProtoLens.Tag 2, targetConf__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _EstimateFeeRequest'_unknownFields
              (\ x__ y__ -> x__{_EstimateFeeRequest'_unknownFields = y__})
        defMessage
          = EstimateFeeRequest{_EstimateFeeRequest'addrToAmount =
                                 Data.Map.empty,
                               _EstimateFeeRequest'targetConf = Data.ProtoLens.fieldDefault,
                               _EstimateFeeRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     EstimateFeeRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser EstimateFeeRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !(entry ::
                                             EstimateFeeRequest'AddrToAmountEntry) <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                                                          Data.ProtoLens.Encoding.Bytes.isolate
                                                                                            (Prelude.fromIntegral
                                                                                               len)
                                                                                            Data.ProtoLens.parseMessage)
                                                                                        Data.ProtoLens.Encoding.Bytes.<?>
                                                                                        "AddrToAmount"
                                         let key
                                               = Lens.Family2.view
                                                   (Data.ProtoLens.Field.field @"key")
                                                   entry
                                             value
                                               = Lens.Family2.view
                                                   (Data.ProtoLens.Field.field @"value")
                                                   entry
                                           in
                                           loop
                                             (Lens.Family2.over
                                                (Data.ProtoLens.Field.field @"addrToAmount")
                                                (\ !t -> Data.Map.insert key value t)
                                                x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "target_conf"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"targetConf")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "EstimateFeeRequest"
        buildMessage
          = (\ _x ->
               (Data.Monoid.mconcat
                  (Prelude.map
                     (\ _v ->
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                          (((\ bs ->
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Prelude.. Data.ProtoLens.encodeMessage)
                            (Lens.Family2.set (Data.ProtoLens.Field.field @"key")
                               (Prelude.fst _v)
                               (Lens.Family2.set (Data.ProtoLens.Field.field @"value")
                                  (Prelude.snd _v)
                                  (Data.ProtoLens.defMessage ::
                                     EstimateFeeRequest'AddrToAmountEntry))))
                     (Data.Map.toList
                        (Lens.Family2.view (Data.ProtoLens.Field.field @"addrToAmount")
                           _x))))
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"targetConf") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData EstimateFeeRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_EstimateFeeRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_EstimateFeeRequest'addrToAmount x__)
                    (Control.DeepSeq.deepseq (_EstimateFeeRequest'targetConf x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.key' @:: Lens' EstimateFeeRequest'AddrToAmountEntry Data.Text.Text@
    * 'Proto.Rpc_Fields.value' @:: Lens' EstimateFeeRequest'AddrToAmountEntry Data.Int.Int64@
 -}
data EstimateFeeRequest'AddrToAmountEntry = EstimateFeeRequest'AddrToAmountEntry{_EstimateFeeRequest'AddrToAmountEntry'key
                                                                                 :: !Data.Text.Text,
                                                                                 _EstimateFeeRequest'AddrToAmountEntry'value
                                                                                 :: !Data.Int.Int64,
                                                                                 _EstimateFeeRequest'AddrToAmountEntry'_unknownFields
                                                                                 ::
                                                                                 !Data.ProtoLens.FieldSet}
                                              deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EstimateFeeRequest'AddrToAmountEntry where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField
           EstimateFeeRequest'AddrToAmountEntry
           "key"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _EstimateFeeRequest'AddrToAmountEntry'key
               (\ x__ y__ ->
                  x__{_EstimateFeeRequest'AddrToAmountEntry'key = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           EstimateFeeRequest'AddrToAmountEntry
           "value"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _EstimateFeeRequest'AddrToAmountEntry'value
               (\ x__ y__ ->
                  x__{_EstimateFeeRequest'AddrToAmountEntry'value = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message
           EstimateFeeRequest'AddrToAmountEntry
         where
        messageName _
          = Data.Text.pack "lnrpc.EstimateFeeRequest.AddrToAmountEntry"
        fieldsByTag
          = let key__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "key"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"key"))
                      ::
                      Data.ProtoLens.FieldDescriptor EstimateFeeRequest'AddrToAmountEntry
                value__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "value"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"value"))
                      ::
                      Data.ProtoLens.FieldDescriptor EstimateFeeRequest'AddrToAmountEntry
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, key__field_descriptor),
                 (Data.ProtoLens.Tag 2, value__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _EstimateFeeRequest'AddrToAmountEntry'_unknownFields
              (\ x__ y__ ->
                 x__{_EstimateFeeRequest'AddrToAmountEntry'_unknownFields = y__})
        defMessage
          = EstimateFeeRequest'AddrToAmountEntry{_EstimateFeeRequest'AddrToAmountEntry'key
                                                   = Data.ProtoLens.fieldDefault,
                                                 _EstimateFeeRequest'AddrToAmountEntry'value =
                                                   Data.ProtoLens.fieldDefault,
                                                 _EstimateFeeRequest'AddrToAmountEntry'_unknownFields
                                                   = ([])}
        parseMessage
          = let loop ::
                     EstimateFeeRequest'AddrToAmountEntry ->
                       Data.ProtoLens.Encoding.Bytes.Parser
                         EstimateFeeRequest'AddrToAmountEntry
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "key"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y
                                              x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "value"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "AddrToAmountEntry"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"value") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData
           EstimateFeeRequest'AddrToAmountEntry
         where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_EstimateFeeRequest'AddrToAmountEntry'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_EstimateFeeRequest'AddrToAmountEntry'key x__)
                    (Control.DeepSeq.deepseq
                       (_EstimateFeeRequest'AddrToAmountEntry'value x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.feeSat' @:: Lens' EstimateFeeResponse Data.Int.Int64@
    * 'Proto.Rpc_Fields.feerateSatPerByte' @:: Lens' EstimateFeeResponse Data.Int.Int64@
 -}
data EstimateFeeResponse = EstimateFeeResponse{_EstimateFeeResponse'feeSat
                                               :: !Data.Int.Int64,
                                               _EstimateFeeResponse'feerateSatPerByte ::
                                               !Data.Int.Int64,
                                               _EstimateFeeResponse'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EstimateFeeResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EstimateFeeResponse "feeSat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _EstimateFeeResponse'feeSat
               (\ x__ y__ -> x__{_EstimateFeeResponse'feeSat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField EstimateFeeResponse
           "feerateSatPerByte"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _EstimateFeeResponse'feerateSatPerByte
               (\ x__ y__ -> x__{_EstimateFeeResponse'feerateSatPerByte = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message EstimateFeeResponse where
        messageName _ = Data.Text.pack "lnrpc.EstimateFeeResponse"
        fieldsByTag
          = let feeSat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_sat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feeSat"))
                      :: Data.ProtoLens.FieldDescriptor EstimateFeeResponse
                feerateSatPerByte__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "feerate_sat_per_byte"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feerateSatPerByte"))
                      :: Data.ProtoLens.FieldDescriptor EstimateFeeResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, feeSat__field_descriptor),
                 (Data.ProtoLens.Tag 2, feerateSatPerByte__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _EstimateFeeResponse'_unknownFields
              (\ x__ y__ -> x__{_EstimateFeeResponse'_unknownFields = y__})
        defMessage
          = EstimateFeeResponse{_EstimateFeeResponse'feeSat =
                                  Data.ProtoLens.fieldDefault,
                                _EstimateFeeResponse'feerateSatPerByte =
                                  Data.ProtoLens.fieldDefault,
                                _EstimateFeeResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     EstimateFeeResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser EstimateFeeResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "fee_sat"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"feeSat") y
                                             x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "feerate_sat_per_byte"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"feerateSatPerByte")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "EstimateFeeResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"feeSat") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view
                            (Data.ProtoLens.Field.field @"feerateSatPerByte")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData EstimateFeeResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_EstimateFeeResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_EstimateFeeResponse'feeSat x__)
                    (Control.DeepSeq.deepseq
                       (_EstimateFeeResponse'feerateSatPerByte x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.chanPoint' @:: Lens' ExportChannelBackupRequest ChannelPoint@
    * 'Proto.Rpc_Fields.maybe'chanPoint' @:: Lens' ExportChannelBackupRequest (Prelude.Maybe ChannelPoint)@
 -}
data ExportChannelBackupRequest = ExportChannelBackupRequest{_ExportChannelBackupRequest'chanPoint
                                                             :: !(Prelude.Maybe ChannelPoint),
                                                             _ExportChannelBackupRequest'_unknownFields
                                                             :: !Data.ProtoLens.FieldSet}
                                    deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ExportChannelBackupRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ExportChannelBackupRequest
           "chanPoint"
           (ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ExportChannelBackupRequest'chanPoint
               (\ x__ y__ -> x__{_ExportChannelBackupRequest'chanPoint = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField ExportChannelBackupRequest
           "maybe'chanPoint"
           (Prelude.Maybe ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ExportChannelBackupRequest'chanPoint
               (\ x__ y__ -> x__{_ExportChannelBackupRequest'chanPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ExportChannelBackupRequest where
        messageName _ = Data.Text.pack "lnrpc.ExportChannelBackupRequest"
        fieldsByTag
          = let chanPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_point"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'chanPoint"))
                      :: Data.ProtoLens.FieldDescriptor ExportChannelBackupRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanPoint__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _ExportChannelBackupRequest'_unknownFields
              (\ x__ y__ ->
                 x__{_ExportChannelBackupRequest'_unknownFields = y__})
        defMessage
          = ExportChannelBackupRequest{_ExportChannelBackupRequest'chanPoint
                                         = Prelude.Nothing,
                                       _ExportChannelBackupRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ExportChannelBackupRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ExportChannelBackupRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanPoint")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ExportChannelBackupRequest"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'chanPoint")
                    _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ExportChannelBackupRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_ExportChannelBackupRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_ExportChannelBackupRequest'chanPoint x__)
                    (())))
{- | Fields :

    * 'Proto.Rpc_Fields.maybe'limit' @:: Lens' FeeLimit (Prelude.Maybe FeeLimit'Limit)@
    * 'Proto.Rpc_Fields.maybe'fixed' @:: Lens' FeeLimit (Prelude.Maybe Data.Int.Int64)@
    * 'Proto.Rpc_Fields.fixed' @:: Lens' FeeLimit Data.Int.Int64@
    * 'Proto.Rpc_Fields.maybe'percent' @:: Lens' FeeLimit (Prelude.Maybe Data.Int.Int64)@
    * 'Proto.Rpc_Fields.percent' @:: Lens' FeeLimit Data.Int.Int64@
 -}
data FeeLimit = FeeLimit{_FeeLimit'limit ::
                         !(Prelude.Maybe FeeLimit'Limit),
                         _FeeLimit'_unknownFields :: !Data.ProtoLens.FieldSet}
                  deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show FeeLimit where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
data FeeLimit'Limit = FeeLimit'Fixed !Data.Int.Int64
                    | FeeLimit'Percent !Data.Int.Int64
                        deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField FeeLimit "maybe'limit"
           (Prelude.Maybe FeeLimit'Limit)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _FeeLimit'limit
               (\ x__ y__ -> x__{_FeeLimit'limit = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField FeeLimit "maybe'fixed"
           (Prelude.Maybe Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _FeeLimit'limit
               (\ x__ y__ -> x__{_FeeLimit'limit = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just (FeeLimit'Fixed x__val) -> Prelude.Just x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap FeeLimit'Fixed y__)
instance Data.ProtoLens.Field.HasField FeeLimit "fixed"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _FeeLimit'limit
               (\ x__ y__ -> x__{_FeeLimit'limit = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just (FeeLimit'Fixed x__val) -> Prelude.Just x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap FeeLimit'Fixed y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault
instance Data.ProtoLens.Field.HasField FeeLimit "maybe'percent"
           (Prelude.Maybe Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _FeeLimit'limit
               (\ x__ y__ -> x__{_FeeLimit'limit = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just (FeeLimit'Percent x__val) -> Prelude.Just x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap FeeLimit'Percent y__)
instance Data.ProtoLens.Field.HasField FeeLimit "percent"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _FeeLimit'limit
               (\ x__ y__ -> x__{_FeeLimit'limit = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just (FeeLimit'Percent x__val) -> Prelude.Just x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap FeeLimit'Percent y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault
instance Data.ProtoLens.Message FeeLimit where
        messageName _ = Data.Text.pack "lnrpc.FeeLimit"
        fieldsByTag
          = let fixed__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fixed"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'fixed"))
                      :: Data.ProtoLens.FieldDescriptor FeeLimit
                percent__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "percent"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'percent"))
                      :: Data.ProtoLens.FieldDescriptor FeeLimit
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, fixed__field_descriptor),
                 (Data.ProtoLens.Tag 2, percent__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _FeeLimit'_unknownFields
              (\ x__ y__ -> x__{_FeeLimit'_unknownFields = y__})
        defMessage
          = FeeLimit{_FeeLimit'limit = Prelude.Nothing,
                     _FeeLimit'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     FeeLimit -> Data.ProtoLens.Encoding.Bytes.Parser FeeLimit
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "fixed"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"fixed") y
                                             x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "percent"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"percent")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "FeeLimit"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'limit") _x of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just
                      (FeeLimit'Fixed v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                                              Data.Monoid.<>
                                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                                 Prelude.fromIntegral)
                                                v
                    Prelude.Just
                      (FeeLimit'Percent v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 16)
                                                Data.Monoid.<>
                                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                                   Prelude.fromIntegral)
                                                  v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData FeeLimit where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_FeeLimit'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_FeeLimit'limit x__) (())))
instance Control.DeepSeq.NFData FeeLimit'Limit where
        rnf (FeeLimit'Fixed x__) = Control.DeepSeq.rnf x__
        rnf (FeeLimit'Percent x__) = Control.DeepSeq.rnf x__
_FeeLimit'Fixed ::
                Data.ProtoLens.Prism.Prism' FeeLimit'Limit Data.Int.Int64
_FeeLimit'Fixed
  = Data.ProtoLens.Prism.prism' FeeLimit'Fixed
      (\ p__ ->
         case p__ of
             FeeLimit'Fixed p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
_FeeLimit'Percent ::
                  Data.ProtoLens.Prism.Prism' FeeLimit'Limit Data.Int.Int64
_FeeLimit'Percent
  = Data.ProtoLens.Prism.prism' FeeLimit'Percent
      (\ p__ ->
         case p__ of
             FeeLimit'Percent p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
{- | Fields :

 -}
data FeeReportRequest = FeeReportRequest{_FeeReportRequest'_unknownFields
                                         :: !Data.ProtoLens.FieldSet}
                          deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show FeeReportRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message FeeReportRequest where
        messageName _ = Data.Text.pack "lnrpc.FeeReportRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _FeeReportRequest'_unknownFields
              (\ x__ y__ -> x__{_FeeReportRequest'_unknownFields = y__})
        defMessage
          = FeeReportRequest{_FeeReportRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     FeeReportRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser FeeReportRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "FeeReportRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData FeeReportRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_FeeReportRequest'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.channelFees' @:: Lens' FeeReportResponse [ChannelFeeReport]@
    * 'Proto.Rpc_Fields.vec'channelFees' @:: Lens' FeeReportResponse (Data.Vector.Vector ChannelFeeReport)@
    * 'Proto.Rpc_Fields.dayFeeSum' @:: Lens' FeeReportResponse Data.Word.Word64@
    * 'Proto.Rpc_Fields.weekFeeSum' @:: Lens' FeeReportResponse Data.Word.Word64@
    * 'Proto.Rpc_Fields.monthFeeSum' @:: Lens' FeeReportResponse Data.Word.Word64@
 -}
data FeeReportResponse = FeeReportResponse{_FeeReportResponse'channelFees
                                           :: !(Data.Vector.Vector ChannelFeeReport),
                                           _FeeReportResponse'dayFeeSum :: !Data.Word.Word64,
                                           _FeeReportResponse'weekFeeSum :: !Data.Word.Word64,
                                           _FeeReportResponse'monthFeeSum :: !Data.Word.Word64,
                                           _FeeReportResponse'_unknownFields ::
                                           !Data.ProtoLens.FieldSet}
                           deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show FeeReportResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField FeeReportResponse
           "channelFees"
           ([ChannelFeeReport])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _FeeReportResponse'channelFees
               (\ x__ y__ -> x__{_FeeReportResponse'channelFees = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField FeeReportResponse
           "vec'channelFees"
           (Data.Vector.Vector ChannelFeeReport)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _FeeReportResponse'channelFees
               (\ x__ y__ -> x__{_FeeReportResponse'channelFees = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField FeeReportResponse
           "dayFeeSum"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _FeeReportResponse'dayFeeSum
               (\ x__ y__ -> x__{_FeeReportResponse'dayFeeSum = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField FeeReportResponse
           "weekFeeSum"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _FeeReportResponse'weekFeeSum
               (\ x__ y__ -> x__{_FeeReportResponse'weekFeeSum = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField FeeReportResponse
           "monthFeeSum"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _FeeReportResponse'monthFeeSum
               (\ x__ y__ -> x__{_FeeReportResponse'monthFeeSum = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message FeeReportResponse where
        messageName _ = Data.Text.pack "lnrpc.FeeReportResponse"
        fieldsByTag
          = let channelFees__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_fees"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelFeeReport)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"channelFees"))
                      :: Data.ProtoLens.FieldDescriptor FeeReportResponse
                dayFeeSum__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "day_fee_sum"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"dayFeeSum"))
                      :: Data.ProtoLens.FieldDescriptor FeeReportResponse
                weekFeeSum__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "week_fee_sum"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"weekFeeSum"))
                      :: Data.ProtoLens.FieldDescriptor FeeReportResponse
                monthFeeSum__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "month_fee_sum"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"monthFeeSum"))
                      :: Data.ProtoLens.FieldDescriptor FeeReportResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channelFees__field_descriptor),
                 (Data.ProtoLens.Tag 2, dayFeeSum__field_descriptor),
                 (Data.ProtoLens.Tag 3, weekFeeSum__field_descriptor),
                 (Data.ProtoLens.Tag 4, monthFeeSum__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _FeeReportResponse'_unknownFields
              (\ x__ y__ -> x__{_FeeReportResponse'_unknownFields = y__})
        defMessage
          = FeeReportResponse{_FeeReportResponse'channelFees =
                                Data.Vector.Generic.empty,
                              _FeeReportResponse'dayFeeSum = Data.ProtoLens.fieldDefault,
                              _FeeReportResponse'weekFeeSum = Data.ProtoLens.fieldDefault,
                              _FeeReportResponse'monthFeeSum = Data.ProtoLens.fieldDefault,
                              _FeeReportResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     FeeReportResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         ChannelFeeReport
                         -> Data.ProtoLens.Encoding.Bytes.Parser FeeReportResponse
                loop x mutable'channelFees
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'channelFees <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                    (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                       mutable'channelFees)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'channelFees")
                                    frozen'channelFees
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "channel_fees"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'channelFees
                                                   y)
                                         loop x v
                                16 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "day_fee_sum"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"dayFeeSum")
                                              y
                                              x)
                                           mutable'channelFees
                                24 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "week_fee_sum"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"weekFeeSum")
                                              y
                                              x)
                                           mutable'channelFees
                                32 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "month_fee_sum"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"monthFeeSum")
                                              y
                                              x)
                                           mutable'channelFees
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'channelFees
              in
              (do mutable'channelFees <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'channelFees)
                Data.ProtoLens.Encoding.Bytes.<?> "FeeReportResponse"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'channelFees")
                     _x))
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"dayFeeSum") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"weekFeeSum") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"monthFeeSum") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData FeeReportResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_FeeReportResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_FeeReportResponse'channelFees x__)
                    (Control.DeepSeq.deepseq (_FeeReportResponse'dayFeeSum x__)
                       (Control.DeepSeq.deepseq (_FeeReportResponse'weekFeeSum x__)
                          (Control.DeepSeq.deepseq (_FeeReportResponse'monthFeeSum x__)
                             (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.timestamp' @:: Lens' ForwardingEvent Data.Word.Word64@
    * 'Proto.Rpc_Fields.chanIdIn' @:: Lens' ForwardingEvent Data.Word.Word64@
    * 'Proto.Rpc_Fields.chanIdOut' @:: Lens' ForwardingEvent Data.Word.Word64@
    * 'Proto.Rpc_Fields.amtIn' @:: Lens' ForwardingEvent Data.Word.Word64@
    * 'Proto.Rpc_Fields.amtOut' @:: Lens' ForwardingEvent Data.Word.Word64@
    * 'Proto.Rpc_Fields.fee' @:: Lens' ForwardingEvent Data.Word.Word64@
    * 'Proto.Rpc_Fields.feeMsat' @:: Lens' ForwardingEvent Data.Word.Word64@
 -}
data ForwardingEvent = ForwardingEvent{_ForwardingEvent'timestamp
                                       :: !Data.Word.Word64,
                                       _ForwardingEvent'chanIdIn :: !Data.Word.Word64,
                                       _ForwardingEvent'chanIdOut :: !Data.Word.Word64,
                                       _ForwardingEvent'amtIn :: !Data.Word.Word64,
                                       _ForwardingEvent'amtOut :: !Data.Word.Word64,
                                       _ForwardingEvent'fee :: !Data.Word.Word64,
                                       _ForwardingEvent'feeMsat :: !Data.Word.Word64,
                                       _ForwardingEvent'_unknownFields :: !Data.ProtoLens.FieldSet}
                         deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ForwardingEvent where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ForwardingEvent "timestamp"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ForwardingEvent'timestamp
               (\ x__ y__ -> x__{_ForwardingEvent'timestamp = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ForwardingEvent "chanIdIn"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ForwardingEvent'chanIdIn
               (\ x__ y__ -> x__{_ForwardingEvent'chanIdIn = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ForwardingEvent "chanIdOut"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ForwardingEvent'chanIdOut
               (\ x__ y__ -> x__{_ForwardingEvent'chanIdOut = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ForwardingEvent "amtIn"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ForwardingEvent'amtIn
               (\ x__ y__ -> x__{_ForwardingEvent'amtIn = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ForwardingEvent "amtOut"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ForwardingEvent'amtOut
               (\ x__ y__ -> x__{_ForwardingEvent'amtOut = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ForwardingEvent "fee"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ForwardingEvent'fee
               (\ x__ y__ -> x__{_ForwardingEvent'fee = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ForwardingEvent "feeMsat"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ForwardingEvent'feeMsat
               (\ x__ y__ -> x__{_ForwardingEvent'feeMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ForwardingEvent where
        messageName _ = Data.Text.pack "lnrpc.ForwardingEvent"
        fieldsByTag
          = let timestamp__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "timestamp"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"timestamp"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingEvent
                chanIdIn__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_id_in"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanIdIn"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingEvent
                chanIdOut__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_id_out"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanIdOut"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingEvent
                amtIn__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amt_in"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amtIn"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingEvent
                amtOut__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amt_out"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amtOut"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingEvent
                fee__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"fee"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingEvent
                feeMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feeMsat"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingEvent
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, timestamp__field_descriptor),
                 (Data.ProtoLens.Tag 2, chanIdIn__field_descriptor),
                 (Data.ProtoLens.Tag 4, chanIdOut__field_descriptor),
                 (Data.ProtoLens.Tag 5, amtIn__field_descriptor),
                 (Data.ProtoLens.Tag 6, amtOut__field_descriptor),
                 (Data.ProtoLens.Tag 7, fee__field_descriptor),
                 (Data.ProtoLens.Tag 8, feeMsat__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ForwardingEvent'_unknownFields
              (\ x__ y__ -> x__{_ForwardingEvent'_unknownFields = y__})
        defMessage
          = ForwardingEvent{_ForwardingEvent'timestamp =
                              Data.ProtoLens.fieldDefault,
                            _ForwardingEvent'chanIdIn = Data.ProtoLens.fieldDefault,
                            _ForwardingEvent'chanIdOut = Data.ProtoLens.fieldDefault,
                            _ForwardingEvent'amtIn = Data.ProtoLens.fieldDefault,
                            _ForwardingEvent'amtOut = Data.ProtoLens.fieldDefault,
                            _ForwardingEvent'fee = Data.ProtoLens.fieldDefault,
                            _ForwardingEvent'feeMsat = Data.ProtoLens.fieldDefault,
                            _ForwardingEvent'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ForwardingEvent ->
                       Data.ProtoLens.Encoding.Bytes.Parser ForwardingEvent
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "timestamp"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"timestamp")
                                             y
                                             x)
                                16 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_id_in"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanIdIn")
                                              y
                                              x)
                                32 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_id_out"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanIdOut")
                                              y
                                              x)
                                40 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "amt_in"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"amtIn") y
                                              x)
                                48 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "amt_out"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"amtOut")
                                              y
                                              x)
                                56 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"fee") y
                                              x)
                                64 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_msat"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"feeMsat")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ForwardingEvent"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"timestamp") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"chanIdIn") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"chanIdOut") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                          Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"amtIn") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                            Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"amtOut") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                              Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                         Data.Monoid.<>
                         (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"fee") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 56) Data.Monoid.<>
                                Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"feeMsat") _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 64) Data.Monoid.<>
                                  Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                             Data.Monoid.<>
                             Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ForwardingEvent where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ForwardingEvent'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ForwardingEvent'timestamp x__)
                    (Control.DeepSeq.deepseq (_ForwardingEvent'chanIdIn x__)
                       (Control.DeepSeq.deepseq (_ForwardingEvent'chanIdOut x__)
                          (Control.DeepSeq.deepseq (_ForwardingEvent'amtIn x__)
                             (Control.DeepSeq.deepseq (_ForwardingEvent'amtOut x__)
                                (Control.DeepSeq.deepseq (_ForwardingEvent'fee x__)
                                   (Control.DeepSeq.deepseq (_ForwardingEvent'feeMsat x__)
                                      (())))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.startTime' @:: Lens' ForwardingHistoryRequest Data.Word.Word64@
    * 'Proto.Rpc_Fields.endTime' @:: Lens' ForwardingHistoryRequest Data.Word.Word64@
    * 'Proto.Rpc_Fields.indexOffset' @:: Lens' ForwardingHistoryRequest Data.Word.Word32@
    * 'Proto.Rpc_Fields.numMaxEvents' @:: Lens' ForwardingHistoryRequest Data.Word.Word32@
 -}
data ForwardingHistoryRequest = ForwardingHistoryRequest{_ForwardingHistoryRequest'startTime
                                                         :: !Data.Word.Word64,
                                                         _ForwardingHistoryRequest'endTime ::
                                                         !Data.Word.Word64,
                                                         _ForwardingHistoryRequest'indexOffset ::
                                                         !Data.Word.Word32,
                                                         _ForwardingHistoryRequest'numMaxEvents ::
                                                         !Data.Word.Word32,
                                                         _ForwardingHistoryRequest'_unknownFields ::
                                                         !Data.ProtoLens.FieldSet}
                                  deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ForwardingHistoryRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ForwardingHistoryRequest
           "startTime"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ForwardingHistoryRequest'startTime
               (\ x__ y__ -> x__{_ForwardingHistoryRequest'startTime = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ForwardingHistoryRequest
           "endTime"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ForwardingHistoryRequest'endTime
               (\ x__ y__ -> x__{_ForwardingHistoryRequest'endTime = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ForwardingHistoryRequest
           "indexOffset"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ForwardingHistoryRequest'indexOffset
               (\ x__ y__ -> x__{_ForwardingHistoryRequest'indexOffset = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ForwardingHistoryRequest
           "numMaxEvents"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ForwardingHistoryRequest'numMaxEvents
               (\ x__ y__ -> x__{_ForwardingHistoryRequest'numMaxEvents = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ForwardingHistoryRequest where
        messageName _ = Data.Text.pack "lnrpc.ForwardingHistoryRequest"
        fieldsByTag
          = let startTime__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "start_time"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"startTime"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingHistoryRequest
                endTime__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "end_time"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"endTime"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingHistoryRequest
                indexOffset__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "index_offset"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"indexOffset"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingHistoryRequest
                numMaxEvents__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_max_events"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numMaxEvents"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingHistoryRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, startTime__field_descriptor),
                 (Data.ProtoLens.Tag 2, endTime__field_descriptor),
                 (Data.ProtoLens.Tag 3, indexOffset__field_descriptor),
                 (Data.ProtoLens.Tag 4, numMaxEvents__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _ForwardingHistoryRequest'_unknownFields
              (\ x__ y__ -> x__{_ForwardingHistoryRequest'_unknownFields = y__})
        defMessage
          = ForwardingHistoryRequest{_ForwardingHistoryRequest'startTime =
                                       Data.ProtoLens.fieldDefault,
                                     _ForwardingHistoryRequest'endTime =
                                       Data.ProtoLens.fieldDefault,
                                     _ForwardingHistoryRequest'indexOffset =
                                       Data.ProtoLens.fieldDefault,
                                     _ForwardingHistoryRequest'numMaxEvents =
                                       Data.ProtoLens.fieldDefault,
                                     _ForwardingHistoryRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ForwardingHistoryRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ForwardingHistoryRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "start_time"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"startTime")
                                             y
                                             x)
                                16 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "end_time"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"endTime")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "index_offset"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"indexOffset")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "num_max_events"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numMaxEvents")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ForwardingHistoryRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"startTime") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"endTime") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"indexOffset") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"numMaxEvents") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ForwardingHistoryRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_ForwardingHistoryRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ForwardingHistoryRequest'startTime x__)
                    (Control.DeepSeq.deepseq (_ForwardingHistoryRequest'endTime x__)
                       (Control.DeepSeq.deepseq
                          (_ForwardingHistoryRequest'indexOffset x__)
                          (Control.DeepSeq.deepseq
                             (_ForwardingHistoryRequest'numMaxEvents x__)
                             (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.forwardingEvents' @:: Lens' ForwardingHistoryResponse [ForwardingEvent]@
    * 'Proto.Rpc_Fields.vec'forwardingEvents' @:: Lens' ForwardingHistoryResponse
  (Data.Vector.Vector ForwardingEvent)@
    * 'Proto.Rpc_Fields.lastOffsetIndex' @:: Lens' ForwardingHistoryResponse Data.Word.Word32@
 -}
data ForwardingHistoryResponse = ForwardingHistoryResponse{_ForwardingHistoryResponse'forwardingEvents
                                                           :: !(Data.Vector.Vector ForwardingEvent),
                                                           _ForwardingHistoryResponse'lastOffsetIndex
                                                           :: !Data.Word.Word32,
                                                           _ForwardingHistoryResponse'_unknownFields
                                                           :: !Data.ProtoLens.FieldSet}
                                   deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ForwardingHistoryResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ForwardingHistoryResponse
           "forwardingEvents"
           ([ForwardingEvent])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ForwardingHistoryResponse'forwardingEvents
               (\ x__ y__ ->
                  x__{_ForwardingHistoryResponse'forwardingEvents = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField ForwardingHistoryResponse
           "vec'forwardingEvents"
           (Data.Vector.Vector ForwardingEvent)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ForwardingHistoryResponse'forwardingEvents
               (\ x__ y__ ->
                  x__{_ForwardingHistoryResponse'forwardingEvents = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ForwardingHistoryResponse
           "lastOffsetIndex"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ForwardingHistoryResponse'lastOffsetIndex
               (\ x__ y__ ->
                  x__{_ForwardingHistoryResponse'lastOffsetIndex = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ForwardingHistoryResponse where
        messageName _ = Data.Text.pack "lnrpc.ForwardingHistoryResponse"
        fieldsByTag
          = let forwardingEvents__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "forwarding_events"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ForwardingEvent)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"forwardingEvents"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingHistoryResponse
                lastOffsetIndex__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "last_offset_index"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"lastOffsetIndex"))
                      :: Data.ProtoLens.FieldDescriptor ForwardingHistoryResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, forwardingEvents__field_descriptor),
                 (Data.ProtoLens.Tag 2, lastOffsetIndex__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _ForwardingHistoryResponse'_unknownFields
              (\ x__ y__ -> x__{_ForwardingHistoryResponse'_unknownFields = y__})
        defMessage
          = ForwardingHistoryResponse{_ForwardingHistoryResponse'forwardingEvents
                                        = Data.Vector.Generic.empty,
                                      _ForwardingHistoryResponse'lastOffsetIndex =
                                        Data.ProtoLens.fieldDefault,
                                      _ForwardingHistoryResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ForwardingHistoryResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         ForwardingEvent
                         -> Data.ProtoLens.Encoding.Bytes.Parser ForwardingHistoryResponse
                loop x mutable'forwardingEvents
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'forwardingEvents <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                            mutable'forwardingEvents)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'forwardingEvents")
                                    frozen'forwardingEvents
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "forwarding_events"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'forwardingEvents
                                                   y)
                                         loop x v
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "last_offset_index"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"lastOffsetIndex")
                                              y
                                              x)
                                           mutable'forwardingEvents
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'forwardingEvents
              in
              (do mutable'forwardingEvents <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'forwardingEvents)
                Data.ProtoLens.Encoding.Bytes.<?> "ForwardingHistoryResponse"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view
                     (Data.ProtoLens.Field.field @"vec'forwardingEvents")
                     _x))
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"lastOffsetIndex")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ForwardingHistoryResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_ForwardingHistoryResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_ForwardingHistoryResponse'forwardingEvents x__)
                    (Control.DeepSeq.deepseq
                       (_ForwardingHistoryResponse'lastOffsetIndex x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.aezeedPassphrase' @:: Lens' GenSeedRequest Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.seedEntropy' @:: Lens' GenSeedRequest Data.ByteString.ByteString@
 -}
data GenSeedRequest = GenSeedRequest{_GenSeedRequest'aezeedPassphrase
                                     :: !Data.ByteString.ByteString,
                                     _GenSeedRequest'seedEntropy :: !Data.ByteString.ByteString,
                                     _GenSeedRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
                        deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show GenSeedRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField GenSeedRequest
           "aezeedPassphrase"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GenSeedRequest'aezeedPassphrase
               (\ x__ y__ -> x__{_GenSeedRequest'aezeedPassphrase = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GenSeedRequest "seedEntropy"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GenSeedRequest'seedEntropy
               (\ x__ y__ -> x__{_GenSeedRequest'seedEntropy = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message GenSeedRequest where
        messageName _ = Data.Text.pack "lnrpc.GenSeedRequest"
        fieldsByTag
          = let aezeedPassphrase__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "aezeed_passphrase"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"aezeedPassphrase"))
                      :: Data.ProtoLens.FieldDescriptor GenSeedRequest
                seedEntropy__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "seed_entropy"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"seedEntropy"))
                      :: Data.ProtoLens.FieldDescriptor GenSeedRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, aezeedPassphrase__field_descriptor),
                 (Data.ProtoLens.Tag 2, seedEntropy__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _GenSeedRequest'_unknownFields
              (\ x__ y__ -> x__{_GenSeedRequest'_unknownFields = y__})
        defMessage
          = GenSeedRequest{_GenSeedRequest'aezeedPassphrase =
                             Data.ProtoLens.fieldDefault,
                           _GenSeedRequest'seedEntropy = Data.ProtoLens.fieldDefault,
                           _GenSeedRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     GenSeedRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser GenSeedRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "aezeed_passphrase"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"aezeedPassphrase")
                                              y
                                              x)
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "seed_entropy"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"seedEntropy")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "GenSeedRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view
                          (Data.ProtoLens.Field.field @"aezeedPassphrase")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"seedEntropy") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData GenSeedRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_GenSeedRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_GenSeedRequest'aezeedPassphrase x__)
                    (Control.DeepSeq.deepseq (_GenSeedRequest'seedEntropy x__) (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.cipherSeedMnemonic' @:: Lens' GenSeedResponse [Data.Text.Text]@
    * 'Proto.Rpc_Fields.vec'cipherSeedMnemonic' @:: Lens' GenSeedResponse (Data.Vector.Vector Data.Text.Text)@
    * 'Proto.Rpc_Fields.encipheredSeed' @:: Lens' GenSeedResponse Data.ByteString.ByteString@
 -}
data GenSeedResponse = GenSeedResponse{_GenSeedResponse'cipherSeedMnemonic
                                       :: !(Data.Vector.Vector Data.Text.Text),
                                       _GenSeedResponse'encipheredSeed ::
                                       !Data.ByteString.ByteString,
                                       _GenSeedResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
                         deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show GenSeedResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField GenSeedResponse
           "cipherSeedMnemonic"
           ([Data.Text.Text])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GenSeedResponse'cipherSeedMnemonic
               (\ x__ y__ -> x__{_GenSeedResponse'cipherSeedMnemonic = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField GenSeedResponse
           "vec'cipherSeedMnemonic"
           (Data.Vector.Vector Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GenSeedResponse'cipherSeedMnemonic
               (\ x__ y__ -> x__{_GenSeedResponse'cipherSeedMnemonic = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GenSeedResponse
           "encipheredSeed"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GenSeedResponse'encipheredSeed
               (\ x__ y__ -> x__{_GenSeedResponse'encipheredSeed = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message GenSeedResponse where
        messageName _ = Data.Text.pack "lnrpc.GenSeedResponse"
        fieldsByTag
          = let cipherSeedMnemonic__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "cipher_seed_mnemonic"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"cipherSeedMnemonic"))
                      :: Data.ProtoLens.FieldDescriptor GenSeedResponse
                encipheredSeed__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "enciphered_seed"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"encipheredSeed"))
                      :: Data.ProtoLens.FieldDescriptor GenSeedResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, cipherSeedMnemonic__field_descriptor),
                 (Data.ProtoLens.Tag 2, encipheredSeed__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _GenSeedResponse'_unknownFields
              (\ x__ y__ -> x__{_GenSeedResponse'_unknownFields = y__})
        defMessage
          = GenSeedResponse{_GenSeedResponse'cipherSeedMnemonic =
                              Data.Vector.Generic.empty,
                            _GenSeedResponse'encipheredSeed = Data.ProtoLens.fieldDefault,
                            _GenSeedResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     GenSeedResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Data.Text.Text
                         -> Data.ProtoLens.Encoding.Bytes.Parser GenSeedResponse
                loop x mutable'cipherSeedMnemonic
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'cipherSeedMnemonic <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                              mutable'cipherSeedMnemonic)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'cipherSeedMnemonic")
                                    frozen'cipherSeedMnemonic
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                               Data.ProtoLens.Encoding.Bytes.getBytes
                                                                 (Prelude.fromIntegral len)
                                                   Data.ProtoLens.Encoding.Bytes.runEither
                                                     (case Data.Text.Encoding.decodeUtf8' value of
                                                          Prelude.Left err -> Prelude.Left
                                                                                (Prelude.show err)
                                                          Prelude.Right r -> Prelude.Right r))
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "cipher_seed_mnemonic"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'cipherSeedMnemonic
                                                   y)
                                         loop x v
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "enciphered_seed"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"encipheredSeed")
                                              y
                                              x)
                                           mutable'cipherSeedMnemonic
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'cipherSeedMnemonic
              in
              (do mutable'cipherSeedMnemonic <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                  Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'cipherSeedMnemonic)
                Data.ProtoLens.Encoding.Bytes.<?> "GenSeedResponse"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.Text.Encoding.encodeUtf8)
                         _v)
                  (Lens.Family2.view
                     (Data.ProtoLens.Field.field @"vec'cipherSeedMnemonic")
                     _x))
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"encipheredSeed")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData GenSeedResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_GenSeedResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_GenSeedResponse'cipherSeedMnemonic x__)
                    (Control.DeepSeq.deepseq (_GenSeedResponse'encipheredSeed x__)
                       (()))))
{- | Fields :

 -}
data GetInfoRequest = GetInfoRequest{_GetInfoRequest'_unknownFields
                                     :: !Data.ProtoLens.FieldSet}
                        deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show GetInfoRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message GetInfoRequest where
        messageName _ = Data.Text.pack "lnrpc.GetInfoRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _GetInfoRequest'_unknownFields
              (\ x__ y__ -> x__{_GetInfoRequest'_unknownFields = y__})
        defMessage = GetInfoRequest{_GetInfoRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     GetInfoRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser GetInfoRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "GetInfoRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData GetInfoRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_GetInfoRequest'_unknownFields x__) (()))
{- | Fields :

    * 'Proto.Rpc_Fields.identityPubkey' @:: Lens' GetInfoResponse Data.Text.Text@
    * 'Proto.Rpc_Fields.alias' @:: Lens' GetInfoResponse Data.Text.Text@
    * 'Proto.Rpc_Fields.numPendingChannels' @:: Lens' GetInfoResponse Data.Word.Word32@
    * 'Proto.Rpc_Fields.numActiveChannels' @:: Lens' GetInfoResponse Data.Word.Word32@
    * 'Proto.Rpc_Fields.numPeers' @:: Lens' GetInfoResponse Data.Word.Word32@
    * 'Proto.Rpc_Fields.blockHeight' @:: Lens' GetInfoResponse Data.Word.Word32@
    * 'Proto.Rpc_Fields.blockHash' @:: Lens' GetInfoResponse Data.Text.Text@
    * 'Proto.Rpc_Fields.syncedToChain' @:: Lens' GetInfoResponse Prelude.Bool@
    * 'Proto.Rpc_Fields.testnet' @:: Lens' GetInfoResponse Prelude.Bool@
    * 'Proto.Rpc_Fields.uris' @:: Lens' GetInfoResponse [Data.Text.Text]@
    * 'Proto.Rpc_Fields.vec'uris' @:: Lens' GetInfoResponse (Data.Vector.Vector Data.Text.Text)@
    * 'Proto.Rpc_Fields.bestHeaderTimestamp' @:: Lens' GetInfoResponse Data.Int.Int64@
    * 'Proto.Rpc_Fields.version' @:: Lens' GetInfoResponse Data.Text.Text@
    * 'Proto.Rpc_Fields.numInactiveChannels' @:: Lens' GetInfoResponse Data.Word.Word32@
    * 'Proto.Rpc_Fields.chains' @:: Lens' GetInfoResponse [Chain]@
    * 'Proto.Rpc_Fields.vec'chains' @:: Lens' GetInfoResponse (Data.Vector.Vector Chain)@
 -}
data GetInfoResponse = GetInfoResponse{_GetInfoResponse'identityPubkey
                                       :: !Data.Text.Text,
                                       _GetInfoResponse'alias :: !Data.Text.Text,
                                       _GetInfoResponse'numPendingChannels :: !Data.Word.Word32,
                                       _GetInfoResponse'numActiveChannels :: !Data.Word.Word32,
                                       _GetInfoResponse'numPeers :: !Data.Word.Word32,
                                       _GetInfoResponse'blockHeight :: !Data.Word.Word32,
                                       _GetInfoResponse'blockHash :: !Data.Text.Text,
                                       _GetInfoResponse'syncedToChain :: !Prelude.Bool,
                                       _GetInfoResponse'testnet :: !Prelude.Bool,
                                       _GetInfoResponse'uris ::
                                       !(Data.Vector.Vector Data.Text.Text),
                                       _GetInfoResponse'bestHeaderTimestamp :: !Data.Int.Int64,
                                       _GetInfoResponse'version :: !Data.Text.Text,
                                       _GetInfoResponse'numInactiveChannels :: !Data.Word.Word32,
                                       _GetInfoResponse'chains :: !(Data.Vector.Vector Chain),
                                       _GetInfoResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
                         deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show GetInfoResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField GetInfoResponse
           "identityPubkey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'identityPubkey
               (\ x__ y__ -> x__{_GetInfoResponse'identityPubkey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse "alias"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'alias
               (\ x__ y__ -> x__{_GetInfoResponse'alias = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse
           "numPendingChannels"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'numPendingChannels
               (\ x__ y__ -> x__{_GetInfoResponse'numPendingChannels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse
           "numActiveChannels"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'numActiveChannels
               (\ x__ y__ -> x__{_GetInfoResponse'numActiveChannels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse "numPeers"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'numPeers
               (\ x__ y__ -> x__{_GetInfoResponse'numPeers = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse
           "blockHeight"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'blockHeight
               (\ x__ y__ -> x__{_GetInfoResponse'blockHeight = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse "blockHash"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'blockHash
               (\ x__ y__ -> x__{_GetInfoResponse'blockHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse
           "syncedToChain"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'syncedToChain
               (\ x__ y__ -> x__{_GetInfoResponse'syncedToChain = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse "testnet"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'testnet
               (\ x__ y__ -> x__{_GetInfoResponse'testnet = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse "uris"
           ([Data.Text.Text])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'uris
               (\ x__ y__ -> x__{_GetInfoResponse'uris = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField GetInfoResponse "vec'uris"
           (Data.Vector.Vector Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'uris
               (\ x__ y__ -> x__{_GetInfoResponse'uris = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse
           "bestHeaderTimestamp"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'bestHeaderTimestamp
               (\ x__ y__ -> x__{_GetInfoResponse'bestHeaderTimestamp = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse "version"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'version
               (\ x__ y__ -> x__{_GetInfoResponse'version = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse
           "numInactiveChannels"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'numInactiveChannels
               (\ x__ y__ -> x__{_GetInfoResponse'numInactiveChannels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GetInfoResponse "chains"
           ([Chain])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'chains
               (\ x__ y__ -> x__{_GetInfoResponse'chains = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField GetInfoResponse "vec'chains"
           (Data.Vector.Vector Chain)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GetInfoResponse'chains
               (\ x__ y__ -> x__{_GetInfoResponse'chains = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message GetInfoResponse where
        messageName _ = Data.Text.pack "lnrpc.GetInfoResponse"
        fieldsByTag
          = let identityPubkey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "identity_pubkey"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"identityPubkey"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                alias__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "alias"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"alias"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                numPendingChannels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_pending_channels"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numPendingChannels"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                numActiveChannels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_active_channels"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numActiveChannels"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                numPeers__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_peers"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numPeers"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                blockHeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "block_height"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"blockHeight"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                blockHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "block_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"blockHash"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                syncedToChain__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "synced_to_chain"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"syncedToChain"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                testnet__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "testnet"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"testnet"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                uris__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "uris"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"uris"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                bestHeaderTimestamp__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "best_header_timestamp"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"bestHeaderTimestamp"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                version__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "version"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"version"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                numInactiveChannels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_inactive_channels"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numInactiveChannels"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
                chains__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chains"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Chain)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"chains"))
                      :: Data.ProtoLens.FieldDescriptor GetInfoResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, identityPubkey__field_descriptor),
                 (Data.ProtoLens.Tag 2, alias__field_descriptor),
                 (Data.ProtoLens.Tag 3, numPendingChannels__field_descriptor),
                 (Data.ProtoLens.Tag 4, numActiveChannels__field_descriptor),
                 (Data.ProtoLens.Tag 5, numPeers__field_descriptor),
                 (Data.ProtoLens.Tag 6, blockHeight__field_descriptor),
                 (Data.ProtoLens.Tag 8, blockHash__field_descriptor),
                 (Data.ProtoLens.Tag 9, syncedToChain__field_descriptor),
                 (Data.ProtoLens.Tag 10, testnet__field_descriptor),
                 (Data.ProtoLens.Tag 12, uris__field_descriptor),
                 (Data.ProtoLens.Tag 13, bestHeaderTimestamp__field_descriptor),
                 (Data.ProtoLens.Tag 14, version__field_descriptor),
                 (Data.ProtoLens.Tag 15, numInactiveChannels__field_descriptor),
                 (Data.ProtoLens.Tag 16, chains__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _GetInfoResponse'_unknownFields
              (\ x__ y__ -> x__{_GetInfoResponse'_unknownFields = y__})
        defMessage
          = GetInfoResponse{_GetInfoResponse'identityPubkey =
                              Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'alias = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'numPendingChannels = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'numActiveChannels = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'numPeers = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'blockHeight = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'blockHash = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'syncedToChain = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'testnet = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'uris = Data.Vector.Generic.empty,
                            _GetInfoResponse'bestHeaderTimestamp = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'version = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'numInactiveChannels = Data.ProtoLens.fieldDefault,
                            _GetInfoResponse'chains = Data.Vector.Generic.empty,
                            _GetInfoResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     GetInfoResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Chain
                         ->
                         Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                           Data.ProtoLens.Encoding.Growing.RealWorld
                           Data.Text.Text
                           -> Data.ProtoLens.Encoding.Bytes.Parser GetInfoResponse
                loop x mutable'chains mutable'uris
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'chains <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                               (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                  mutable'chains)
                            frozen'uris <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'uris)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'chains")
                                    frozen'chains
                                    (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'uris")
                                       frozen'uris
                                       x)))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "identity_pubkey"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"identityPubkey")
                                              y
                                              x)
                                           mutable'chains
                                           mutable'uris
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "alias"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"alias") y
                                              x)
                                           mutable'chains
                                           mutable'uris
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "num_pending_channels"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numPendingChannels")
                                              y
                                              x)
                                           mutable'chains
                                           mutable'uris
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "num_active_channels"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numActiveChannels")
                                              y
                                              x)
                                           mutable'chains
                                           mutable'uris
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "num_peers"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numPeers")
                                              y
                                              x)
                                           mutable'chains
                                           mutable'uris
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "block_height"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"blockHeight")
                                              y
                                              x)
                                           mutable'chains
                                           mutable'uris
                                66 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "block_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"blockHash")
                                              y
                                              x)
                                           mutable'chains
                                           mutable'uris
                                72 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "synced_to_chain"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"syncedToChain")
                                              y
                                              x)
                                           mutable'chains
                                           mutable'uris
                                80 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "testnet"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"testnet")
                                              y
                                              x)
                                           mutable'chains
                                           mutable'uris
                                98 -> do !y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                               Data.ProtoLens.Encoding.Bytes.getBytes
                                                                 (Prelude.fromIntegral len)
                                                   Data.ProtoLens.Encoding.Bytes.runEither
                                                     (case Data.Text.Encoding.decodeUtf8' value of
                                                          Prelude.Left err -> Prelude.Left
                                                                                (Prelude.show err)
                                                          Prelude.Right r -> Prelude.Right r))
                                                 Data.ProtoLens.Encoding.Bytes.<?> "uris"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append mutable'uris
                                                   y)
                                         loop x mutable'chains v
                                104 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                  Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "best_header_timestamp"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"bestHeaderTimestamp")
                                               y
                                               x)
                                            mutable'chains
                                            mutable'uris
                                114 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                               Data.ProtoLens.Encoding.Bytes.getBytes
                                                                 (Prelude.fromIntegral len)
                                                   Data.ProtoLens.Encoding.Bytes.runEither
                                                     (case Data.Text.Encoding.decodeUtf8' value of
                                                          Prelude.Left err -> Prelude.Left
                                                                                (Prelude.show err)
                                                          Prelude.Right r -> Prelude.Right r))
                                                 Data.ProtoLens.Encoding.Bytes.<?> "version"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"version")
                                               y
                                               x)
                                            mutable'chains
                                            mutable'uris
                                120 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                  Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "num_inactive_channels"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"numInactiveChannels")
                                               y
                                               x)
                                            mutable'chains
                                            mutable'uris
                                130 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                    Data.ProtoLens.Encoding.Bytes.isolate
                                                      (Prelude.fromIntegral len)
                                                      Data.ProtoLens.parseMessage)
                                                  Data.ProtoLens.Encoding.Bytes.<?> "chains"
                                          v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.append
                                                    mutable'chains
                                                    y)
                                          loop x v mutable'uris
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'chains
                                             mutable'uris
              in
              (do mutable'chains <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
                  mutable'uris <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'chains mutable'uris)
                Data.ProtoLens.Encoding.Bytes.<?> "GetInfoResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"identityPubkey")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"alias") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view
                              (Data.ProtoLens.Field.field @"numPendingChannels")
                              _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view
                                (Data.ProtoLens.Field.field @"numActiveChannels")
                                _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"numPeers") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"blockHeight") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"blockHash") _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 66) Data.Monoid.<>
                                  (((\ bs ->
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                          (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                     Prelude.. Data.Text.Encoding.encodeUtf8)
                                    _v)
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view
                                        (Data.ProtoLens.Field.field @"syncedToChain")
                                        _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 72) Data.Monoid.<>
                                    ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                       (\ b -> if b then 1 else 0))
                                      _v)
                               Data.Monoid.<>
                               (let _v
                                      = Lens.Family2.view (Data.ProtoLens.Field.field @"testnet") _x
                                  in
                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                    Data.Monoid.mempty else
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 80) Data.Monoid.<>
                                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                         (\ b -> if b then 1 else 0))
                                        _v)
                                 Data.Monoid.<>
                                 (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                    (\ _v ->
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt 98) Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.Text.Encoding.encodeUtf8)
                                           _v)
                                    (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'uris") _x))
                                   Data.Monoid.<>
                                   (let _v
                                          = Lens.Family2.view
                                              (Data.ProtoLens.Field.field @"bestHeaderTimestamp")
                                              _x
                                      in
                                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                        Data.Monoid.mempty else
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 104) Data.Monoid.<>
                                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                             Prelude.fromIntegral)
                                            _v)
                                     Data.Monoid.<>
                                     (let _v
                                            = Lens.Family2.view
                                                (Data.ProtoLens.Field.field @"version")
                                                _x
                                        in
                                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                          Data.Monoid.mempty else
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt 114)
                                            Data.Monoid.<>
                                            (((\ bs ->
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                   Data.Monoid.<>
                                                   Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Prelude.. Data.Text.Encoding.encodeUtf8)
                                              _v)
                                       Data.Monoid.<>
                                       (let _v
                                              = Lens.Family2.view
                                                  (Data.ProtoLens.Field.field
                                                     @"numInactiveChannels")
                                                  _x
                                          in
                                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                            Data.Monoid.mempty else
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 120)
                                              Data.Monoid.<>
                                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                                 Prelude.fromIntegral)
                                                _v)
                                         Data.Monoid.<>
                                         (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                            (\ _v ->
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 130)
                                                 Data.Monoid.<>
                                                 (((\ bs ->
                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                         (Prelude.fromIntegral
                                                            (Data.ByteString.length bs)))
                                                        Data.Monoid.<>
                                                        Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                    Prelude.. Data.ProtoLens.encodeMessage)
                                                   _v)
                                            (Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"vec'chains")
                                               _x))
                                           Data.Monoid.<>
                                           Data.ProtoLens.Encoding.Wire.buildFieldSet
                                             (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData GetInfoResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_GetInfoResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_GetInfoResponse'identityPubkey x__)
                    (Control.DeepSeq.deepseq (_GetInfoResponse'alias x__)
                       (Control.DeepSeq.deepseq (_GetInfoResponse'numPendingChannels x__)
                          (Control.DeepSeq.deepseq (_GetInfoResponse'numActiveChannels x__)
                             (Control.DeepSeq.deepseq (_GetInfoResponse'numPeers x__)
                                (Control.DeepSeq.deepseq (_GetInfoResponse'blockHeight x__)
                                   (Control.DeepSeq.deepseq (_GetInfoResponse'blockHash x__)
                                      (Control.DeepSeq.deepseq (_GetInfoResponse'syncedToChain x__)
                                         (Control.DeepSeq.deepseq (_GetInfoResponse'testnet x__)
                                            (Control.DeepSeq.deepseq (_GetInfoResponse'uris x__)
                                               (Control.DeepSeq.deepseq
                                                  (_GetInfoResponse'bestHeaderTimestamp x__)
                                                  (Control.DeepSeq.deepseq
                                                     (_GetInfoResponse'version x__)
                                                     (Control.DeepSeq.deepseq
                                                        (_GetInfoResponse'numInactiveChannels x__)
                                                        (Control.DeepSeq.deepseq
                                                           (_GetInfoResponse'chains x__)
                                                           (()))))))))))))))))
{- | Fields :

 -}
data GetTransactionsRequest = GetTransactionsRequest{_GetTransactionsRequest'_unknownFields
                                                     :: !Data.ProtoLens.FieldSet}
                                deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show GetTransactionsRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message GetTransactionsRequest where
        messageName _ = Data.Text.pack "lnrpc.GetTransactionsRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _GetTransactionsRequest'_unknownFields
              (\ x__ y__ -> x__{_GetTransactionsRequest'_unknownFields = y__})
        defMessage
          = GetTransactionsRequest{_GetTransactionsRequest'_unknownFields =
                                     ([])}
        parseMessage
          = let loop ::
                     GetTransactionsRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser GetTransactionsRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "GetTransactionsRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData GetTransactionsRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_GetTransactionsRequest'_unknownFields x__)
                 (()))
{- | Fields :

 -}
data GraphTopologySubscription = GraphTopologySubscription{_GraphTopologySubscription'_unknownFields
                                                           :: !Data.ProtoLens.FieldSet}
                                   deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show GraphTopologySubscription where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message GraphTopologySubscription where
        messageName _ = Data.Text.pack "lnrpc.GraphTopologySubscription"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _GraphTopologySubscription'_unknownFields
              (\ x__ y__ -> x__{_GraphTopologySubscription'_unknownFields = y__})
        defMessage
          = GraphTopologySubscription{_GraphTopologySubscription'_unknownFields
                                        = ([])}
        parseMessage
          = let loop ::
                     GraphTopologySubscription ->
                       Data.ProtoLens.Encoding.Bytes.Parser GraphTopologySubscription
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "GraphTopologySubscription"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData GraphTopologySubscription where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_GraphTopologySubscription'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.nodeUpdates' @:: Lens' GraphTopologyUpdate [NodeUpdate]@
    * 'Proto.Rpc_Fields.vec'nodeUpdates' @:: Lens' GraphTopologyUpdate (Data.Vector.Vector NodeUpdate)@
    * 'Proto.Rpc_Fields.channelUpdates' @:: Lens' GraphTopologyUpdate [ChannelEdgeUpdate]@
    * 'Proto.Rpc_Fields.vec'channelUpdates' @:: Lens' GraphTopologyUpdate (Data.Vector.Vector ChannelEdgeUpdate)@
    * 'Proto.Rpc_Fields.closedChans' @:: Lens' GraphTopologyUpdate [ClosedChannelUpdate]@
    * 'Proto.Rpc_Fields.vec'closedChans' @:: Lens' GraphTopologyUpdate (Data.Vector.Vector ClosedChannelUpdate)@
 -}
data GraphTopologyUpdate = GraphTopologyUpdate{_GraphTopologyUpdate'nodeUpdates
                                               :: !(Data.Vector.Vector NodeUpdate),
                                               _GraphTopologyUpdate'channelUpdates ::
                                               !(Data.Vector.Vector ChannelEdgeUpdate),
                                               _GraphTopologyUpdate'closedChans ::
                                               !(Data.Vector.Vector ClosedChannelUpdate),
                                               _GraphTopologyUpdate'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show GraphTopologyUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField GraphTopologyUpdate
           "nodeUpdates"
           ([NodeUpdate])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GraphTopologyUpdate'nodeUpdates
               (\ x__ y__ -> x__{_GraphTopologyUpdate'nodeUpdates = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField GraphTopologyUpdate
           "vec'nodeUpdates"
           (Data.Vector.Vector NodeUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GraphTopologyUpdate'nodeUpdates
               (\ x__ y__ -> x__{_GraphTopologyUpdate'nodeUpdates = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GraphTopologyUpdate
           "channelUpdates"
           ([ChannelEdgeUpdate])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GraphTopologyUpdate'channelUpdates
               (\ x__ y__ -> x__{_GraphTopologyUpdate'channelUpdates = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField GraphTopologyUpdate
           "vec'channelUpdates"
           (Data.Vector.Vector ChannelEdgeUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GraphTopologyUpdate'channelUpdates
               (\ x__ y__ -> x__{_GraphTopologyUpdate'channelUpdates = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField GraphTopologyUpdate
           "closedChans"
           ([ClosedChannelUpdate])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GraphTopologyUpdate'closedChans
               (\ x__ y__ -> x__{_GraphTopologyUpdate'closedChans = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField GraphTopologyUpdate
           "vec'closedChans"
           (Data.Vector.Vector ClosedChannelUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _GraphTopologyUpdate'closedChans
               (\ x__ y__ -> x__{_GraphTopologyUpdate'closedChans = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message GraphTopologyUpdate where
        messageName _ = Data.Text.pack "lnrpc.GraphTopologyUpdate"
        fieldsByTag
          = let nodeUpdates__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "node_updates"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor NodeUpdate)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"nodeUpdates"))
                      :: Data.ProtoLens.FieldDescriptor GraphTopologyUpdate
                channelUpdates__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_updates"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelEdgeUpdate)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"channelUpdates"))
                      :: Data.ProtoLens.FieldDescriptor GraphTopologyUpdate
                closedChans__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "closed_chans"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ClosedChannelUpdate)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"closedChans"))
                      :: Data.ProtoLens.FieldDescriptor GraphTopologyUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, nodeUpdates__field_descriptor),
                 (Data.ProtoLens.Tag 2, channelUpdates__field_descriptor),
                 (Data.ProtoLens.Tag 3, closedChans__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _GraphTopologyUpdate'_unknownFields
              (\ x__ y__ -> x__{_GraphTopologyUpdate'_unknownFields = y__})
        defMessage
          = GraphTopologyUpdate{_GraphTopologyUpdate'nodeUpdates =
                                  Data.Vector.Generic.empty,
                                _GraphTopologyUpdate'channelUpdates = Data.Vector.Generic.empty,
                                _GraphTopologyUpdate'closedChans = Data.Vector.Generic.empty,
                                _GraphTopologyUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     GraphTopologyUpdate ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         ChannelEdgeUpdate
                         ->
                         Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                           Data.ProtoLens.Encoding.Growing.RealWorld
                           ClosedChannelUpdate
                           ->
                           Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                             Data.ProtoLens.Encoding.Growing.RealWorld
                             NodeUpdate
                             -> Data.ProtoLens.Encoding.Bytes.Parser GraphTopologyUpdate
                loop x mutable'channelUpdates mutable'closedChans
                  mutable'nodeUpdates
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'channelUpdates <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                          mutable'channelUpdates)
                            frozen'closedChans <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                    (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                       mutable'closedChans)
                            frozen'nodeUpdates <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                    (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                       mutable'nodeUpdates)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'channelUpdates")
                                    frozen'channelUpdates
                                    (Lens.Family2.set
                                       (Data.ProtoLens.Field.field @"vec'closedChans")
                                       frozen'closedChans
                                       (Lens.Family2.set
                                          (Data.ProtoLens.Field.field @"vec'nodeUpdates")
                                          frozen'nodeUpdates
                                          x))))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "node_updates"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'nodeUpdates
                                                   y)
                                         loop x mutable'channelUpdates mutable'closedChans v
                                18 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "channel_updates"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'channelUpdates
                                                   y)
                                         loop x v mutable'closedChans mutable'nodeUpdates
                                26 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "closed_chans"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'closedChans
                                                   y)
                                         loop x mutable'channelUpdates v mutable'nodeUpdates
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'channelUpdates
                                             mutable'closedChans
                                             mutable'nodeUpdates
              in
              (do mutable'channelUpdates <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              Data.ProtoLens.Encoding.Growing.new
                  mutable'closedChans <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           Data.ProtoLens.Encoding.Growing.new
                  mutable'nodeUpdates <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'channelUpdates
                    mutable'closedChans
                    mutable'nodeUpdates)
                Data.ProtoLens.Encoding.Bytes.<?> "GraphTopologyUpdate"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'nodeUpdates")
                     _x))
                 Data.Monoid.<>
                 (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                    (\ _v ->
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                         (((\ bs ->
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                            Prelude.. Data.ProtoLens.encodeMessage)
                           _v)
                    (Lens.Family2.view
                       (Data.ProtoLens.Field.field @"vec'channelUpdates")
                       _x))
                   Data.Monoid.<>
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                           (((\ bs ->
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Prelude.. Data.ProtoLens.encodeMessage)
                             _v)
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'closedChans")
                         _x))
                     Data.Monoid.<>
                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                       (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData GraphTopologyUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_GraphTopologyUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_GraphTopologyUpdate'nodeUpdates x__)
                    (Control.DeepSeq.deepseq (_GraphTopologyUpdate'channelUpdates x__)
                       (Control.DeepSeq.deepseq (_GraphTopologyUpdate'closedChans x__)
                          (())))))
{- | Fields :

    * 'Proto.Rpc_Fields.incoming' @:: Lens' HTLC Prelude.Bool@
    * 'Proto.Rpc_Fields.amount' @:: Lens' HTLC Data.Int.Int64@
    * 'Proto.Rpc_Fields.hashLock' @:: Lens' HTLC Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.expirationHeight' @:: Lens' HTLC Data.Word.Word32@
 -}
data HTLC = HTLC{_HTLC'incoming :: !Prelude.Bool,
                 _HTLC'amount :: !Data.Int.Int64,
                 _HTLC'hashLock :: !Data.ByteString.ByteString,
                 _HTLC'expirationHeight :: !Data.Word.Word32,
                 _HTLC'_unknownFields :: !Data.ProtoLens.FieldSet}
              deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show HTLC where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField HTLC "incoming"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _HTLC'incoming
               (\ x__ y__ -> x__{_HTLC'incoming = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField HTLC "amount"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _HTLC'amount
               (\ x__ y__ -> x__{_HTLC'amount = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField HTLC "hashLock"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _HTLC'hashLock
               (\ x__ y__ -> x__{_HTLC'hashLock = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField HTLC "expirationHeight"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _HTLC'expirationHeight
               (\ x__ y__ -> x__{_HTLC'expirationHeight = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message HTLC where
        messageName _ = Data.Text.pack "lnrpc.HTLC"
        fieldsByTag
          = let incoming__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "incoming"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"incoming"))
                      :: Data.ProtoLens.FieldDescriptor HTLC
                amount__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amount"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amount"))
                      :: Data.ProtoLens.FieldDescriptor HTLC
                hashLock__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "hash_lock"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"hashLock"))
                      :: Data.ProtoLens.FieldDescriptor HTLC
                expirationHeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "expiration_height"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"expirationHeight"))
                      :: Data.ProtoLens.FieldDescriptor HTLC
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, incoming__field_descriptor),
                 (Data.ProtoLens.Tag 2, amount__field_descriptor),
                 (Data.ProtoLens.Tag 3, hashLock__field_descriptor),
                 (Data.ProtoLens.Tag 4, expirationHeight__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _HTLC'_unknownFields
              (\ x__ y__ -> x__{_HTLC'_unknownFields = y__})
        defMessage
          = HTLC{_HTLC'incoming = Data.ProtoLens.fieldDefault,
                 _HTLC'amount = Data.ProtoLens.fieldDefault,
                 _HTLC'hashLock = Data.ProtoLens.fieldDefault,
                 _HTLC'expirationHeight = Data.ProtoLens.fieldDefault,
                 _HTLC'_unknownFields = ([])}
        parseMessage
          = let loop :: HTLC -> Data.ProtoLens.Encoding.Bytes.Parser HTLC
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "incoming"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"incoming")
                                             y
                                             x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "amount"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"amount")
                                              y
                                              x)
                                26 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "hash_lock"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"hashLock")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "expiration_height"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"expirationHeight")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "HTLC"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"incoming") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         (\ b -> if b then 1 else 0))
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"amount") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"hashLock") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                          (\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view
                                (Data.ProtoLens.Field.field @"expirationHeight")
                                _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData HTLC where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_HTLC'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_HTLC'incoming x__)
                    (Control.DeepSeq.deepseq (_HTLC'amount x__)
                       (Control.DeepSeq.deepseq (_HTLC'hashLock x__)
                          (Control.DeepSeq.deepseq (_HTLC'expirationHeight x__) (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.chanId' @:: Lens' Hop Data.Word.Word64@
    * 'Proto.Rpc_Fields.chanCapacity' @:: Lens' Hop Data.Int.Int64@
    * 'Proto.Rpc_Fields.amtToForward' @:: Lens' Hop Data.Int.Int64@
    * 'Proto.Rpc_Fields.fee' @:: Lens' Hop Data.Int.Int64@
    * 'Proto.Rpc_Fields.expiry' @:: Lens' Hop Data.Word.Word32@
    * 'Proto.Rpc_Fields.amtToForwardMsat' @:: Lens' Hop Data.Int.Int64@
    * 'Proto.Rpc_Fields.feeMsat' @:: Lens' Hop Data.Int.Int64@
    * 'Proto.Rpc_Fields.pubKey' @:: Lens' Hop Data.Text.Text@
 -}
data Hop = Hop{_Hop'chanId :: !Data.Word.Word64,
               _Hop'chanCapacity :: !Data.Int.Int64,
               _Hop'amtToForward :: !Data.Int.Int64, _Hop'fee :: !Data.Int.Int64,
               _Hop'expiry :: !Data.Word.Word32,
               _Hop'amtToForwardMsat :: !Data.Int.Int64,
               _Hop'feeMsat :: !Data.Int.Int64, _Hop'pubKey :: !Data.Text.Text,
               _Hop'_unknownFields :: !Data.ProtoLens.FieldSet}
             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Hop where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Hop "chanId"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Hop'chanId
               (\ x__ y__ -> x__{_Hop'chanId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Hop "chanCapacity"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Hop'chanCapacity
               (\ x__ y__ -> x__{_Hop'chanCapacity = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Hop "amtToForward"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Hop'amtToForward
               (\ x__ y__ -> x__{_Hop'amtToForward = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Hop "fee" (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Hop'fee
               (\ x__ y__ -> x__{_Hop'fee = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Hop "expiry"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Hop'expiry
               (\ x__ y__ -> x__{_Hop'expiry = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Hop "amtToForwardMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Hop'amtToForwardMsat
               (\ x__ y__ -> x__{_Hop'amtToForwardMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Hop "feeMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Hop'feeMsat
               (\ x__ y__ -> x__{_Hop'feeMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Hop "pubKey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Hop'pubKey
               (\ x__ y__ -> x__{_Hop'pubKey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message Hop where
        messageName _ = Data.Text.pack "lnrpc.Hop"
        fieldsByTag
          = let chanId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanId"))
                      :: Data.ProtoLens.FieldDescriptor Hop
                chanCapacity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_capacity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanCapacity"))
                      :: Data.ProtoLens.FieldDescriptor Hop
                amtToForward__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amt_to_forward"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amtToForward"))
                      :: Data.ProtoLens.FieldDescriptor Hop
                fee__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"fee"))
                      :: Data.ProtoLens.FieldDescriptor Hop
                expiry__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "expiry"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"expiry"))
                      :: Data.ProtoLens.FieldDescriptor Hop
                amtToForwardMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amt_to_forward_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amtToForwardMsat"))
                      :: Data.ProtoLens.FieldDescriptor Hop
                feeMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feeMsat"))
                      :: Data.ProtoLens.FieldDescriptor Hop
                pubKey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pub_key"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pubKey"))
                      :: Data.ProtoLens.FieldDescriptor Hop
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanId__field_descriptor),
                 (Data.ProtoLens.Tag 2, chanCapacity__field_descriptor),
                 (Data.ProtoLens.Tag 3, amtToForward__field_descriptor),
                 (Data.ProtoLens.Tag 4, fee__field_descriptor),
                 (Data.ProtoLens.Tag 5, expiry__field_descriptor),
                 (Data.ProtoLens.Tag 6, amtToForwardMsat__field_descriptor),
                 (Data.ProtoLens.Tag 7, feeMsat__field_descriptor),
                 (Data.ProtoLens.Tag 8, pubKey__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _Hop'_unknownFields
              (\ x__ y__ -> x__{_Hop'_unknownFields = y__})
        defMessage
          = Hop{_Hop'chanId = Data.ProtoLens.fieldDefault,
                _Hop'chanCapacity = Data.ProtoLens.fieldDefault,
                _Hop'amtToForward = Data.ProtoLens.fieldDefault,
                _Hop'fee = Data.ProtoLens.fieldDefault,
                _Hop'expiry = Data.ProtoLens.fieldDefault,
                _Hop'amtToForwardMsat = Data.ProtoLens.fieldDefault,
                _Hop'feeMsat = Data.ProtoLens.fieldDefault,
                _Hop'pubKey = Data.ProtoLens.fieldDefault,
                _Hop'_unknownFields = ([])}
        parseMessage
          = let loop :: Hop -> Data.ProtoLens.Encoding.Bytes.Parser Hop
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "chan_id"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"chanId") y
                                             x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_capacity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanCapacity")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "amt_to_forward"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"amtToForward")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"fee") y
                                              x)
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "expiry"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"expiry")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "amt_to_forward_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"amtToForwardMsat")
                                              y
                                              x)
                                56 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_msat"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"feeMsat")
                                              y
                                              x)
                                66 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "pub_key"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"pubKey")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "Hop"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"chanId") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"chanCapacity") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"amtToForward") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"fee") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"expiry") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view
                                    (Data.ProtoLens.Field.field @"amtToForwardMsat")
                                    _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"feeMsat") _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 56) Data.Monoid.<>
                                  ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                     Prelude.fromIntegral)
                                    _v)
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view (Data.ProtoLens.Field.field @"pubKey") _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 66) Data.Monoid.<>
                                    (((\ bs ->
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           Data.Monoid.<>
                                           Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                       Prelude.. Data.Text.Encoding.encodeUtf8)
                                      _v)
                               Data.Monoid.<>
                               Data.ProtoLens.Encoding.Wire.buildFieldSet
                                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData Hop where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_Hop'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_Hop'chanId x__)
                    (Control.DeepSeq.deepseq (_Hop'chanCapacity x__)
                       (Control.DeepSeq.deepseq (_Hop'amtToForward x__)
                          (Control.DeepSeq.deepseq (_Hop'fee x__)
                             (Control.DeepSeq.deepseq (_Hop'expiry x__)
                                (Control.DeepSeq.deepseq (_Hop'amtToForwardMsat x__)
                                   (Control.DeepSeq.deepseq (_Hop'feeMsat x__)
                                      (Control.DeepSeq.deepseq (_Hop'pubKey x__) (()))))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.nodeId' @:: Lens' HopHint Data.Text.Text@
    * 'Proto.Rpc_Fields.chanId' @:: Lens' HopHint Data.Word.Word64@
    * 'Proto.Rpc_Fields.feeBaseMsat' @:: Lens' HopHint Data.Word.Word32@
    * 'Proto.Rpc_Fields.feeProportionalMillionths' @:: Lens' HopHint Data.Word.Word32@
    * 'Proto.Rpc_Fields.cltvExpiryDelta' @:: Lens' HopHint Data.Word.Word32@
 -}
data HopHint = HopHint{_HopHint'nodeId :: !Data.Text.Text,
                       _HopHint'chanId :: !Data.Word.Word64,
                       _HopHint'feeBaseMsat :: !Data.Word.Word32,
                       _HopHint'feeProportionalMillionths :: !Data.Word.Word32,
                       _HopHint'cltvExpiryDelta :: !Data.Word.Word32,
                       _HopHint'_unknownFields :: !Data.ProtoLens.FieldSet}
                 deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show HopHint where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField HopHint "nodeId"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _HopHint'nodeId
               (\ x__ y__ -> x__{_HopHint'nodeId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField HopHint "chanId"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _HopHint'chanId
               (\ x__ y__ -> x__{_HopHint'chanId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField HopHint "feeBaseMsat"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _HopHint'feeBaseMsat
               (\ x__ y__ -> x__{_HopHint'feeBaseMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField HopHint
           "feeProportionalMillionths"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _HopHint'feeProportionalMillionths
               (\ x__ y__ -> x__{_HopHint'feeProportionalMillionths = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField HopHint "cltvExpiryDelta"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _HopHint'cltvExpiryDelta
               (\ x__ y__ -> x__{_HopHint'cltvExpiryDelta = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message HopHint where
        messageName _ = Data.Text.pack "lnrpc.HopHint"
        fieldsByTag
          = let nodeId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "node_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"nodeId"))
                      :: Data.ProtoLens.FieldDescriptor HopHint
                chanId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"chanId"))
                      :: Data.ProtoLens.FieldDescriptor HopHint
                feeBaseMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_base_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feeBaseMsat"))
                      :: Data.ProtoLens.FieldDescriptor HopHint
                feeProportionalMillionths__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_proportional_millionths"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feeProportionalMillionths"))
                      :: Data.ProtoLens.FieldDescriptor HopHint
                cltvExpiryDelta__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "cltv_expiry_delta"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"cltvExpiryDelta"))
                      :: Data.ProtoLens.FieldDescriptor HopHint
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, nodeId__field_descriptor),
                 (Data.ProtoLens.Tag 2, chanId__field_descriptor),
                 (Data.ProtoLens.Tag 3, feeBaseMsat__field_descriptor),
                 (Data.ProtoLens.Tag 4,
                  feeProportionalMillionths__field_descriptor),
                 (Data.ProtoLens.Tag 5, cltvExpiryDelta__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _HopHint'_unknownFields
              (\ x__ y__ -> x__{_HopHint'_unknownFields = y__})
        defMessage
          = HopHint{_HopHint'nodeId = Data.ProtoLens.fieldDefault,
                    _HopHint'chanId = Data.ProtoLens.fieldDefault,
                    _HopHint'feeBaseMsat = Data.ProtoLens.fieldDefault,
                    _HopHint'feeProportionalMillionths = Data.ProtoLens.fieldDefault,
                    _HopHint'cltvExpiryDelta = Data.ProtoLens.fieldDefault,
                    _HopHint'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     HopHint -> Data.ProtoLens.Encoding.Bytes.Parser HopHint
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "node_id"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"nodeId")
                                              y
                                              x)
                                16 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_id"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"chanId")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_base_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"feeBaseMsat")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "fee_proportional_millionths"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field
                                                 @"feeProportionalMillionths")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "cltv_expiry_delta"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"cltvExpiryDelta")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "HopHint"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"nodeId") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"chanId") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"feeBaseMsat") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view
                                (Data.ProtoLens.Field.field @"feeProportionalMillionths")
                                _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"cltvExpiryDelta")
                                  _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         Data.ProtoLens.Encoding.Wire.buildFieldSet
                           (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData HopHint where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_HopHint'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_HopHint'nodeId x__)
                    (Control.DeepSeq.deepseq (_HopHint'chanId x__)
                       (Control.DeepSeq.deepseq (_HopHint'feeBaseMsat x__)
                          (Control.DeepSeq.deepseq (_HopHint'feeProportionalMillionths x__)
                             (Control.DeepSeq.deepseq (_HopHint'cltvExpiryDelta x__) (())))))))
{- | Fields :

    * 'Proto.Rpc_Fields.walletPassword' @:: Lens' InitWalletRequest Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.cipherSeedMnemonic' @:: Lens' InitWalletRequest [Data.Text.Text]@
    * 'Proto.Rpc_Fields.vec'cipherSeedMnemonic' @:: Lens' InitWalletRequest (Data.Vector.Vector Data.Text.Text)@
    * 'Proto.Rpc_Fields.aezeedPassphrase' @:: Lens' InitWalletRequest Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.recoveryWindow' @:: Lens' InitWalletRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.channelBackups' @:: Lens' InitWalletRequest ChanBackupSnapshot@
    * 'Proto.Rpc_Fields.maybe'channelBackups' @:: Lens' InitWalletRequest (Prelude.Maybe ChanBackupSnapshot)@
 -}
data InitWalletRequest = InitWalletRequest{_InitWalletRequest'walletPassword
                                           :: !Data.ByteString.ByteString,
                                           _InitWalletRequest'cipherSeedMnemonic ::
                                           !(Data.Vector.Vector Data.Text.Text),
                                           _InitWalletRequest'aezeedPassphrase ::
                                           !Data.ByteString.ByteString,
                                           _InitWalletRequest'recoveryWindow :: !Data.Int.Int32,
                                           _InitWalletRequest'channelBackups ::
                                           !(Prelude.Maybe ChanBackupSnapshot),
                                           _InitWalletRequest'_unknownFields ::
                                           !Data.ProtoLens.FieldSet}
                           deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show InitWalletRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField InitWalletRequest
           "walletPassword"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _InitWalletRequest'walletPassword
               (\ x__ y__ -> x__{_InitWalletRequest'walletPassword = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField InitWalletRequest
           "cipherSeedMnemonic"
           ([Data.Text.Text])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _InitWalletRequest'cipherSeedMnemonic
               (\ x__ y__ -> x__{_InitWalletRequest'cipherSeedMnemonic = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField InitWalletRequest
           "vec'cipherSeedMnemonic"
           (Data.Vector.Vector Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _InitWalletRequest'cipherSeedMnemonic
               (\ x__ y__ -> x__{_InitWalletRequest'cipherSeedMnemonic = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField InitWalletRequest
           "aezeedPassphrase"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _InitWalletRequest'aezeedPassphrase
               (\ x__ y__ -> x__{_InitWalletRequest'aezeedPassphrase = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField InitWalletRequest
           "recoveryWindow"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _InitWalletRequest'recoveryWindow
               (\ x__ y__ -> x__{_InitWalletRequest'recoveryWindow = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField InitWalletRequest
           "channelBackups"
           (ChanBackupSnapshot)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _InitWalletRequest'channelBackups
               (\ x__ y__ -> x__{_InitWalletRequest'channelBackups = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField InitWalletRequest
           "maybe'channelBackups"
           (Prelude.Maybe ChanBackupSnapshot)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _InitWalletRequest'channelBackups
               (\ x__ y__ -> x__{_InitWalletRequest'channelBackups = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message InitWalletRequest where
        messageName _ = Data.Text.pack "lnrpc.InitWalletRequest"
        fieldsByTag
          = let walletPassword__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "wallet_password"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"walletPassword"))
                      :: Data.ProtoLens.FieldDescriptor InitWalletRequest
                cipherSeedMnemonic__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "cipher_seed_mnemonic"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"cipherSeedMnemonic"))
                      :: Data.ProtoLens.FieldDescriptor InitWalletRequest
                aezeedPassphrase__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "aezeed_passphrase"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"aezeedPassphrase"))
                      :: Data.ProtoLens.FieldDescriptor InitWalletRequest
                recoveryWindow__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "recovery_window"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"recoveryWindow"))
                      :: Data.ProtoLens.FieldDescriptor InitWalletRequest
                channelBackups__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_backups"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChanBackupSnapshot)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'channelBackups"))
                      :: Data.ProtoLens.FieldDescriptor InitWalletRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, walletPassword__field_descriptor),
                 (Data.ProtoLens.Tag 2, cipherSeedMnemonic__field_descriptor),
                 (Data.ProtoLens.Tag 3, aezeedPassphrase__field_descriptor),
                 (Data.ProtoLens.Tag 4, recoveryWindow__field_descriptor),
                 (Data.ProtoLens.Tag 5, channelBackups__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _InitWalletRequest'_unknownFields
              (\ x__ y__ -> x__{_InitWalletRequest'_unknownFields = y__})
        defMessage
          = InitWalletRequest{_InitWalletRequest'walletPassword =
                                Data.ProtoLens.fieldDefault,
                              _InitWalletRequest'cipherSeedMnemonic = Data.Vector.Generic.empty,
                              _InitWalletRequest'aezeedPassphrase = Data.ProtoLens.fieldDefault,
                              _InitWalletRequest'recoveryWindow = Data.ProtoLens.fieldDefault,
                              _InitWalletRequest'channelBackups = Prelude.Nothing,
                              _InitWalletRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     InitWalletRequest ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Data.Text.Text
                         -> Data.ProtoLens.Encoding.Bytes.Parser InitWalletRequest
                loop x mutable'cipherSeedMnemonic
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'cipherSeedMnemonic <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                              mutable'cipherSeedMnemonic)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'cipherSeedMnemonic")
                                    frozen'cipherSeedMnemonic
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "wallet_password"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"walletPassword")
                                              y
                                              x)
                                           mutable'cipherSeedMnemonic
                                18 -> do !y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                               Data.ProtoLens.Encoding.Bytes.getBytes
                                                                 (Prelude.fromIntegral len)
                                                   Data.ProtoLens.Encoding.Bytes.runEither
                                                     (case Data.Text.Encoding.decodeUtf8' value of
                                                          Prelude.Left err -> Prelude.Left
                                                                                (Prelude.show err)
                                                          Prelude.Right r -> Prelude.Right r))
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "cipher_seed_mnemonic"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'cipherSeedMnemonic
                                                   y)
                                         loop x v
                                26 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "aezeed_passphrase"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"aezeedPassphrase")
                                              y
                                              x)
                                           mutable'cipherSeedMnemonic
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "recovery_window"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"recoveryWindow")
                                              y
                                              x)
                                           mutable'cipherSeedMnemonic
                                42 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel_backups"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"channelBackups")
                                              y
                                              x)
                                           mutable'cipherSeedMnemonic
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'cipherSeedMnemonic
              in
              (do mutable'cipherSeedMnemonic <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                  Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'cipherSeedMnemonic)
                Data.ProtoLens.Encoding.Bytes.<?> "InitWalletRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"walletPassword")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                    (\ _v ->
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                         (((\ bs ->
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                            Prelude.. Data.Text.Encoding.encodeUtf8)
                           _v)
                    (Lens.Family2.view
                       (Data.ProtoLens.Field.field @"vec'cipherSeedMnemonic")
                       _x))
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view
                              (Data.ProtoLens.Field.field @"aezeedPassphrase")
                              _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                          (\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"recoveryWindow")
                                _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (case
                          Lens.Family2.view
                            (Data.ProtoLens.Field.field @"maybe'channelBackups")
                            _x
                          of
                            (Prelude.Nothing) -> Data.Monoid.mempty
                            Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                                 Data.Monoid.<>
                                                 (((\ bs ->
                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                         (Prelude.fromIntegral
                                                            (Data.ByteString.length bs)))
                                                        Data.Monoid.<>
                                                        Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                    Prelude.. Data.ProtoLens.encodeMessage)
                                                   _v)
                         Data.Monoid.<>
                         Data.ProtoLens.Encoding.Wire.buildFieldSet
                           (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData InitWalletRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_InitWalletRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_InitWalletRequest'walletPassword x__)
                    (Control.DeepSeq.deepseq
                       (_InitWalletRequest'cipherSeedMnemonic x__)
                       (Control.DeepSeq.deepseq (_InitWalletRequest'aezeedPassphrase x__)
                          (Control.DeepSeq.deepseq (_InitWalletRequest'recoveryWindow x__)
                             (Control.DeepSeq.deepseq (_InitWalletRequest'channelBackups x__)
                                (())))))))
{- | Fields :

 -}
data InitWalletResponse = InitWalletResponse{_InitWalletResponse'_unknownFields
                                             :: !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show InitWalletResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message InitWalletResponse where
        messageName _ = Data.Text.pack "lnrpc.InitWalletResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _InitWalletResponse'_unknownFields
              (\ x__ y__ -> x__{_InitWalletResponse'_unknownFields = y__})
        defMessage
          = InitWalletResponse{_InitWalletResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     InitWalletResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser InitWalletResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "InitWalletResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData InitWalletResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_InitWalletResponse'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.memo' @:: Lens' Invoice Data.Text.Text@
    * 'Proto.Rpc_Fields.receipt' @:: Lens' Invoice Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.rPreimage' @:: Lens' Invoice Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.rHash' @:: Lens' Invoice Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.value' @:: Lens' Invoice Data.Int.Int64@
    * 'Proto.Rpc_Fields.settled' @:: Lens' Invoice Prelude.Bool@
    * 'Proto.Rpc_Fields.creationDate' @:: Lens' Invoice Data.Int.Int64@
    * 'Proto.Rpc_Fields.settleDate' @:: Lens' Invoice Data.Int.Int64@
    * 'Proto.Rpc_Fields.paymentRequest' @:: Lens' Invoice Data.Text.Text@
    * 'Proto.Rpc_Fields.descriptionHash' @:: Lens' Invoice Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.expiry' @:: Lens' Invoice Data.Int.Int64@
    * 'Proto.Rpc_Fields.fallbackAddr' @:: Lens' Invoice Data.Text.Text@
    * 'Proto.Rpc_Fields.cltvExpiry' @:: Lens' Invoice Data.Word.Word64@
    * 'Proto.Rpc_Fields.routeHints' @:: Lens' Invoice [RouteHint]@
    * 'Proto.Rpc_Fields.vec'routeHints' @:: Lens' Invoice (Data.Vector.Vector RouteHint)@
    * 'Proto.Rpc_Fields.private' @:: Lens' Invoice Prelude.Bool@
    * 'Proto.Rpc_Fields.addIndex' @:: Lens' Invoice Data.Word.Word64@
    * 'Proto.Rpc_Fields.settleIndex' @:: Lens' Invoice Data.Word.Word64@
    * 'Proto.Rpc_Fields.amtPaid' @:: Lens' Invoice Data.Int.Int64@
    * 'Proto.Rpc_Fields.amtPaidSat' @:: Lens' Invoice Data.Int.Int64@
    * 'Proto.Rpc_Fields.amtPaidMsat' @:: Lens' Invoice Data.Int.Int64@
    * 'Proto.Rpc_Fields.state' @:: Lens' Invoice Invoice'InvoiceState@
 -}
data Invoice = Invoice{_Invoice'memo :: !Data.Text.Text,
                       _Invoice'receipt :: !Data.ByteString.ByteString,
                       _Invoice'rPreimage :: !Data.ByteString.ByteString,
                       _Invoice'rHash :: !Data.ByteString.ByteString,
                       _Invoice'value :: !Data.Int.Int64,
                       _Invoice'settled :: !Prelude.Bool,
                       _Invoice'creationDate :: !Data.Int.Int64,
                       _Invoice'settleDate :: !Data.Int.Int64,
                       _Invoice'paymentRequest :: !Data.Text.Text,
                       _Invoice'descriptionHash :: !Data.ByteString.ByteString,
                       _Invoice'expiry :: !Data.Int.Int64,
                       _Invoice'fallbackAddr :: !Data.Text.Text,
                       _Invoice'cltvExpiry :: !Data.Word.Word64,
                       _Invoice'routeHints :: !(Data.Vector.Vector RouteHint),
                       _Invoice'private :: !Prelude.Bool,
                       _Invoice'addIndex :: !Data.Word.Word64,
                       _Invoice'settleIndex :: !Data.Word.Word64,
                       _Invoice'amtPaid :: !Data.Int.Int64,
                       _Invoice'amtPaidSat :: !Data.Int.Int64,
                       _Invoice'amtPaidMsat :: !Data.Int.Int64,
                       _Invoice'state :: !Invoice'InvoiceState,
                       _Invoice'_unknownFields :: !Data.ProtoLens.FieldSet}
                 deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Invoice where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Invoice "memo"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'memo
               (\ x__ y__ -> x__{_Invoice'memo = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "receipt"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'receipt
               (\ x__ y__ -> x__{_Invoice'receipt = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "rPreimage"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'rPreimage
               (\ x__ y__ -> x__{_Invoice'rPreimage = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "rHash"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'rHash
               (\ x__ y__ -> x__{_Invoice'rHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "value"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'value
               (\ x__ y__ -> x__{_Invoice'value = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "settled"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'settled
               (\ x__ y__ -> x__{_Invoice'settled = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "creationDate"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'creationDate
               (\ x__ y__ -> x__{_Invoice'creationDate = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "settleDate"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'settleDate
               (\ x__ y__ -> x__{_Invoice'settleDate = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "paymentRequest"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'paymentRequest
               (\ x__ y__ -> x__{_Invoice'paymentRequest = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "descriptionHash"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'descriptionHash
               (\ x__ y__ -> x__{_Invoice'descriptionHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "expiry"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'expiry
               (\ x__ y__ -> x__{_Invoice'expiry = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "fallbackAddr"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'fallbackAddr
               (\ x__ y__ -> x__{_Invoice'fallbackAddr = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "cltvExpiry"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'cltvExpiry
               (\ x__ y__ -> x__{_Invoice'cltvExpiry = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "routeHints"
           ([RouteHint])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'routeHints
               (\ x__ y__ -> x__{_Invoice'routeHints = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField Invoice "vec'routeHints"
           (Data.Vector.Vector RouteHint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'routeHints
               (\ x__ y__ -> x__{_Invoice'routeHints = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "private"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'private
               (\ x__ y__ -> x__{_Invoice'private = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "addIndex"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'addIndex
               (\ x__ y__ -> x__{_Invoice'addIndex = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "settleIndex"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'settleIndex
               (\ x__ y__ -> x__{_Invoice'settleIndex = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "amtPaid"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'amtPaid
               (\ x__ y__ -> x__{_Invoice'amtPaid = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "amtPaidSat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'amtPaidSat
               (\ x__ y__ -> x__{_Invoice'amtPaidSat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "amtPaidMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'amtPaidMsat
               (\ x__ y__ -> x__{_Invoice'amtPaidMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Invoice "state"
           (Invoice'InvoiceState)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Invoice'state
               (\ x__ y__ -> x__{_Invoice'state = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message Invoice where
        messageName _ = Data.Text.pack "lnrpc.Invoice"
        fieldsByTag
          = let memo__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "memo"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"memo"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                receipt__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "receipt"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"receipt"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                rPreimage__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "r_preimage"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"rPreimage"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                rHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "r_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"rHash"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                value__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "value"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"value"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                settled__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "settled"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"settled"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                creationDate__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "creation_date"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"creationDate"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                settleDate__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "settle_date"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"settleDate"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                paymentRequest__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_request"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentRequest"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                descriptionHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "description_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"descriptionHash"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                expiry__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "expiry"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"expiry"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                fallbackAddr__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fallback_addr"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"fallbackAddr"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                cltvExpiry__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "cltv_expiry"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"cltvExpiry"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                routeHints__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "route_hints"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor RouteHint)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"routeHints"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                private__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "private"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"private"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                addIndex__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "add_index"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"addIndex"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                settleIndex__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "settle_index"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"settleIndex"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                amtPaid__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amt_paid"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amtPaid"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                amtPaidSat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amt_paid_sat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amtPaidSat"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                amtPaidMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amt_paid_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amtPaidMsat"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
                state__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "state"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                         Data.ProtoLens.FieldTypeDescriptor Invoice'InvoiceState)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"state"))
                      :: Data.ProtoLens.FieldDescriptor Invoice
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, memo__field_descriptor),
                 (Data.ProtoLens.Tag 2, receipt__field_descriptor),
                 (Data.ProtoLens.Tag 3, rPreimage__field_descriptor),
                 (Data.ProtoLens.Tag 4, rHash__field_descriptor),
                 (Data.ProtoLens.Tag 5, value__field_descriptor),
                 (Data.ProtoLens.Tag 6, settled__field_descriptor),
                 (Data.ProtoLens.Tag 7, creationDate__field_descriptor),
                 (Data.ProtoLens.Tag 8, settleDate__field_descriptor),
                 (Data.ProtoLens.Tag 9, paymentRequest__field_descriptor),
                 (Data.ProtoLens.Tag 10, descriptionHash__field_descriptor),
                 (Data.ProtoLens.Tag 11, expiry__field_descriptor),
                 (Data.ProtoLens.Tag 12, fallbackAddr__field_descriptor),
                 (Data.ProtoLens.Tag 13, cltvExpiry__field_descriptor),
                 (Data.ProtoLens.Tag 14, routeHints__field_descriptor),
                 (Data.ProtoLens.Tag 15, private__field_descriptor),
                 (Data.ProtoLens.Tag 16, addIndex__field_descriptor),
                 (Data.ProtoLens.Tag 17, settleIndex__field_descriptor),
                 (Data.ProtoLens.Tag 18, amtPaid__field_descriptor),
                 (Data.ProtoLens.Tag 19, amtPaidSat__field_descriptor),
                 (Data.ProtoLens.Tag 20, amtPaidMsat__field_descriptor),
                 (Data.ProtoLens.Tag 21, state__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _Invoice'_unknownFields
              (\ x__ y__ -> x__{_Invoice'_unknownFields = y__})
        defMessage
          = Invoice{_Invoice'memo = Data.ProtoLens.fieldDefault,
                    _Invoice'receipt = Data.ProtoLens.fieldDefault,
                    _Invoice'rPreimage = Data.ProtoLens.fieldDefault,
                    _Invoice'rHash = Data.ProtoLens.fieldDefault,
                    _Invoice'value = Data.ProtoLens.fieldDefault,
                    _Invoice'settled = Data.ProtoLens.fieldDefault,
                    _Invoice'creationDate = Data.ProtoLens.fieldDefault,
                    _Invoice'settleDate = Data.ProtoLens.fieldDefault,
                    _Invoice'paymentRequest = Data.ProtoLens.fieldDefault,
                    _Invoice'descriptionHash = Data.ProtoLens.fieldDefault,
                    _Invoice'expiry = Data.ProtoLens.fieldDefault,
                    _Invoice'fallbackAddr = Data.ProtoLens.fieldDefault,
                    _Invoice'cltvExpiry = Data.ProtoLens.fieldDefault,
                    _Invoice'routeHints = Data.Vector.Generic.empty,
                    _Invoice'private = Data.ProtoLens.fieldDefault,
                    _Invoice'addIndex = Data.ProtoLens.fieldDefault,
                    _Invoice'settleIndex = Data.ProtoLens.fieldDefault,
                    _Invoice'amtPaid = Data.ProtoLens.fieldDefault,
                    _Invoice'amtPaidSat = Data.ProtoLens.fieldDefault,
                    _Invoice'amtPaidMsat = Data.ProtoLens.fieldDefault,
                    _Invoice'state = Data.ProtoLens.fieldDefault,
                    _Invoice'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     Invoice ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         RouteHint
                         -> Data.ProtoLens.Encoding.Bytes.Parser Invoice
                loop x mutable'routeHints
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'routeHints <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                   (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                      mutable'routeHints)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'routeHints")
                                    frozen'routeHints
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "memo"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"memo") y
                                              x)
                                           mutable'routeHints
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "receipt"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"receipt")
                                              y
                                              x)
                                           mutable'routeHints
                                26 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "r_preimage"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"rPreimage")
                                              y
                                              x)
                                           mutable'routeHints
                                34 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "r_hash"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"rHash") y
                                              x)
                                           mutable'routeHints
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "value"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y
                                              x)
                                           mutable'routeHints
                                48 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "settled"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"settled")
                                              y
                                              x)
                                           mutable'routeHints
                                56 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "creation_date"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"creationDate")
                                              y
                                              x)
                                           mutable'routeHints
                                64 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "settle_date"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"settleDate")
                                              y
                                              x)
                                           mutable'routeHints
                                74 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_request"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentRequest")
                                              y
                                              x)
                                           mutable'routeHints
                                82 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "description_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"descriptionHash")
                                              y
                                              x)
                                           mutable'routeHints
                                88 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "expiry"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"expiry")
                                              y
                                              x)
                                           mutable'routeHints
                                98 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "fallback_addr"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"fallbackAddr")
                                              y
                                              x)
                                           mutable'routeHints
                                104 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "cltv_expiry"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"cltvExpiry")
                                               y
                                               x)
                                            mutable'routeHints
                                114 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                    Data.ProtoLens.Encoding.Bytes.isolate
                                                      (Prelude.fromIntegral len)
                                                      Data.ProtoLens.parseMessage)
                                                  Data.ProtoLens.Encoding.Bytes.<?> "route_hints"
                                          v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.append
                                                    mutable'routeHints
                                                    y)
                                          loop x v
                                120 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                  Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "private"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"private")
                                               y
                                               x)
                                            mutable'routeHints
                                128 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "add_index"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"addIndex")
                                               y
                                               x)
                                            mutable'routeHints
                                136 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "settle_index"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"settleIndex")
                                               y
                                               x)
                                            mutable'routeHints
                                144 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                  Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "amt_paid"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"amtPaid")
                                               y
                                               x)
                                            mutable'routeHints
                                152 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                  Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "amt_paid_sat"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"amtPaidSat")
                                               y
                                               x)
                                            mutable'routeHints
                                160 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                  Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "amt_paid_msat"
                                          loop
                                            (Lens.Family2.set
                                               (Data.ProtoLens.Field.field @"amtPaidMsat")
                                               y
                                               x)
                                            mutable'routeHints
                                168 -> do y <- (Prelude.fmap Prelude.toEnum
                                                  (Prelude.fmap Prelude.fromIntegral
                                                     Data.ProtoLens.Encoding.Bytes.getVarInt))
                                                 Data.ProtoLens.Encoding.Bytes.<?> "state"
                                          loop
                                            (Lens.Family2.set (Data.ProtoLens.Field.field @"state")
                                               y
                                               x)
                                            mutable'routeHints
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'routeHints
              in
              (do mutable'routeHints <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'routeHints)
                Data.ProtoLens.Encoding.Bytes.<?> "Invoice"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"memo") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"receipt") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"rPreimage") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                          (\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"rHash") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                            (\ bs ->
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"value") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"settled") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   (\ b -> if b then 1 else 0))
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"creationDate")
                                      _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 56) Data.Monoid.<>
                                  ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                     Prelude.fromIntegral)
                                    _v)
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view (Data.ProtoLens.Field.field @"settleDate")
                                        _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 64) Data.Monoid.<>
                                    ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                       Prelude.fromIntegral)
                                      _v)
                               Data.Monoid.<>
                               (let _v
                                      = Lens.Family2.view
                                          (Data.ProtoLens.Field.field @"paymentRequest")
                                          _x
                                  in
                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                    Data.Monoid.mempty else
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 74) Data.Monoid.<>
                                      (((\ bs ->
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                             Data.Monoid.<>
                                             Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Prelude.. Data.Text.Encoding.encodeUtf8)
                                        _v)
                                 Data.Monoid.<>
                                 (let _v
                                        = Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"descriptionHash")
                                            _x
                                    in
                                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                      Data.Monoid.mempty else
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 82) Data.Monoid.<>
                                        (\ bs ->
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                             Data.Monoid.<>
                                             Data.ProtoLens.Encoding.Bytes.putBytes bs)
                                          _v)
                                   Data.Monoid.<>
                                   (let _v
                                          = Lens.Family2.view (Data.ProtoLens.Field.field @"expiry")
                                              _x
                                      in
                                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                        Data.Monoid.mempty else
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 88) Data.Monoid.<>
                                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                             Prelude.fromIntegral)
                                            _v)
                                     Data.Monoid.<>
                                     (let _v
                                            = Lens.Family2.view
                                                (Data.ProtoLens.Field.field @"fallbackAddr")
                                                _x
                                        in
                                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                          Data.Monoid.mempty else
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt 98)
                                            Data.Monoid.<>
                                            (((\ bs ->
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                   Data.Monoid.<>
                                                   Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Prelude.. Data.Text.Encoding.encodeUtf8)
                                              _v)
                                       Data.Monoid.<>
                                       (let _v
                                              = Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"cltvExpiry")
                                                  _x
                                          in
                                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                            Data.Monoid.mempty else
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 104)
                                              Data.Monoid.<>
                                              Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                                         Data.Monoid.<>
                                         (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                            (\ _v ->
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 114)
                                                 Data.Monoid.<>
                                                 (((\ bs ->
                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                         (Prelude.fromIntegral
                                                            (Data.ByteString.length bs)))
                                                        Data.Monoid.<>
                                                        Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                    Prelude.. Data.ProtoLens.encodeMessage)
                                                   _v)
                                            (Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"vec'routeHints")
                                               _x))
                                           Data.Monoid.<>
                                           (let _v
                                                  = Lens.Family2.view
                                                      (Data.ProtoLens.Field.field @"private")
                                                      _x
                                              in
                                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                                Data.Monoid.mempty else
                                                (Data.ProtoLens.Encoding.Bytes.putVarInt 120)
                                                  Data.Monoid.<>
                                                  ((Data.ProtoLens.Encoding.Bytes.putVarInt)
                                                     Prelude.. (\ b -> if b then 1 else 0))
                                                    _v)
                                             Data.Monoid.<>
                                             (let _v
                                                    = Lens.Family2.view
                                                        (Data.ProtoLens.Field.field @"addIndex")
                                                        _x
                                                in
                                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                                  Data.Monoid.mempty else
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 128)
                                                    Data.Monoid.<>
                                                    Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                                               Data.Monoid.<>
                                               (let _v
                                                      = Lens.Family2.view
                                                          (Data.ProtoLens.Field.field
                                                             @"settleIndex")
                                                          _x
                                                  in
                                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault
                                                    then Data.Monoid.mempty else
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 136)
                                                      Data.Monoid.<>
                                                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                                                 Data.Monoid.<>
                                                 (let _v
                                                        = Lens.Family2.view
                                                            (Data.ProtoLens.Field.field @"amtPaid")
                                                            _x
                                                    in
                                                    if (_v) Prelude.== Data.ProtoLens.fieldDefault
                                                      then Data.Monoid.mempty else
                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 144)
                                                        Data.Monoid.<>
                                                        ((Data.ProtoLens.Encoding.Bytes.putVarInt)
                                                           Prelude.. Prelude.fromIntegral)
                                                          _v)
                                                   Data.Monoid.<>
                                                   (let _v
                                                          = Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"amtPaidSat")
                                                              _x
                                                      in
                                                      if (_v) Prelude.== Data.ProtoLens.fieldDefault
                                                        then Data.Monoid.mempty else
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           152)
                                                          Data.Monoid.<>
                                                          ((Data.ProtoLens.Encoding.Bytes.putVarInt)
                                                             Prelude.. Prelude.fromIntegral)
                                                            _v)
                                                     Data.Monoid.<>
                                                     (let _v
                                                            = Lens.Family2.view
                                                                (Data.ProtoLens.Field.field
                                                                   @"amtPaidMsat")
                                                                _x
                                                        in
                                                        if
                                                          (_v) Prelude.==
                                                            Data.ProtoLens.fieldDefault
                                                          then Data.Monoid.mempty else
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             160)
                                                            Data.Monoid.<>
                                                            ((Data.ProtoLens.Encoding.Bytes.putVarInt)
                                                               Prelude.. Prelude.fromIntegral)
                                                              _v)
                                                       Data.Monoid.<>
                                                       (let _v
                                                              = Lens.Family2.view
                                                                  (Data.ProtoLens.Field.field
                                                                     @"state")
                                                                  _x
                                                          in
                                                          if
                                                            (_v) Prelude.==
                                                              Data.ProtoLens.fieldDefault
                                                            then Data.Monoid.mempty else
                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                               168)
                                                              Data.Monoid.<>
                                                              (((Data.ProtoLens.Encoding.Bytes.putVarInt)
                                                                  Prelude.. Prelude.fromIntegral)
                                                                 Prelude.. Prelude.fromEnum)
                                                                _v)
                                                         Data.Monoid.<>
                                                         Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                           (Lens.Family2.view
                                                              Data.ProtoLens.unknownFields
                                                              _x))
instance Control.DeepSeq.NFData Invoice where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_Invoice'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_Invoice'memo x__)
                    (Control.DeepSeq.deepseq (_Invoice'receipt x__)
                       (Control.DeepSeq.deepseq (_Invoice'rPreimage x__)
                          (Control.DeepSeq.deepseq (_Invoice'rHash x__)
                             (Control.DeepSeq.deepseq (_Invoice'value x__)
                                (Control.DeepSeq.deepseq (_Invoice'settled x__)
                                   (Control.DeepSeq.deepseq (_Invoice'creationDate x__)
                                      (Control.DeepSeq.deepseq (_Invoice'settleDate x__)
                                         (Control.DeepSeq.deepseq (_Invoice'paymentRequest x__)
                                            (Control.DeepSeq.deepseq (_Invoice'descriptionHash x__)
                                               (Control.DeepSeq.deepseq (_Invoice'expiry x__)
                                                  (Control.DeepSeq.deepseq
                                                     (_Invoice'fallbackAddr x__)
                                                     (Control.DeepSeq.deepseq
                                                        (_Invoice'cltvExpiry x__)
                                                        (Control.DeepSeq.deepseq
                                                           (_Invoice'routeHints x__)
                                                           (Control.DeepSeq.deepseq
                                                              (_Invoice'private x__)
                                                              (Control.DeepSeq.deepseq
                                                                 (_Invoice'addIndex x__)
                                                                 (Control.DeepSeq.deepseq
                                                                    (_Invoice'settleIndex x__)
                                                                    (Control.DeepSeq.deepseq
                                                                       (_Invoice'amtPaid x__)
                                                                       (Control.DeepSeq.deepseq
                                                                          (_Invoice'amtPaidSat x__)
                                                                          (Control.DeepSeq.deepseq
                                                                             (_Invoice'amtPaidMsat
                                                                                x__)
                                                                             (Control.DeepSeq.deepseq
                                                                                (_Invoice'state x__)
                                                                                (())))))))))))))))))))))))
newtype Invoice'InvoiceState'UnrecognizedValue = Invoice'InvoiceState'UnrecognizedValue Data.Int.Int32
                                                   deriving (Prelude.Eq, Prelude.Ord, Prelude.Show)
data Invoice'InvoiceState = Invoice'OPEN
                          | Invoice'SETTLED
                          | Invoice'CANCELED
                          | Invoice'ACCEPTED
                          | Invoice'InvoiceState'Unrecognized !Invoice'InvoiceState'UnrecognizedValue
                              deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum Invoice'InvoiceState where
        maybeToEnum 0 = Prelude.Just Invoice'OPEN
        maybeToEnum 1 = Prelude.Just Invoice'SETTLED
        maybeToEnum 2 = Prelude.Just Invoice'CANCELED
        maybeToEnum 3 = Prelude.Just Invoice'ACCEPTED
        maybeToEnum k
          = Prelude.Just
              (Invoice'InvoiceState'Unrecognized
                 (Invoice'InvoiceState'UnrecognizedValue (Prelude.fromIntegral k)))
        showEnum Invoice'OPEN = "OPEN"
        showEnum Invoice'SETTLED = "SETTLED"
        showEnum Invoice'CANCELED = "CANCELED"
        showEnum Invoice'ACCEPTED = "ACCEPTED"
        showEnum
          (Invoice'InvoiceState'Unrecognized
             (Invoice'InvoiceState'UnrecognizedValue k))
          = Prelude.show k
        readEnum k
          | (k) Prelude.== "OPEN" = Prelude.Just Invoice'OPEN
          | (k) Prelude.== "SETTLED" = Prelude.Just Invoice'SETTLED
          | (k) Prelude.== "CANCELED" = Prelude.Just Invoice'CANCELED
          | (k) Prelude.== "ACCEPTED" = Prelude.Just Invoice'ACCEPTED
        readEnum k
          = (Text.Read.readMaybe k) Prelude.>>= Data.ProtoLens.maybeToEnum
instance Prelude.Bounded Invoice'InvoiceState where
        minBound = Invoice'OPEN
        maxBound = Invoice'ACCEPTED
instance Prelude.Enum Invoice'InvoiceState where
        toEnum k__
          = Prelude.maybe
              (Prelude.error
                 (("toEnum: unknown value for enum InvoiceState: ") Prelude.++
                    Prelude.show k__))
              Prelude.id
              (Data.ProtoLens.maybeToEnum k__)
        fromEnum Invoice'OPEN = 0
        fromEnum Invoice'SETTLED = 1
        fromEnum Invoice'CANCELED = 2
        fromEnum Invoice'ACCEPTED = 3
        fromEnum
          (Invoice'InvoiceState'Unrecognized
             (Invoice'InvoiceState'UnrecognizedValue k))
          = Prelude.fromIntegral k
        succ Invoice'ACCEPTED
          = Prelude.error
              "Invoice'InvoiceState.succ: bad argument Invoice'ACCEPTED. This value would be out of bounds."
        succ Invoice'OPEN = Invoice'SETTLED
        succ Invoice'SETTLED = Invoice'CANCELED
        succ Invoice'CANCELED = Invoice'ACCEPTED
        succ (Invoice'InvoiceState'Unrecognized _)
          = Prelude.error
              "Invoice'InvoiceState.succ: bad argument: unrecognized value"
        pred Invoice'OPEN
          = Prelude.error
              "Invoice'InvoiceState.pred: bad argument Invoice'OPEN. This value would be out of bounds."
        pred Invoice'SETTLED = Invoice'OPEN
        pred Invoice'CANCELED = Invoice'SETTLED
        pred Invoice'ACCEPTED = Invoice'CANCELED
        pred (Invoice'InvoiceState'Unrecognized _)
          = Prelude.error
              "Invoice'InvoiceState.pred: bad argument: unrecognized value"
        enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
        enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
        enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
        enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault Invoice'InvoiceState where
        fieldDefault = Invoice'OPEN
instance Control.DeepSeq.NFData Invoice'InvoiceState where
        rnf x__ = Prelude.seq x__ (())
{- | Fields :

    * 'Proto.Rpc_Fields.addIndex' @:: Lens' InvoiceSubscription Data.Word.Word64@
    * 'Proto.Rpc_Fields.settleIndex' @:: Lens' InvoiceSubscription Data.Word.Word64@
 -}
data InvoiceSubscription = InvoiceSubscription{_InvoiceSubscription'addIndex
                                               :: !Data.Word.Word64,
                                               _InvoiceSubscription'settleIndex ::
                                               !Data.Word.Word64,
                                               _InvoiceSubscription'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show InvoiceSubscription where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField InvoiceSubscription
           "addIndex"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _InvoiceSubscription'addIndex
               (\ x__ y__ -> x__{_InvoiceSubscription'addIndex = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField InvoiceSubscription
           "settleIndex"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _InvoiceSubscription'settleIndex
               (\ x__ y__ -> x__{_InvoiceSubscription'settleIndex = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message InvoiceSubscription where
        messageName _ = Data.Text.pack "lnrpc.InvoiceSubscription"
        fieldsByTag
          = let addIndex__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "add_index"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"addIndex"))
                      :: Data.ProtoLens.FieldDescriptor InvoiceSubscription
                settleIndex__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "settle_index"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"settleIndex"))
                      :: Data.ProtoLens.FieldDescriptor InvoiceSubscription
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, addIndex__field_descriptor),
                 (Data.ProtoLens.Tag 2, settleIndex__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _InvoiceSubscription'_unknownFields
              (\ x__ y__ -> x__{_InvoiceSubscription'_unknownFields = y__})
        defMessage
          = InvoiceSubscription{_InvoiceSubscription'addIndex =
                                  Data.ProtoLens.fieldDefault,
                                _InvoiceSubscription'settleIndex = Data.ProtoLens.fieldDefault,
                                _InvoiceSubscription'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     InvoiceSubscription ->
                       Data.ProtoLens.Encoding.Bytes.Parser InvoiceSubscription
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "add_index"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"addIndex")
                                             y
                                             x)
                                16 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "settle_index"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"settleIndex")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "InvoiceSubscription"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"addIndex") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"settleIndex") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData InvoiceSubscription where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_InvoiceSubscription'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_InvoiceSubscription'addIndex x__)
                    (Control.DeepSeq.deepseq (_InvoiceSubscription'settleIndex x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.pubkey' @:: Lens' LightningAddress Data.Text.Text@
    * 'Proto.Rpc_Fields.host' @:: Lens' LightningAddress Data.Text.Text@
 -}
data LightningAddress = LightningAddress{_LightningAddress'pubkey
                                         :: !Data.Text.Text,
                                         _LightningAddress'host :: !Data.Text.Text,
                                         _LightningAddress'_unknownFields ::
                                         !Data.ProtoLens.FieldSet}
                          deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LightningAddress where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LightningAddress "pubkey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _LightningAddress'pubkey
               (\ x__ y__ -> x__{_LightningAddress'pubkey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField LightningAddress "host"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _LightningAddress'host
               (\ x__ y__ -> x__{_LightningAddress'host = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message LightningAddress where
        messageName _ = Data.Text.pack "lnrpc.LightningAddress"
        fieldsByTag
          = let pubkey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pubkey"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pubkey"))
                      :: Data.ProtoLens.FieldDescriptor LightningAddress
                host__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "host"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"host"))
                      :: Data.ProtoLens.FieldDescriptor LightningAddress
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, pubkey__field_descriptor),
                 (Data.ProtoLens.Tag 2, host__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _LightningAddress'_unknownFields
              (\ x__ y__ -> x__{_LightningAddress'_unknownFields = y__})
        defMessage
          = LightningAddress{_LightningAddress'pubkey =
                               Data.ProtoLens.fieldDefault,
                             _LightningAddress'host = Data.ProtoLens.fieldDefault,
                             _LightningAddress'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     LightningAddress ->
                       Data.ProtoLens.Encoding.Bytes.Parser LightningAddress
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "pubkey"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"pubkey")
                                              y
                                              x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "host"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"host") y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "LightningAddress"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"pubkey") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"host") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LightningAddress where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_LightningAddress'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_LightningAddress'pubkey x__)
                    (Control.DeepSeq.deepseq (_LightningAddress'host x__) (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.lastUpdate' @:: Lens' LightningNode Data.Word.Word32@
    * 'Proto.Rpc_Fields.pubKey' @:: Lens' LightningNode Data.Text.Text@
    * 'Proto.Rpc_Fields.alias' @:: Lens' LightningNode Data.Text.Text@
    * 'Proto.Rpc_Fields.addresses' @:: Lens' LightningNode [NodeAddress]@
    * 'Proto.Rpc_Fields.vec'addresses' @:: Lens' LightningNode (Data.Vector.Vector NodeAddress)@
    * 'Proto.Rpc_Fields.color' @:: Lens' LightningNode Data.Text.Text@
 -}
data LightningNode = LightningNode{_LightningNode'lastUpdate ::
                                   !Data.Word.Word32,
                                   _LightningNode'pubKey :: !Data.Text.Text,
                                   _LightningNode'alias :: !Data.Text.Text,
                                   _LightningNode'addresses :: !(Data.Vector.Vector NodeAddress),
                                   _LightningNode'color :: !Data.Text.Text,
                                   _LightningNode'_unknownFields :: !Data.ProtoLens.FieldSet}
                       deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LightningNode where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LightningNode "lastUpdate"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _LightningNode'lastUpdate
               (\ x__ y__ -> x__{_LightningNode'lastUpdate = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField LightningNode "pubKey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _LightningNode'pubKey
               (\ x__ y__ -> x__{_LightningNode'pubKey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField LightningNode "alias"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _LightningNode'alias
               (\ x__ y__ -> x__{_LightningNode'alias = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField LightningNode "addresses"
           ([NodeAddress])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _LightningNode'addresses
               (\ x__ y__ -> x__{_LightningNode'addresses = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField LightningNode
           "vec'addresses"
           (Data.Vector.Vector NodeAddress)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _LightningNode'addresses
               (\ x__ y__ -> x__{_LightningNode'addresses = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField LightningNode "color"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _LightningNode'color
               (\ x__ y__ -> x__{_LightningNode'color = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message LightningNode where
        messageName _ = Data.Text.pack "lnrpc.LightningNode"
        fieldsByTag
          = let lastUpdate__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "last_update"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"lastUpdate"))
                      :: Data.ProtoLens.FieldDescriptor LightningNode
                pubKey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pub_key"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pubKey"))
                      :: Data.ProtoLens.FieldDescriptor LightningNode
                alias__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "alias"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"alias"))
                      :: Data.ProtoLens.FieldDescriptor LightningNode
                addresses__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "addresses"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor NodeAddress)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"addresses"))
                      :: Data.ProtoLens.FieldDescriptor LightningNode
                color__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "color"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"color"))
                      :: Data.ProtoLens.FieldDescriptor LightningNode
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, lastUpdate__field_descriptor),
                 (Data.ProtoLens.Tag 2, pubKey__field_descriptor),
                 (Data.ProtoLens.Tag 3, alias__field_descriptor),
                 (Data.ProtoLens.Tag 4, addresses__field_descriptor),
                 (Data.ProtoLens.Tag 5, color__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _LightningNode'_unknownFields
              (\ x__ y__ -> x__{_LightningNode'_unknownFields = y__})
        defMessage
          = LightningNode{_LightningNode'lastUpdate =
                            Data.ProtoLens.fieldDefault,
                          _LightningNode'pubKey = Data.ProtoLens.fieldDefault,
                          _LightningNode'alias = Data.ProtoLens.fieldDefault,
                          _LightningNode'addresses = Data.Vector.Generic.empty,
                          _LightningNode'color = Data.ProtoLens.fieldDefault,
                          _LightningNode'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     LightningNode ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         NodeAddress
                         -> Data.ProtoLens.Encoding.Bytes.Parser LightningNode
                loop x mutable'addresses
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'addresses <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                  (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                     mutable'addresses)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'addresses")
                                    frozen'addresses
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "last_update"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"lastUpdate")
                                             y
                                             x)
                                          mutable'addresses
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "pub_key"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"pubKey")
                                              y
                                              x)
                                           mutable'addresses
                                26 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "alias"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"alias") y
                                              x)
                                           mutable'addresses
                                34 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "addresses"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'addresses
                                                   y)
                                         loop x v
                                42 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "color"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"color") y
                                              x)
                                           mutable'addresses
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'addresses
              in
              (do mutable'addresses <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'addresses)
                Data.ProtoLens.Encoding.Bytes.<?> "LightningNode"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"lastUpdate") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"pubKey") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"alias") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                          (((\ bs ->
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Prelude.. Data.Text.Encoding.encodeUtf8)
                            _v)
                     Data.Monoid.<>
                     (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                        (\ _v ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                             (((\ bs ->
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                    Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Prelude.. Data.ProtoLens.encodeMessage)
                               _v)
                        (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'addresses")
                           _x))
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"color") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 42) Data.Monoid.<>
                              (((\ bs ->
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Prelude.. Data.Text.Encoding.encodeUtf8)
                                _v)
                         Data.Monoid.<>
                         Data.ProtoLens.Encoding.Wire.buildFieldSet
                           (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LightningNode where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_LightningNode'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_LightningNode'lastUpdate x__)
                    (Control.DeepSeq.deepseq (_LightningNode'pubKey x__)
                       (Control.DeepSeq.deepseq (_LightningNode'alias x__)
                          (Control.DeepSeq.deepseq (_LightningNode'addresses x__)
                             (Control.DeepSeq.deepseq (_LightningNode'color x__) (())))))))
{- | Fields :

    * 'Proto.Rpc_Fields.activeOnly' @:: Lens' ListChannelsRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.inactiveOnly' @:: Lens' ListChannelsRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.publicOnly' @:: Lens' ListChannelsRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.privateOnly' @:: Lens' ListChannelsRequest Prelude.Bool@
 -}
data ListChannelsRequest = ListChannelsRequest{_ListChannelsRequest'activeOnly
                                               :: !Prelude.Bool,
                                               _ListChannelsRequest'inactiveOnly :: !Prelude.Bool,
                                               _ListChannelsRequest'publicOnly :: !Prelude.Bool,
                                               _ListChannelsRequest'privateOnly :: !Prelude.Bool,
                                               _ListChannelsRequest'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ListChannelsRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ListChannelsRequest
           "activeOnly"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListChannelsRequest'activeOnly
               (\ x__ y__ -> x__{_ListChannelsRequest'activeOnly = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ListChannelsRequest
           "inactiveOnly"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListChannelsRequest'inactiveOnly
               (\ x__ y__ -> x__{_ListChannelsRequest'inactiveOnly = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ListChannelsRequest
           "publicOnly"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListChannelsRequest'publicOnly
               (\ x__ y__ -> x__{_ListChannelsRequest'publicOnly = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ListChannelsRequest
           "privateOnly"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListChannelsRequest'privateOnly
               (\ x__ y__ -> x__{_ListChannelsRequest'privateOnly = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ListChannelsRequest where
        messageName _ = Data.Text.pack "lnrpc.ListChannelsRequest"
        fieldsByTag
          = let activeOnly__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "active_only"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"activeOnly"))
                      :: Data.ProtoLens.FieldDescriptor ListChannelsRequest
                inactiveOnly__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "inactive_only"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"inactiveOnly"))
                      :: Data.ProtoLens.FieldDescriptor ListChannelsRequest
                publicOnly__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "public_only"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"publicOnly"))
                      :: Data.ProtoLens.FieldDescriptor ListChannelsRequest
                privateOnly__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "private_only"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"privateOnly"))
                      :: Data.ProtoLens.FieldDescriptor ListChannelsRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, activeOnly__field_descriptor),
                 (Data.ProtoLens.Tag 2, inactiveOnly__field_descriptor),
                 (Data.ProtoLens.Tag 3, publicOnly__field_descriptor),
                 (Data.ProtoLens.Tag 4, privateOnly__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ListChannelsRequest'_unknownFields
              (\ x__ y__ -> x__{_ListChannelsRequest'_unknownFields = y__})
        defMessage
          = ListChannelsRequest{_ListChannelsRequest'activeOnly =
                                  Data.ProtoLens.fieldDefault,
                                _ListChannelsRequest'inactiveOnly = Data.ProtoLens.fieldDefault,
                                _ListChannelsRequest'publicOnly = Data.ProtoLens.fieldDefault,
                                _ListChannelsRequest'privateOnly = Data.ProtoLens.fieldDefault,
                                _ListChannelsRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ListChannelsRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ListChannelsRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "active_only"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"activeOnly")
                                             y
                                             x)
                                16 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "inactive_only"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"inactiveOnly")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "public_only"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"publicOnly")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "private_only"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"privateOnly")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ListChannelsRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"activeOnly") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         (\ b -> if b then 1 else 0))
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"inactiveOnly") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           (\ b -> if b then 1 else 0))
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"publicOnly") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             (\ b -> if b then 1 else 0))
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"privateOnly") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               (\ b -> if b then 1 else 0))
                              _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ListChannelsRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ListChannelsRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ListChannelsRequest'activeOnly x__)
                    (Control.DeepSeq.deepseq (_ListChannelsRequest'inactiveOnly x__)
                       (Control.DeepSeq.deepseq (_ListChannelsRequest'publicOnly x__)
                          (Control.DeepSeq.deepseq (_ListChannelsRequest'privateOnly x__)
                             (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.channels' @:: Lens' ListChannelsResponse [Channel]@
    * 'Proto.Rpc_Fields.vec'channels' @:: Lens' ListChannelsResponse (Data.Vector.Vector Channel)@
 -}
data ListChannelsResponse = ListChannelsResponse{_ListChannelsResponse'channels
                                                 :: !(Data.Vector.Vector Channel),
                                                 _ListChannelsResponse'_unknownFields ::
                                                 !Data.ProtoLens.FieldSet}
                              deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ListChannelsResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ListChannelsResponse
           "channels"
           ([Channel])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListChannelsResponse'channels
               (\ x__ y__ -> x__{_ListChannelsResponse'channels = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField ListChannelsResponse
           "vec'channels"
           (Data.Vector.Vector Channel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListChannelsResponse'channels
               (\ x__ y__ -> x__{_ListChannelsResponse'channels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ListChannelsResponse where
        messageName _ = Data.Text.pack "lnrpc.ListChannelsResponse"
        fieldsByTag
          = let channels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channels"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Channel)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"channels"))
                      :: Data.ProtoLens.FieldDescriptor ListChannelsResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 11, channels__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ListChannelsResponse'_unknownFields
              (\ x__ y__ -> x__{_ListChannelsResponse'_unknownFields = y__})
        defMessage
          = ListChannelsResponse{_ListChannelsResponse'channels =
                                   Data.Vector.Generic.empty,
                                 _ListChannelsResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ListChannelsResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Channel
                         -> Data.ProtoLens.Encoding.Bytes.Parser ListChannelsResponse
                loop x mutable'channels
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'channels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                    mutable'channels)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'channels")
                                    frozen'channels
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                90 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "channels"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'channels
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'channels
              in
              (do mutable'channels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'channels)
                Data.ProtoLens.Encoding.Bytes.<?> "ListChannelsResponse"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 90) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'channels")
                     _x))
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ListChannelsResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ListChannelsResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ListChannelsResponse'channels x__)
                    (())))
{- | Fields :

    * 'Proto.Rpc_Fields.pendingOnly' @:: Lens' ListInvoiceRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.indexOffset' @:: Lens' ListInvoiceRequest Data.Word.Word64@
    * 'Proto.Rpc_Fields.numMaxInvoices' @:: Lens' ListInvoiceRequest Data.Word.Word64@
    * 'Proto.Rpc_Fields.reversed' @:: Lens' ListInvoiceRequest Prelude.Bool@
 -}
data ListInvoiceRequest = ListInvoiceRequest{_ListInvoiceRequest'pendingOnly
                                             :: !Prelude.Bool,
                                             _ListInvoiceRequest'indexOffset :: !Data.Word.Word64,
                                             _ListInvoiceRequest'numMaxInvoices ::
                                             !Data.Word.Word64,
                                             _ListInvoiceRequest'reversed :: !Prelude.Bool,
                                             _ListInvoiceRequest'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ListInvoiceRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ListInvoiceRequest
           "pendingOnly"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListInvoiceRequest'pendingOnly
               (\ x__ y__ -> x__{_ListInvoiceRequest'pendingOnly = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ListInvoiceRequest
           "indexOffset"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListInvoiceRequest'indexOffset
               (\ x__ y__ -> x__{_ListInvoiceRequest'indexOffset = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ListInvoiceRequest
           "numMaxInvoices"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListInvoiceRequest'numMaxInvoices
               (\ x__ y__ -> x__{_ListInvoiceRequest'numMaxInvoices = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ListInvoiceRequest
           "reversed"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListInvoiceRequest'reversed
               (\ x__ y__ -> x__{_ListInvoiceRequest'reversed = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ListInvoiceRequest where
        messageName _ = Data.Text.pack "lnrpc.ListInvoiceRequest"
        fieldsByTag
          = let pendingOnly__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pending_only"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pendingOnly"))
                      :: Data.ProtoLens.FieldDescriptor ListInvoiceRequest
                indexOffset__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "index_offset"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"indexOffset"))
                      :: Data.ProtoLens.FieldDescriptor ListInvoiceRequest
                numMaxInvoices__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_max_invoices"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numMaxInvoices"))
                      :: Data.ProtoLens.FieldDescriptor ListInvoiceRequest
                reversed__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "reversed"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"reversed"))
                      :: Data.ProtoLens.FieldDescriptor ListInvoiceRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, pendingOnly__field_descriptor),
                 (Data.ProtoLens.Tag 4, indexOffset__field_descriptor),
                 (Data.ProtoLens.Tag 5, numMaxInvoices__field_descriptor),
                 (Data.ProtoLens.Tag 6, reversed__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ListInvoiceRequest'_unknownFields
              (\ x__ y__ -> x__{_ListInvoiceRequest'_unknownFields = y__})
        defMessage
          = ListInvoiceRequest{_ListInvoiceRequest'pendingOnly =
                                 Data.ProtoLens.fieldDefault,
                               _ListInvoiceRequest'indexOffset = Data.ProtoLens.fieldDefault,
                               _ListInvoiceRequest'numMaxInvoices = Data.ProtoLens.fieldDefault,
                               _ListInvoiceRequest'reversed = Data.ProtoLens.fieldDefault,
                               _ListInvoiceRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ListInvoiceRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ListInvoiceRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "pending_only"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"pendingOnly")
                                             y
                                             x)
                                32 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "index_offset"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"indexOffset")
                                              y
                                              x)
                                40 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "num_max_invoices"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numMaxInvoices")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "reversed"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"reversed")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ListInvoiceRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"pendingOnly") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         (\ b -> if b then 1 else 0))
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"indexOffset") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                        Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"numMaxInvoices")
                              _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                          Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"reversed") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               (\ b -> if b then 1 else 0))
                              _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ListInvoiceRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ListInvoiceRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ListInvoiceRequest'pendingOnly x__)
                    (Control.DeepSeq.deepseq (_ListInvoiceRequest'indexOffset x__)
                       (Control.DeepSeq.deepseq (_ListInvoiceRequest'numMaxInvoices x__)
                          (Control.DeepSeq.deepseq (_ListInvoiceRequest'reversed x__)
                             (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.invoices' @:: Lens' ListInvoiceResponse [Invoice]@
    * 'Proto.Rpc_Fields.vec'invoices' @:: Lens' ListInvoiceResponse (Data.Vector.Vector Invoice)@
    * 'Proto.Rpc_Fields.lastIndexOffset' @:: Lens' ListInvoiceResponse Data.Word.Word64@
    * 'Proto.Rpc_Fields.firstIndexOffset' @:: Lens' ListInvoiceResponse Data.Word.Word64@
 -}
data ListInvoiceResponse = ListInvoiceResponse{_ListInvoiceResponse'invoices
                                               :: !(Data.Vector.Vector Invoice),
                                               _ListInvoiceResponse'lastIndexOffset ::
                                               !Data.Word.Word64,
                                               _ListInvoiceResponse'firstIndexOffset ::
                                               !Data.Word.Word64,
                                               _ListInvoiceResponse'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ListInvoiceResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ListInvoiceResponse
           "invoices"
           ([Invoice])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListInvoiceResponse'invoices
               (\ x__ y__ -> x__{_ListInvoiceResponse'invoices = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField ListInvoiceResponse
           "vec'invoices"
           (Data.Vector.Vector Invoice)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListInvoiceResponse'invoices
               (\ x__ y__ -> x__{_ListInvoiceResponse'invoices = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ListInvoiceResponse
           "lastIndexOffset"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListInvoiceResponse'lastIndexOffset
               (\ x__ y__ -> x__{_ListInvoiceResponse'lastIndexOffset = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ListInvoiceResponse
           "firstIndexOffset"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _ListInvoiceResponse'firstIndexOffset
               (\ x__ y__ -> x__{_ListInvoiceResponse'firstIndexOffset = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ListInvoiceResponse where
        messageName _ = Data.Text.pack "lnrpc.ListInvoiceResponse"
        fieldsByTag
          = let invoices__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "invoices"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Invoice)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"invoices"))
                      :: Data.ProtoLens.FieldDescriptor ListInvoiceResponse
                lastIndexOffset__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "last_index_offset"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"lastIndexOffset"))
                      :: Data.ProtoLens.FieldDescriptor ListInvoiceResponse
                firstIndexOffset__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "first_index_offset"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"firstIndexOffset"))
                      :: Data.ProtoLens.FieldDescriptor ListInvoiceResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, invoices__field_descriptor),
                 (Data.ProtoLens.Tag 2, lastIndexOffset__field_descriptor),
                 (Data.ProtoLens.Tag 3, firstIndexOffset__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ListInvoiceResponse'_unknownFields
              (\ x__ y__ -> x__{_ListInvoiceResponse'_unknownFields = y__})
        defMessage
          = ListInvoiceResponse{_ListInvoiceResponse'invoices =
                                  Data.Vector.Generic.empty,
                                _ListInvoiceResponse'lastIndexOffset = Data.ProtoLens.fieldDefault,
                                _ListInvoiceResponse'firstIndexOffset =
                                  Data.ProtoLens.fieldDefault,
                                _ListInvoiceResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ListInvoiceResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Invoice
                         -> Data.ProtoLens.Encoding.Bytes.Parser ListInvoiceResponse
                loop x mutable'invoices
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'invoices <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                    mutable'invoices)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'invoices")
                                    frozen'invoices
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "invoices"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'invoices
                                                   y)
                                         loop x v
                                16 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "last_index_offset"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"lastIndexOffset")
                                              y
                                              x)
                                           mutable'invoices
                                24 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "first_index_offset"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"firstIndexOffset")
                                              y
                                              x)
                                           mutable'invoices
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'invoices
              in
              (do mutable'invoices <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'invoices)
                Data.ProtoLens.Encoding.Bytes.<?> "ListInvoiceResponse"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'invoices")
                     _x))
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"lastIndexOffset")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view
                              (Data.ProtoLens.Field.field @"firstIndexOffset")
                              _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                     Data.Monoid.<>
                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                       (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ListInvoiceResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ListInvoiceResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ListInvoiceResponse'invoices x__)
                    (Control.DeepSeq.deepseq (_ListInvoiceResponse'lastIndexOffset x__)
                       (Control.DeepSeq.deepseq
                          (_ListInvoiceResponse'firstIndexOffset x__)
                          (())))))
{- | Fields :

 -}
data ListPaymentsRequest = ListPaymentsRequest{_ListPaymentsRequest'_unknownFields
                                               :: !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ListPaymentsRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ListPaymentsRequest where
        messageName _ = Data.Text.pack "lnrpc.ListPaymentsRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _ListPaymentsRequest'_unknownFields
              (\ x__ y__ -> x__{_ListPaymentsRequest'_unknownFields = y__})
        defMessage
          = ListPaymentsRequest{_ListPaymentsRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ListPaymentsRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ListPaymentsRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ListPaymentsRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ListPaymentsRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ListPaymentsRequest'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.payments' @:: Lens' ListPaymentsResponse [Payment]@
    * 'Proto.Rpc_Fields.vec'payments' @:: Lens' ListPaymentsResponse (Data.Vector.Vector Payment)@
 -}
data ListPaymentsResponse = ListPaymentsResponse{_ListPaymentsResponse'payments
                                                 :: !(Data.Vector.Vector Payment),
                                                 _ListPaymentsResponse'_unknownFields ::
                                                 !Data.ProtoLens.FieldSet}
                              deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ListPaymentsResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ListPaymentsResponse
           "payments"
           ([Payment])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListPaymentsResponse'payments
               (\ x__ y__ -> x__{_ListPaymentsResponse'payments = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField ListPaymentsResponse
           "vec'payments"
           (Data.Vector.Vector Payment)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListPaymentsResponse'payments
               (\ x__ y__ -> x__{_ListPaymentsResponse'payments = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ListPaymentsResponse where
        messageName _ = Data.Text.pack "lnrpc.ListPaymentsResponse"
        fieldsByTag
          = let payments__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payments"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Payment)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"payments"))
                      :: Data.ProtoLens.FieldDescriptor ListPaymentsResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, payments__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ListPaymentsResponse'_unknownFields
              (\ x__ y__ -> x__{_ListPaymentsResponse'_unknownFields = y__})
        defMessage
          = ListPaymentsResponse{_ListPaymentsResponse'payments =
                                   Data.Vector.Generic.empty,
                                 _ListPaymentsResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ListPaymentsResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Payment
                         -> Data.ProtoLens.Encoding.Bytes.Parser ListPaymentsResponse
                loop x mutable'payments
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'payments <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                    mutable'payments)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'payments")
                                    frozen'payments
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "payments"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'payments
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'payments
              in
              (do mutable'payments <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'payments)
                Data.ProtoLens.Encoding.Bytes.<?> "ListPaymentsResponse"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'payments")
                     _x))
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ListPaymentsResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ListPaymentsResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ListPaymentsResponse'payments x__)
                    (())))
{- | Fields :

 -}
data ListPeersRequest = ListPeersRequest{_ListPeersRequest'_unknownFields
                                         :: !Data.ProtoLens.FieldSet}
                          deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ListPeersRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ListPeersRequest where
        messageName _ = Data.Text.pack "lnrpc.ListPeersRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _ListPeersRequest'_unknownFields
              (\ x__ y__ -> x__{_ListPeersRequest'_unknownFields = y__})
        defMessage
          = ListPeersRequest{_ListPeersRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ListPeersRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ListPeersRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ListPeersRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ListPeersRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ListPeersRequest'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.peers' @:: Lens' ListPeersResponse [Peer]@
    * 'Proto.Rpc_Fields.vec'peers' @:: Lens' ListPeersResponse (Data.Vector.Vector Peer)@
 -}
data ListPeersResponse = ListPeersResponse{_ListPeersResponse'peers
                                           :: !(Data.Vector.Vector Peer),
                                           _ListPeersResponse'_unknownFields ::
                                           !Data.ProtoLens.FieldSet}
                           deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ListPeersResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ListPeersResponse "peers"
           ([Peer])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListPeersResponse'peers
               (\ x__ y__ -> x__{_ListPeersResponse'peers = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField ListPeersResponse
           "vec'peers"
           (Data.Vector.Vector Peer)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListPeersResponse'peers
               (\ x__ y__ -> x__{_ListPeersResponse'peers = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ListPeersResponse where
        messageName _ = Data.Text.pack "lnrpc.ListPeersResponse"
        fieldsByTag
          = let peers__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "peers"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Peer)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"peers"))
                      :: Data.ProtoLens.FieldDescriptor ListPeersResponse
              in
              Data.Map.fromList [(Data.ProtoLens.Tag 1, peers__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ListPeersResponse'_unknownFields
              (\ x__ y__ -> x__{_ListPeersResponse'_unknownFields = y__})
        defMessage
          = ListPeersResponse{_ListPeersResponse'peers =
                                Data.Vector.Generic.empty,
                              _ListPeersResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ListPeersResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Peer
                         -> Data.ProtoLens.Encoding.Bytes.Parser ListPeersResponse
                loop x mutable'peers
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'peers <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'peers)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'peers")
                                    frozen'peers
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "peers"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'peers
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'peers
              in
              (do mutable'peers <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'peers)
                Data.ProtoLens.Encoding.Bytes.<?> "ListPeersResponse"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'peers") _x))
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ListPeersResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ListPeersResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ListPeersResponse'peers x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.minConfs' @:: Lens' ListUnspentRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.maxConfs' @:: Lens' ListUnspentRequest Data.Int.Int32@
 -}
data ListUnspentRequest = ListUnspentRequest{_ListUnspentRequest'minConfs
                                             :: !Data.Int.Int32,
                                             _ListUnspentRequest'maxConfs :: !Data.Int.Int32,
                                             _ListUnspentRequest'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ListUnspentRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ListUnspentRequest
           "minConfs"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListUnspentRequest'minConfs
               (\ x__ y__ -> x__{_ListUnspentRequest'minConfs = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField ListUnspentRequest
           "maxConfs"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListUnspentRequest'maxConfs
               (\ x__ y__ -> x__{_ListUnspentRequest'maxConfs = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ListUnspentRequest where
        messageName _ = Data.Text.pack "lnrpc.ListUnspentRequest"
        fieldsByTag
          = let minConfs__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "min_confs"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"minConfs"))
                      :: Data.ProtoLens.FieldDescriptor ListUnspentRequest
                maxConfs__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "max_confs"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"maxConfs"))
                      :: Data.ProtoLens.FieldDescriptor ListUnspentRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, minConfs__field_descriptor),
                 (Data.ProtoLens.Tag 2, maxConfs__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ListUnspentRequest'_unknownFields
              (\ x__ y__ -> x__{_ListUnspentRequest'_unknownFields = y__})
        defMessage
          = ListUnspentRequest{_ListUnspentRequest'minConfs =
                                 Data.ProtoLens.fieldDefault,
                               _ListUnspentRequest'maxConfs = Data.ProtoLens.fieldDefault,
                               _ListUnspentRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ListUnspentRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser ListUnspentRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "min_confs"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"minConfs")
                                             y
                                             x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "max_confs"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"maxConfs")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ListUnspentRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"minConfs") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"maxConfs") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ListUnspentRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ListUnspentRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ListUnspentRequest'minConfs x__)
                    (Control.DeepSeq.deepseq (_ListUnspentRequest'maxConfs x__) (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.utxos' @:: Lens' ListUnspentResponse [Utxo]@
    * 'Proto.Rpc_Fields.vec'utxos' @:: Lens' ListUnspentResponse (Data.Vector.Vector Utxo)@
 -}
data ListUnspentResponse = ListUnspentResponse{_ListUnspentResponse'utxos
                                               :: !(Data.Vector.Vector Utxo),
                                               _ListUnspentResponse'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ListUnspentResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ListUnspentResponse "utxos"
           ([Utxo])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListUnspentResponse'utxos
               (\ x__ y__ -> x__{_ListUnspentResponse'utxos = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField ListUnspentResponse
           "vec'utxos"
           (Data.Vector.Vector Utxo)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _ListUnspentResponse'utxos
               (\ x__ y__ -> x__{_ListUnspentResponse'utxos = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message ListUnspentResponse where
        messageName _ = Data.Text.pack "lnrpc.ListUnspentResponse"
        fieldsByTag
          = let utxos__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "utxos"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Utxo)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"utxos"))
                      :: Data.ProtoLens.FieldDescriptor ListUnspentResponse
              in
              Data.Map.fromList [(Data.ProtoLens.Tag 1, utxos__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _ListUnspentResponse'_unknownFields
              (\ x__ y__ -> x__{_ListUnspentResponse'_unknownFields = y__})
        defMessage
          = ListUnspentResponse{_ListUnspentResponse'utxos =
                                  Data.Vector.Generic.empty,
                                _ListUnspentResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     ListUnspentResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Utxo
                         -> Data.ProtoLens.Encoding.Bytes.Parser ListUnspentResponse
                loop x mutable'utxos
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'utxos <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'utxos)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'utxos")
                                    frozen'utxos
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "utxos"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'utxos
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'utxos
              in
              (do mutable'utxos <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'utxos)
                Data.ProtoLens.Encoding.Bytes.<?> "ListUnspentResponse"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'utxos") _x))
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ListUnspentResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_ListUnspentResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_ListUnspentResponse'utxos x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.chanPoints' @:: Lens' MultiChanBackup [ChannelPoint]@
    * 'Proto.Rpc_Fields.vec'chanPoints' @:: Lens' MultiChanBackup (Data.Vector.Vector ChannelPoint)@
    * 'Proto.Rpc_Fields.multiChanBackup' @:: Lens' MultiChanBackup Data.ByteString.ByteString@
 -}
data MultiChanBackup = MultiChanBackup{_MultiChanBackup'chanPoints
                                       :: !(Data.Vector.Vector ChannelPoint),
                                       _MultiChanBackup'multiChanBackup ::
                                       !Data.ByteString.ByteString,
                                       _MultiChanBackup'_unknownFields :: !Data.ProtoLens.FieldSet}
                         deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show MultiChanBackup where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField MultiChanBackup "chanPoints"
           ([ChannelPoint])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _MultiChanBackup'chanPoints
               (\ x__ y__ -> x__{_MultiChanBackup'chanPoints = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField MultiChanBackup
           "vec'chanPoints"
           (Data.Vector.Vector ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _MultiChanBackup'chanPoints
               (\ x__ y__ -> x__{_MultiChanBackup'chanPoints = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField MultiChanBackup
           "multiChanBackup"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _MultiChanBackup'multiChanBackup
               (\ x__ y__ -> x__{_MultiChanBackup'multiChanBackup = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message MultiChanBackup where
        messageName _ = Data.Text.pack "lnrpc.MultiChanBackup"
        fieldsByTag
          = let chanPoints__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_points"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"chanPoints"))
                      :: Data.ProtoLens.FieldDescriptor MultiChanBackup
                multiChanBackup__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "multi_chan_backup"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"multiChanBackup"))
                      :: Data.ProtoLens.FieldDescriptor MultiChanBackup
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanPoints__field_descriptor),
                 (Data.ProtoLens.Tag 2, multiChanBackup__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _MultiChanBackup'_unknownFields
              (\ x__ y__ -> x__{_MultiChanBackup'_unknownFields = y__})
        defMessage
          = MultiChanBackup{_MultiChanBackup'chanPoints =
                              Data.Vector.Generic.empty,
                            _MultiChanBackup'multiChanBackup = Data.ProtoLens.fieldDefault,
                            _MultiChanBackup'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     MultiChanBackup ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         ChannelPoint
                         -> Data.ProtoLens.Encoding.Bytes.Parser MultiChanBackup
                loop x mutable'chanPoints
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'chanPoints <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                   (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                      mutable'chanPoints)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'chanPoints")
                                    frozen'chanPoints
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "chan_points"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'chanPoints
                                                   y)
                                         loop x v
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "multi_chan_backup"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"multiChanBackup")
                                              y
                                              x)
                                           mutable'chanPoints
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'chanPoints
              in
              (do mutable'chanPoints <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'chanPoints)
                Data.ProtoLens.Encoding.Bytes.<?> "MultiChanBackup"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'chanPoints")
                     _x))
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"multiChanBackup")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData MultiChanBackup where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_MultiChanBackup'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_MultiChanBackup'chanPoints x__)
                    (Control.DeepSeq.deepseq (_MultiChanBackup'multiChanBackup x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.graphDiameter' @:: Lens' NetworkInfo Data.Word.Word32@
    * 'Proto.Rpc_Fields.avgOutDegree' @:: Lens' NetworkInfo Prelude.Double@
    * 'Proto.Rpc_Fields.maxOutDegree' @:: Lens' NetworkInfo Data.Word.Word32@
    * 'Proto.Rpc_Fields.numNodes' @:: Lens' NetworkInfo Data.Word.Word32@
    * 'Proto.Rpc_Fields.numChannels' @:: Lens' NetworkInfo Data.Word.Word32@
    * 'Proto.Rpc_Fields.totalNetworkCapacity' @:: Lens' NetworkInfo Data.Int.Int64@
    * 'Proto.Rpc_Fields.avgChannelSize' @:: Lens' NetworkInfo Prelude.Double@
    * 'Proto.Rpc_Fields.minChannelSize' @:: Lens' NetworkInfo Data.Int.Int64@
    * 'Proto.Rpc_Fields.maxChannelSize' @:: Lens' NetworkInfo Data.Int.Int64@
    * 'Proto.Rpc_Fields.medianChannelSizeSat' @:: Lens' NetworkInfo Data.Int.Int64@
 -}
data NetworkInfo = NetworkInfo{_NetworkInfo'graphDiameter ::
                               !Data.Word.Word32,
                               _NetworkInfo'avgOutDegree :: !Prelude.Double,
                               _NetworkInfo'maxOutDegree :: !Data.Word.Word32,
                               _NetworkInfo'numNodes :: !Data.Word.Word32,
                               _NetworkInfo'numChannels :: !Data.Word.Word32,
                               _NetworkInfo'totalNetworkCapacity :: !Data.Int.Int64,
                               _NetworkInfo'avgChannelSize :: !Prelude.Double,
                               _NetworkInfo'minChannelSize :: !Data.Int.Int64,
                               _NetworkInfo'maxChannelSize :: !Data.Int.Int64,
                               _NetworkInfo'medianChannelSizeSat :: !Data.Int.Int64,
                               _NetworkInfo'_unknownFields :: !Data.ProtoLens.FieldSet}
                     deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show NetworkInfo where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField NetworkInfo "graphDiameter"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NetworkInfo'graphDiameter
               (\ x__ y__ -> x__{_NetworkInfo'graphDiameter = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NetworkInfo "avgOutDegree"
           (Prelude.Double)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NetworkInfo'avgOutDegree
               (\ x__ y__ -> x__{_NetworkInfo'avgOutDegree = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NetworkInfo "maxOutDegree"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NetworkInfo'maxOutDegree
               (\ x__ y__ -> x__{_NetworkInfo'maxOutDegree = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NetworkInfo "numNodes"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NetworkInfo'numNodes
               (\ x__ y__ -> x__{_NetworkInfo'numNodes = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NetworkInfo "numChannels"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NetworkInfo'numChannels
               (\ x__ y__ -> x__{_NetworkInfo'numChannels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NetworkInfo
           "totalNetworkCapacity"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NetworkInfo'totalNetworkCapacity
               (\ x__ y__ -> x__{_NetworkInfo'totalNetworkCapacity = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NetworkInfo "avgChannelSize"
           (Prelude.Double)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NetworkInfo'avgChannelSize
               (\ x__ y__ -> x__{_NetworkInfo'avgChannelSize = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NetworkInfo "minChannelSize"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NetworkInfo'minChannelSize
               (\ x__ y__ -> x__{_NetworkInfo'minChannelSize = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NetworkInfo "maxChannelSize"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NetworkInfo'maxChannelSize
               (\ x__ y__ -> x__{_NetworkInfo'maxChannelSize = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NetworkInfo
           "medianChannelSizeSat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NetworkInfo'medianChannelSizeSat
               (\ x__ y__ -> x__{_NetworkInfo'medianChannelSizeSat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message NetworkInfo where
        messageName _ = Data.Text.pack "lnrpc.NetworkInfo"
        fieldsByTag
          = let graphDiameter__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "graph_diameter"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"graphDiameter"))
                      :: Data.ProtoLens.FieldDescriptor NetworkInfo
                avgOutDegree__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "avg_out_degree"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.DoubleField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Double)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"avgOutDegree"))
                      :: Data.ProtoLens.FieldDescriptor NetworkInfo
                maxOutDegree__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "max_out_degree"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"maxOutDegree"))
                      :: Data.ProtoLens.FieldDescriptor NetworkInfo
                numNodes__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_nodes"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numNodes"))
                      :: Data.ProtoLens.FieldDescriptor NetworkInfo
                numChannels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_channels"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numChannels"))
                      :: Data.ProtoLens.FieldDescriptor NetworkInfo
                totalNetworkCapacity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_network_capacity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalNetworkCapacity"))
                      :: Data.ProtoLens.FieldDescriptor NetworkInfo
                avgChannelSize__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "avg_channel_size"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.DoubleField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Double)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"avgChannelSize"))
                      :: Data.ProtoLens.FieldDescriptor NetworkInfo
                minChannelSize__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "min_channel_size"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"minChannelSize"))
                      :: Data.ProtoLens.FieldDescriptor NetworkInfo
                maxChannelSize__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "max_channel_size"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"maxChannelSize"))
                      :: Data.ProtoLens.FieldDescriptor NetworkInfo
                medianChannelSizeSat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "median_channel_size_sat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"medianChannelSizeSat"))
                      :: Data.ProtoLens.FieldDescriptor NetworkInfo
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, graphDiameter__field_descriptor),
                 (Data.ProtoLens.Tag 2, avgOutDegree__field_descriptor),
                 (Data.ProtoLens.Tag 3, maxOutDegree__field_descriptor),
                 (Data.ProtoLens.Tag 4, numNodes__field_descriptor),
                 (Data.ProtoLens.Tag 5, numChannels__field_descriptor),
                 (Data.ProtoLens.Tag 6, totalNetworkCapacity__field_descriptor),
                 (Data.ProtoLens.Tag 7, avgChannelSize__field_descriptor),
                 (Data.ProtoLens.Tag 8, minChannelSize__field_descriptor),
                 (Data.ProtoLens.Tag 9, maxChannelSize__field_descriptor),
                 (Data.ProtoLens.Tag 10, medianChannelSizeSat__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _NetworkInfo'_unknownFields
              (\ x__ y__ -> x__{_NetworkInfo'_unknownFields = y__})
        defMessage
          = NetworkInfo{_NetworkInfo'graphDiameter =
                          Data.ProtoLens.fieldDefault,
                        _NetworkInfo'avgOutDegree = Data.ProtoLens.fieldDefault,
                        _NetworkInfo'maxOutDegree = Data.ProtoLens.fieldDefault,
                        _NetworkInfo'numNodes = Data.ProtoLens.fieldDefault,
                        _NetworkInfo'numChannels = Data.ProtoLens.fieldDefault,
                        _NetworkInfo'totalNetworkCapacity = Data.ProtoLens.fieldDefault,
                        _NetworkInfo'avgChannelSize = Data.ProtoLens.fieldDefault,
                        _NetworkInfo'minChannelSize = Data.ProtoLens.fieldDefault,
                        _NetworkInfo'maxChannelSize = Data.ProtoLens.fieldDefault,
                        _NetworkInfo'medianChannelSizeSat = Data.ProtoLens.fieldDefault,
                        _NetworkInfo'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     NetworkInfo -> Data.ProtoLens.Encoding.Bytes.Parser NetworkInfo
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "graph_diameter"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"graphDiameter")
                                             y
                                             x)
                                17 -> do y <- (Prelude.fmap
                                                 Data.ProtoLens.Encoding.Bytes.wordToDouble
                                                 Data.ProtoLens.Encoding.Bytes.getFixed64)
                                                Data.ProtoLens.Encoding.Bytes.<?> "avg_out_degree"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"avgOutDegree")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "max_out_degree"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"maxOutDegree")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "num_nodes"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numNodes")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "num_channels"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numChannels")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "total_network_capacity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"totalNetworkCapacity")
                                              y
                                              x)
                                57 -> do y <- (Prelude.fmap
                                                 Data.ProtoLens.Encoding.Bytes.wordToDouble
                                                 Data.ProtoLens.Encoding.Bytes.getFixed64)
                                                Data.ProtoLens.Encoding.Bytes.<?> "avg_channel_size"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"avgChannelSize")
                                              y
                                              x)
                                64 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "min_channel_size"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"minChannelSize")
                                              y
                                              x)
                                72 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "max_channel_size"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"maxChannelSize")
                                              y
                                              x)
                                80 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "median_channel_size_sat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"medianChannelSizeSat")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "NetworkInfo"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"graphDiameter")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"avgOutDegree") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 17) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putFixed64) Prelude..
                           Data.ProtoLens.Encoding.Bytes.doubleToWord)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"maxOutDegree") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"numNodes") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"numChannels") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view
                                    (Data.ProtoLens.Field.field @"totalNetworkCapacity")
                                    _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"avgChannelSize")
                                      _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 57) Data.Monoid.<>
                                  ((Data.ProtoLens.Encoding.Bytes.putFixed64) Prelude..
                                     Data.ProtoLens.Encoding.Bytes.doubleToWord)
                                    _v)
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view
                                        (Data.ProtoLens.Field.field @"minChannelSize")
                                        _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 64) Data.Monoid.<>
                                    ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                       Prelude.fromIntegral)
                                      _v)
                               Data.Monoid.<>
                               (let _v
                                      = Lens.Family2.view
                                          (Data.ProtoLens.Field.field @"maxChannelSize")
                                          _x
                                  in
                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                    Data.Monoid.mempty else
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 72) Data.Monoid.<>
                                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                         Prelude.fromIntegral)
                                        _v)
                                 Data.Monoid.<>
                                 (let _v
                                        = Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"medianChannelSizeSat")
                                            _x
                                    in
                                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                      Data.Monoid.mempty else
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 80) Data.Monoid.<>
                                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                           Prelude.fromIntegral)
                                          _v)
                                   Data.Monoid.<>
                                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData NetworkInfo where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_NetworkInfo'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_NetworkInfo'graphDiameter x__)
                    (Control.DeepSeq.deepseq (_NetworkInfo'avgOutDegree x__)
                       (Control.DeepSeq.deepseq (_NetworkInfo'maxOutDegree x__)
                          (Control.DeepSeq.deepseq (_NetworkInfo'numNodes x__)
                             (Control.DeepSeq.deepseq (_NetworkInfo'numChannels x__)
                                (Control.DeepSeq.deepseq (_NetworkInfo'totalNetworkCapacity x__)
                                   (Control.DeepSeq.deepseq (_NetworkInfo'avgChannelSize x__)
                                      (Control.DeepSeq.deepseq (_NetworkInfo'minChannelSize x__)
                                         (Control.DeepSeq.deepseq (_NetworkInfo'maxChannelSize x__)
                                            (Control.DeepSeq.deepseq
                                               (_NetworkInfo'medianChannelSizeSat x__)
                                               (()))))))))))))
{- | Fields :

 -}
data NetworkInfoRequest = NetworkInfoRequest{_NetworkInfoRequest'_unknownFields
                                             :: !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show NetworkInfoRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message NetworkInfoRequest where
        messageName _ = Data.Text.pack "lnrpc.NetworkInfoRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _NetworkInfoRequest'_unknownFields
              (\ x__ y__ -> x__{_NetworkInfoRequest'_unknownFields = y__})
        defMessage
          = NetworkInfoRequest{_NetworkInfoRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     NetworkInfoRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser NetworkInfoRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "NetworkInfoRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData NetworkInfoRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_NetworkInfoRequest'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.type'' @:: Lens' NewAddressRequest AddressType@
 -}
data NewAddressRequest = NewAddressRequest{_NewAddressRequest'type'
                                           :: !AddressType,
                                           _NewAddressRequest'_unknownFields ::
                                           !Data.ProtoLens.FieldSet}
                           deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show NewAddressRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField NewAddressRequest "type'"
           (AddressType)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NewAddressRequest'type'
               (\ x__ y__ -> x__{_NewAddressRequest'type' = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message NewAddressRequest where
        messageName _ = Data.Text.pack "lnrpc.NewAddressRequest"
        fieldsByTag
          = let type'__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "type"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                         Data.ProtoLens.FieldTypeDescriptor AddressType)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"type'"))
                      :: Data.ProtoLens.FieldDescriptor NewAddressRequest
              in
              Data.Map.fromList [(Data.ProtoLens.Tag 1, type'__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _NewAddressRequest'_unknownFields
              (\ x__ y__ -> x__{_NewAddressRequest'_unknownFields = y__})
        defMessage
          = NewAddressRequest{_NewAddressRequest'type' =
                                Data.ProtoLens.fieldDefault,
                              _NewAddressRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     NewAddressRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser NewAddressRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.toEnum
                                                (Prelude.fmap Prelude.fromIntegral
                                                   Data.ProtoLens.Encoding.Bytes.getVarInt))
                                               Data.ProtoLens.Encoding.Bytes.<?> "type"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y
                                             x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "NewAddressRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      (((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                          Prelude.fromIntegral)
                         Prelude.. Prelude.fromEnum)
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData NewAddressRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_NewAddressRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_NewAddressRequest'type' x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.address' @:: Lens' NewAddressResponse Data.Text.Text@
 -}
data NewAddressResponse = NewAddressResponse{_NewAddressResponse'address
                                             :: !Data.Text.Text,
                                             _NewAddressResponse'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show NewAddressResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField NewAddressResponse "address"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NewAddressResponse'address
               (\ x__ y__ -> x__{_NewAddressResponse'address = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message NewAddressResponse where
        messageName _ = Data.Text.pack "lnrpc.NewAddressResponse"
        fieldsByTag
          = let address__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "address"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"address"))
                      :: Data.ProtoLens.FieldDescriptor NewAddressResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, address__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _NewAddressResponse'_unknownFields
              (\ x__ y__ -> x__{_NewAddressResponse'_unknownFields = y__})
        defMessage
          = NewAddressResponse{_NewAddressResponse'address =
                                 Data.ProtoLens.fieldDefault,
                               _NewAddressResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     NewAddressResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser NewAddressResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "address"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"address")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "NewAddressResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"address") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData NewAddressResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_NewAddressResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_NewAddressResponse'address x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.network' @:: Lens' NodeAddress Data.Text.Text@
    * 'Proto.Rpc_Fields.addr' @:: Lens' NodeAddress Data.Text.Text@
 -}
data NodeAddress = NodeAddress{_NodeAddress'network ::
                               !Data.Text.Text,
                               _NodeAddress'addr :: !Data.Text.Text,
                               _NodeAddress'_unknownFields :: !Data.ProtoLens.FieldSet}
                     deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show NodeAddress where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField NodeAddress "network"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeAddress'network
               (\ x__ y__ -> x__{_NodeAddress'network = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NodeAddress "addr"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeAddress'addr
               (\ x__ y__ -> x__{_NodeAddress'addr = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message NodeAddress where
        messageName _ = Data.Text.pack "lnrpc.NodeAddress"
        fieldsByTag
          = let network__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "network"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"network"))
                      :: Data.ProtoLens.FieldDescriptor NodeAddress
                addr__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "addr"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"addr"))
                      :: Data.ProtoLens.FieldDescriptor NodeAddress
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, network__field_descriptor),
                 (Data.ProtoLens.Tag 2, addr__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _NodeAddress'_unknownFields
              (\ x__ y__ -> x__{_NodeAddress'_unknownFields = y__})
        defMessage
          = NodeAddress{_NodeAddress'network = Data.ProtoLens.fieldDefault,
                        _NodeAddress'addr = Data.ProtoLens.fieldDefault,
                        _NodeAddress'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     NodeAddress -> Data.ProtoLens.Encoding.Bytes.Parser NodeAddress
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "network"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"network")
                                              y
                                              x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "addr"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"addr") y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "NodeAddress"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"network") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"addr") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData NodeAddress where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_NodeAddress'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_NodeAddress'network x__)
                    (Control.DeepSeq.deepseq (_NodeAddress'addr x__) (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.node' @:: Lens' NodeInfo LightningNode@
    * 'Proto.Rpc_Fields.maybe'node' @:: Lens' NodeInfo (Prelude.Maybe LightningNode)@
    * 'Proto.Rpc_Fields.numChannels' @:: Lens' NodeInfo Data.Word.Word32@
    * 'Proto.Rpc_Fields.totalCapacity' @:: Lens' NodeInfo Data.Int.Int64@
 -}
data NodeInfo = NodeInfo{_NodeInfo'node ::
                         !(Prelude.Maybe LightningNode),
                         _NodeInfo'numChannels :: !Data.Word.Word32,
                         _NodeInfo'totalCapacity :: !Data.Int.Int64,
                         _NodeInfo'_unknownFields :: !Data.ProtoLens.FieldSet}
                  deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show NodeInfo where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField NodeInfo "node"
           (LightningNode)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeInfo'node
               (\ x__ y__ -> x__{_NodeInfo'node = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField NodeInfo "maybe'node"
           (Prelude.Maybe LightningNode)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeInfo'node
               (\ x__ y__ -> x__{_NodeInfo'node = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NodeInfo "numChannels"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeInfo'numChannels
               (\ x__ y__ -> x__{_NodeInfo'numChannels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NodeInfo "totalCapacity"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeInfo'totalCapacity
               (\ x__ y__ -> x__{_NodeInfo'totalCapacity = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message NodeInfo where
        messageName _ = Data.Text.pack "lnrpc.NodeInfo"
        fieldsByTag
          = let node__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "node"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor LightningNode)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'node"))
                      :: Data.ProtoLens.FieldDescriptor NodeInfo
                numChannels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_channels"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numChannels"))
                      :: Data.ProtoLens.FieldDescriptor NodeInfo
                totalCapacity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_capacity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalCapacity"))
                      :: Data.ProtoLens.FieldDescriptor NodeInfo
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, node__field_descriptor),
                 (Data.ProtoLens.Tag 2, numChannels__field_descriptor),
                 (Data.ProtoLens.Tag 3, totalCapacity__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _NodeInfo'_unknownFields
              (\ x__ y__ -> x__{_NodeInfo'_unknownFields = y__})
        defMessage
          = NodeInfo{_NodeInfo'node = Prelude.Nothing,
                     _NodeInfo'numChannels = Data.ProtoLens.fieldDefault,
                     _NodeInfo'totalCapacity = Data.ProtoLens.fieldDefault,
                     _NodeInfo'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     NodeInfo -> Data.ProtoLens.Encoding.Bytes.Parser NodeInfo
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "node"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"node") y
                                              x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "num_channels"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numChannels")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "total_capacity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"totalCapacity")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "NodeInfo"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'node") _x of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"numChannels") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"totalCapacity")
                              _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                       (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData NodeInfo where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_NodeInfo'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_NodeInfo'node x__)
                    (Control.DeepSeq.deepseq (_NodeInfo'numChannels x__)
                       (Control.DeepSeq.deepseq (_NodeInfo'totalCapacity x__) (())))))
{- | Fields :

    * 'Proto.Rpc_Fields.pubKey' @:: Lens' NodeInfoRequest Data.Text.Text@
 -}
data NodeInfoRequest = NodeInfoRequest{_NodeInfoRequest'pubKey ::
                                       !Data.Text.Text,
                                       _NodeInfoRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
                         deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show NodeInfoRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField NodeInfoRequest "pubKey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeInfoRequest'pubKey
               (\ x__ y__ -> x__{_NodeInfoRequest'pubKey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message NodeInfoRequest where
        messageName _ = Data.Text.pack "lnrpc.NodeInfoRequest"
        fieldsByTag
          = let pubKey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pub_key"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pubKey"))
                      :: Data.ProtoLens.FieldDescriptor NodeInfoRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, pubKey__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _NodeInfoRequest'_unknownFields
              (\ x__ y__ -> x__{_NodeInfoRequest'_unknownFields = y__})
        defMessage
          = NodeInfoRequest{_NodeInfoRequest'pubKey =
                              Data.ProtoLens.fieldDefault,
                            _NodeInfoRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     NodeInfoRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser NodeInfoRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "pub_key"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"pubKey")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "NodeInfoRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"pubKey") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData NodeInfoRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_NodeInfoRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_NodeInfoRequest'pubKey x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.addresses' @:: Lens' NodeUpdate [Data.Text.Text]@
    * 'Proto.Rpc_Fields.vec'addresses' @:: Lens' NodeUpdate (Data.Vector.Vector Data.Text.Text)@
    * 'Proto.Rpc_Fields.identityKey' @:: Lens' NodeUpdate Data.Text.Text@
    * 'Proto.Rpc_Fields.globalFeatures' @:: Lens' NodeUpdate Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.alias' @:: Lens' NodeUpdate Data.Text.Text@
 -}
data NodeUpdate = NodeUpdate{_NodeUpdate'addresses ::
                             !(Data.Vector.Vector Data.Text.Text),
                             _NodeUpdate'identityKey :: !Data.Text.Text,
                             _NodeUpdate'globalFeatures :: !Data.ByteString.ByteString,
                             _NodeUpdate'alias :: !Data.Text.Text,
                             _NodeUpdate'_unknownFields :: !Data.ProtoLens.FieldSet}
                    deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show NodeUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField NodeUpdate "addresses"
           ([Data.Text.Text])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeUpdate'addresses
               (\ x__ y__ -> x__{_NodeUpdate'addresses = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField NodeUpdate "vec'addresses"
           (Data.Vector.Vector Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeUpdate'addresses
               (\ x__ y__ -> x__{_NodeUpdate'addresses = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NodeUpdate "identityKey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeUpdate'identityKey
               (\ x__ y__ -> x__{_NodeUpdate'identityKey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NodeUpdate "globalFeatures"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeUpdate'globalFeatures
               (\ x__ y__ -> x__{_NodeUpdate'globalFeatures = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField NodeUpdate "alias"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _NodeUpdate'alias
               (\ x__ y__ -> x__{_NodeUpdate'alias = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message NodeUpdate where
        messageName _ = Data.Text.pack "lnrpc.NodeUpdate"
        fieldsByTag
          = let addresses__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "addresses"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"addresses"))
                      :: Data.ProtoLens.FieldDescriptor NodeUpdate
                identityKey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "identity_key"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"identityKey"))
                      :: Data.ProtoLens.FieldDescriptor NodeUpdate
                globalFeatures__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "global_features"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"globalFeatures"))
                      :: Data.ProtoLens.FieldDescriptor NodeUpdate
                alias__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "alias"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"alias"))
                      :: Data.ProtoLens.FieldDescriptor NodeUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, addresses__field_descriptor),
                 (Data.ProtoLens.Tag 2, identityKey__field_descriptor),
                 (Data.ProtoLens.Tag 3, globalFeatures__field_descriptor),
                 (Data.ProtoLens.Tag 4, alias__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _NodeUpdate'_unknownFields
              (\ x__ y__ -> x__{_NodeUpdate'_unknownFields = y__})
        defMessage
          = NodeUpdate{_NodeUpdate'addresses = Data.Vector.Generic.empty,
                       _NodeUpdate'identityKey = Data.ProtoLens.fieldDefault,
                       _NodeUpdate'globalFeatures = Data.ProtoLens.fieldDefault,
                       _NodeUpdate'alias = Data.ProtoLens.fieldDefault,
                       _NodeUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     NodeUpdate ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Data.Text.Text
                         -> Data.ProtoLens.Encoding.Bytes.Parser NodeUpdate
                loop x mutable'addresses
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'addresses <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                  (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                     mutable'addresses)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'addresses")
                                    frozen'addresses
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                               Data.ProtoLens.Encoding.Bytes.getBytes
                                                                 (Prelude.fromIntegral len)
                                                   Data.ProtoLens.Encoding.Bytes.runEither
                                                     (case Data.Text.Encoding.decodeUtf8' value of
                                                          Prelude.Left err -> Prelude.Left
                                                                                (Prelude.show err)
                                                          Prelude.Right r -> Prelude.Right r))
                                                 Data.ProtoLens.Encoding.Bytes.<?> "addresses"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'addresses
                                                   y)
                                         loop x v
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "identity_key"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"identityKey")
                                              y
                                              x)
                                           mutable'addresses
                                26 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "global_features"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"globalFeatures")
                                              y
                                              x)
                                           mutable'addresses
                                34 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "alias"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"alias") y
                                              x)
                                           mutable'addresses
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'addresses
              in
              (do mutable'addresses <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'addresses)
                Data.ProtoLens.Encoding.Bytes.<?> "NodeUpdate"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.Text.Encoding.encodeUtf8)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'addresses")
                     _x))
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"identityKey") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"globalFeatures")
                              _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                          (\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"alias") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                            (((\ bs ->
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                               Prelude.. Data.Text.Encoding.encodeUtf8)
                              _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData NodeUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_NodeUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_NodeUpdate'addresses x__)
                    (Control.DeepSeq.deepseq (_NodeUpdate'identityKey x__)
                       (Control.DeepSeq.deepseq (_NodeUpdate'globalFeatures x__)
                          (Control.DeepSeq.deepseq (_NodeUpdate'alias x__) (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.nodePubkey' @:: Lens' OpenChannelRequest Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.nodePubkeyString' @:: Lens' OpenChannelRequest Data.Text.Text@
    * 'Proto.Rpc_Fields.localFundingAmount' @:: Lens' OpenChannelRequest Data.Int.Int64@
    * 'Proto.Rpc_Fields.pushSat' @:: Lens' OpenChannelRequest Data.Int.Int64@
    * 'Proto.Rpc_Fields.targetConf' @:: Lens' OpenChannelRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.satPerByte' @:: Lens' OpenChannelRequest Data.Int.Int64@
    * 'Proto.Rpc_Fields.private' @:: Lens' OpenChannelRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.minHtlcMsat' @:: Lens' OpenChannelRequest Data.Int.Int64@
    * 'Proto.Rpc_Fields.remoteCsvDelay' @:: Lens' OpenChannelRequest Data.Word.Word32@
    * 'Proto.Rpc_Fields.minConfs' @:: Lens' OpenChannelRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.spendUnconfirmed' @:: Lens' OpenChannelRequest Prelude.Bool@
 -}
data OpenChannelRequest = OpenChannelRequest{_OpenChannelRequest'nodePubkey
                                             :: !Data.ByteString.ByteString,
                                             _OpenChannelRequest'nodePubkeyString ::
                                             !Data.Text.Text,
                                             _OpenChannelRequest'localFundingAmount ::
                                             !Data.Int.Int64,
                                             _OpenChannelRequest'pushSat :: !Data.Int.Int64,
                                             _OpenChannelRequest'targetConf :: !Data.Int.Int32,
                                             _OpenChannelRequest'satPerByte :: !Data.Int.Int64,
                                             _OpenChannelRequest'private :: !Prelude.Bool,
                                             _OpenChannelRequest'minHtlcMsat :: !Data.Int.Int64,
                                             _OpenChannelRequest'remoteCsvDelay ::
                                             !Data.Word.Word32,
                                             _OpenChannelRequest'minConfs :: !Data.Int.Int32,
                                             _OpenChannelRequest'spendUnconfirmed :: !Prelude.Bool,
                                             _OpenChannelRequest'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show OpenChannelRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField OpenChannelRequest
           "nodePubkey"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenChannelRequest'nodePubkey
               (\ x__ y__ -> x__{_OpenChannelRequest'nodePubkey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenChannelRequest
           "nodePubkeyString"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenChannelRequest'nodePubkeyString
               (\ x__ y__ -> x__{_OpenChannelRequest'nodePubkeyString = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenChannelRequest
           "localFundingAmount"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _OpenChannelRequest'localFundingAmount
               (\ x__ y__ -> x__{_OpenChannelRequest'localFundingAmount = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenChannelRequest "pushSat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenChannelRequest'pushSat
               (\ x__ y__ -> x__{_OpenChannelRequest'pushSat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenChannelRequest
           "targetConf"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenChannelRequest'targetConf
               (\ x__ y__ -> x__{_OpenChannelRequest'targetConf = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenChannelRequest
           "satPerByte"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenChannelRequest'satPerByte
               (\ x__ y__ -> x__{_OpenChannelRequest'satPerByte = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenChannelRequest "private"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenChannelRequest'private
               (\ x__ y__ -> x__{_OpenChannelRequest'private = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenChannelRequest
           "minHtlcMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenChannelRequest'minHtlcMsat
               (\ x__ y__ -> x__{_OpenChannelRequest'minHtlcMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenChannelRequest
           "remoteCsvDelay"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenChannelRequest'remoteCsvDelay
               (\ x__ y__ -> x__{_OpenChannelRequest'remoteCsvDelay = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenChannelRequest
           "minConfs"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenChannelRequest'minConfs
               (\ x__ y__ -> x__{_OpenChannelRequest'minConfs = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenChannelRequest
           "spendUnconfirmed"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenChannelRequest'spendUnconfirmed
               (\ x__ y__ -> x__{_OpenChannelRequest'spendUnconfirmed = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message OpenChannelRequest where
        messageName _ = Data.Text.pack "lnrpc.OpenChannelRequest"
        fieldsByTag
          = let nodePubkey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "node_pubkey"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"nodePubkey"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
                nodePubkeyString__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "node_pubkey_string"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"nodePubkeyString"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
                localFundingAmount__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "local_funding_amount"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"localFundingAmount"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
                pushSat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "push_sat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pushSat"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
                targetConf__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "target_conf"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"targetConf"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
                satPerByte__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "sat_per_byte"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"satPerByte"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
                private__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "private"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"private"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
                minHtlcMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "min_htlc_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"minHtlcMsat"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
                remoteCsvDelay__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "remote_csv_delay"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"remoteCsvDelay"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
                minConfs__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "min_confs"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"minConfs"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
                spendUnconfirmed__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "spend_unconfirmed"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"spendUnconfirmed"))
                      :: Data.ProtoLens.FieldDescriptor OpenChannelRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 2, nodePubkey__field_descriptor),
                 (Data.ProtoLens.Tag 3, nodePubkeyString__field_descriptor),
                 (Data.ProtoLens.Tag 4, localFundingAmount__field_descriptor),
                 (Data.ProtoLens.Tag 5, pushSat__field_descriptor),
                 (Data.ProtoLens.Tag 6, targetConf__field_descriptor),
                 (Data.ProtoLens.Tag 7, satPerByte__field_descriptor),
                 (Data.ProtoLens.Tag 8, private__field_descriptor),
                 (Data.ProtoLens.Tag 9, minHtlcMsat__field_descriptor),
                 (Data.ProtoLens.Tag 10, remoteCsvDelay__field_descriptor),
                 (Data.ProtoLens.Tag 11, minConfs__field_descriptor),
                 (Data.ProtoLens.Tag 12, spendUnconfirmed__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _OpenChannelRequest'_unknownFields
              (\ x__ y__ -> x__{_OpenChannelRequest'_unknownFields = y__})
        defMessage
          = OpenChannelRequest{_OpenChannelRequest'nodePubkey =
                                 Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'nodePubkeyString = Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'localFundingAmount =
                                 Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'pushSat = Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'targetConf = Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'satPerByte = Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'private = Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'minHtlcMsat = Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'remoteCsvDelay = Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'minConfs = Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'spendUnconfirmed = Data.ProtoLens.fieldDefault,
                               _OpenChannelRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     OpenChannelRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser OpenChannelRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "node_pubkey"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"nodePubkey")
                                              y
                                              x)
                                26 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "node_pubkey_string"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"nodePubkeyString")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "local_funding_amount"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"localFundingAmount")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "push_sat"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"pushSat")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "target_conf"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"targetConf")
                                              y
                                              x)
                                56 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "sat_per_byte"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"satPerByte")
                                              y
                                              x)
                                64 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "private"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"private")
                                              y
                                              x)
                                72 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "min_htlc_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"minHtlcMsat")
                                              y
                                              x)
                                80 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "remote_csv_delay"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"remoteCsvDelay")
                                              y
                                              x)
                                88 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "min_confs"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"minConfs")
                                              y
                                              x)
                                96 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "spend_unconfirmed"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"spendUnconfirmed")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "OpenChannelRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"nodePubkey") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view
                            (Data.ProtoLens.Field.field @"nodePubkeyString")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view
                              (Data.ProtoLens.Field.field @"localFundingAmount")
                              _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"pushSat") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"targetConf") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"satPerByte") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 56) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"private") _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 64) Data.Monoid.<>
                                  ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                     (\ b -> if b then 1 else 0))
                                    _v)
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view (Data.ProtoLens.Field.field @"minHtlcMsat")
                                        _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 72) Data.Monoid.<>
                                    ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                       Prelude.fromIntegral)
                                      _v)
                               Data.Monoid.<>
                               (let _v
                                      = Lens.Family2.view
                                          (Data.ProtoLens.Field.field @"remoteCsvDelay")
                                          _x
                                  in
                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                    Data.Monoid.mempty else
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 80) Data.Monoid.<>
                                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                         Prelude.fromIntegral)
                                        _v)
                                 Data.Monoid.<>
                                 (let _v
                                        = Lens.Family2.view (Data.ProtoLens.Field.field @"minConfs")
                                            _x
                                    in
                                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                      Data.Monoid.mempty else
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 88) Data.Monoid.<>
                                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                           Prelude.fromIntegral)
                                          _v)
                                   Data.Monoid.<>
                                   (let _v
                                          = Lens.Family2.view
                                              (Data.ProtoLens.Field.field @"spendUnconfirmed")
                                              _x
                                      in
                                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                        Data.Monoid.mempty else
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 96) Data.Monoid.<>
                                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                             (\ b -> if b then 1 else 0))
                                            _v)
                                     Data.Monoid.<>
                                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                                       (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData OpenChannelRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_OpenChannelRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_OpenChannelRequest'nodePubkey x__)
                    (Control.DeepSeq.deepseq (_OpenChannelRequest'nodePubkeyString x__)
                       (Control.DeepSeq.deepseq
                          (_OpenChannelRequest'localFundingAmount x__)
                          (Control.DeepSeq.deepseq (_OpenChannelRequest'pushSat x__)
                             (Control.DeepSeq.deepseq (_OpenChannelRequest'targetConf x__)
                                (Control.DeepSeq.deepseq (_OpenChannelRequest'satPerByte x__)
                                   (Control.DeepSeq.deepseq (_OpenChannelRequest'private x__)
                                      (Control.DeepSeq.deepseq (_OpenChannelRequest'minHtlcMsat x__)
                                         (Control.DeepSeq.deepseq
                                            (_OpenChannelRequest'remoteCsvDelay x__)
                                            (Control.DeepSeq.deepseq
                                               (_OpenChannelRequest'minConfs x__)
                                               (Control.DeepSeq.deepseq
                                                  (_OpenChannelRequest'spendUnconfirmed x__)
                                                  (())))))))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.maybe'update' @:: Lens' OpenStatusUpdate (Prelude.Maybe OpenStatusUpdate'Update)@
    * 'Proto.Rpc_Fields.maybe'chanPending' @:: Lens' OpenStatusUpdate (Prelude.Maybe PendingUpdate)@
    * 'Proto.Rpc_Fields.chanPending' @:: Lens' OpenStatusUpdate PendingUpdate@
    * 'Proto.Rpc_Fields.maybe'chanOpen' @:: Lens' OpenStatusUpdate (Prelude.Maybe ChannelOpenUpdate)@
    * 'Proto.Rpc_Fields.chanOpen' @:: Lens' OpenStatusUpdate ChannelOpenUpdate@
 -}
data OpenStatusUpdate = OpenStatusUpdate{_OpenStatusUpdate'update
                                         :: !(Prelude.Maybe OpenStatusUpdate'Update),
                                         _OpenStatusUpdate'_unknownFields ::
                                         !Data.ProtoLens.FieldSet}
                          deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show OpenStatusUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
data OpenStatusUpdate'Update = OpenStatusUpdate'ChanPending !PendingUpdate
                             | OpenStatusUpdate'ChanOpen !ChannelOpenUpdate
                                 deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField OpenStatusUpdate
           "maybe'update"
           (Prelude.Maybe OpenStatusUpdate'Update)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenStatusUpdate'update
               (\ x__ y__ -> x__{_OpenStatusUpdate'update = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OpenStatusUpdate
           "maybe'chanPending"
           (Prelude.Maybe PendingUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenStatusUpdate'update
               (\ x__ y__ -> x__{_OpenStatusUpdate'update = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just (OpenStatusUpdate'ChanPending x__val) -> Prelude.Just
                                                                               x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap OpenStatusUpdate'ChanPending y__)
instance Data.ProtoLens.Field.HasField OpenStatusUpdate
           "chanPending"
           (PendingUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenStatusUpdate'update
               (\ x__ y__ -> x__{_OpenStatusUpdate'update = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just (OpenStatusUpdate'ChanPending x__val) -> Prelude.Just
                                                                                x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap OpenStatusUpdate'ChanPending y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField OpenStatusUpdate
           "maybe'chanOpen"
           (Prelude.Maybe ChannelOpenUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenStatusUpdate'update
               (\ x__ y__ -> x__{_OpenStatusUpdate'update = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just (OpenStatusUpdate'ChanOpen x__val) -> Prelude.Just
                                                                            x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap OpenStatusUpdate'ChanOpen y__)
instance Data.ProtoLens.Field.HasField OpenStatusUpdate "chanOpen"
           (ChannelOpenUpdate)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OpenStatusUpdate'update
               (\ x__ y__ -> x__{_OpenStatusUpdate'update = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just (OpenStatusUpdate'ChanOpen x__val) -> Prelude.Just
                                                                             x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap OpenStatusUpdate'ChanOpen y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Message OpenStatusUpdate where
        messageName _ = Data.Text.pack "lnrpc.OpenStatusUpdate"
        fieldsByTag
          = let chanPending__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_pending"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor PendingUpdate)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'chanPending"))
                      :: Data.ProtoLens.FieldDescriptor OpenStatusUpdate
                chanOpen__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_open"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelOpenUpdate)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'chanOpen"))
                      :: Data.ProtoLens.FieldDescriptor OpenStatusUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanPending__field_descriptor),
                 (Data.ProtoLens.Tag 3, chanOpen__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _OpenStatusUpdate'_unknownFields
              (\ x__ y__ -> x__{_OpenStatusUpdate'_unknownFields = y__})
        defMessage
          = OpenStatusUpdate{_OpenStatusUpdate'update = Prelude.Nothing,
                             _OpenStatusUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     OpenStatusUpdate ->
                       Data.ProtoLens.Encoding.Bytes.Parser OpenStatusUpdate
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_pending"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanPending")
                                              y
                                              x)
                                26 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_open"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanOpen")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "OpenStatusUpdate"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'update") _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just
                      (OpenStatusUpdate'ChanPending
                         v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                                 (((\ bs ->
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Prelude.. Data.ProtoLens.encodeMessage)
                                   v
                    Prelude.Just
                      (OpenStatusUpdate'ChanOpen
                         v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                                 (((\ bs ->
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Prelude.. Data.ProtoLens.encodeMessage)
                                   v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData OpenStatusUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_OpenStatusUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_OpenStatusUpdate'update x__) (())))
instance Control.DeepSeq.NFData OpenStatusUpdate'Update where
        rnf (OpenStatusUpdate'ChanPending x__) = Control.DeepSeq.rnf x__
        rnf (OpenStatusUpdate'ChanOpen x__) = Control.DeepSeq.rnf x__
_OpenStatusUpdate'ChanPending ::
                              Data.ProtoLens.Prism.Prism' OpenStatusUpdate'Update PendingUpdate
_OpenStatusUpdate'ChanPending
  = Data.ProtoLens.Prism.prism' OpenStatusUpdate'ChanPending
      (\ p__ ->
         case p__ of
             OpenStatusUpdate'ChanPending p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
_OpenStatusUpdate'ChanOpen ::
                           Data.ProtoLens.Prism.Prism' OpenStatusUpdate'Update
                             ChannelOpenUpdate
_OpenStatusUpdate'ChanOpen
  = Data.ProtoLens.Prism.prism' OpenStatusUpdate'ChanOpen
      (\ p__ ->
         case p__ of
             OpenStatusUpdate'ChanOpen p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
{- | Fields :

    * 'Proto.Rpc_Fields.txidBytes' @:: Lens' OutPoint Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.txidStr' @:: Lens' OutPoint Data.Text.Text@
    * 'Proto.Rpc_Fields.outputIndex' @:: Lens' OutPoint Data.Word.Word32@
 -}
data OutPoint = OutPoint{_OutPoint'txidBytes ::
                         !Data.ByteString.ByteString,
                         _OutPoint'txidStr :: !Data.Text.Text,
                         _OutPoint'outputIndex :: !Data.Word.Word32,
                         _OutPoint'_unknownFields :: !Data.ProtoLens.FieldSet}
                  deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show OutPoint where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField OutPoint "txidBytes"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OutPoint'txidBytes
               (\ x__ y__ -> x__{_OutPoint'txidBytes = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OutPoint "txidStr"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OutPoint'txidStr
               (\ x__ y__ -> x__{_OutPoint'txidStr = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField OutPoint "outputIndex"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _OutPoint'outputIndex
               (\ x__ y__ -> x__{_OutPoint'outputIndex = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message OutPoint where
        messageName _ = Data.Text.pack "lnrpc.OutPoint"
        fieldsByTag
          = let txidBytes__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "txid_bytes"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"txidBytes"))
                      :: Data.ProtoLens.FieldDescriptor OutPoint
                txidStr__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "txid_str"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"txidStr"))
                      :: Data.ProtoLens.FieldDescriptor OutPoint
                outputIndex__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "output_index"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"outputIndex"))
                      :: Data.ProtoLens.FieldDescriptor OutPoint
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, txidBytes__field_descriptor),
                 (Data.ProtoLens.Tag 2, txidStr__field_descriptor),
                 (Data.ProtoLens.Tag 3, outputIndex__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _OutPoint'_unknownFields
              (\ x__ y__ -> x__{_OutPoint'_unknownFields = y__})
        defMessage
          = OutPoint{_OutPoint'txidBytes = Data.ProtoLens.fieldDefault,
                     _OutPoint'txidStr = Data.ProtoLens.fieldDefault,
                     _OutPoint'outputIndex = Data.ProtoLens.fieldDefault,
                     _OutPoint'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     OutPoint -> Data.ProtoLens.Encoding.Bytes.Parser OutPoint
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "txid_bytes"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"txidBytes")
                                              y
                                              x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "txid_str"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"txidStr")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "output_index"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"outputIndex")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "OutPoint"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"txidBytes") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"txidStr") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"outputIndex") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                       (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData OutPoint where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_OutPoint'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_OutPoint'txidBytes x__)
                    (Control.DeepSeq.deepseq (_OutPoint'txidStr x__)
                       (Control.DeepSeq.deepseq (_OutPoint'outputIndex x__) (())))))
{- | Fields :

    * 'Proto.Rpc_Fields.destination' @:: Lens' PayReq Data.Text.Text@
    * 'Proto.Rpc_Fields.paymentHash' @:: Lens' PayReq Data.Text.Text@
    * 'Proto.Rpc_Fields.numSatoshis' @:: Lens' PayReq Data.Int.Int64@
    * 'Proto.Rpc_Fields.timestamp' @:: Lens' PayReq Data.Int.Int64@
    * 'Proto.Rpc_Fields.expiry' @:: Lens' PayReq Data.Int.Int64@
    * 'Proto.Rpc_Fields.description' @:: Lens' PayReq Data.Text.Text@
    * 'Proto.Rpc_Fields.descriptionHash' @:: Lens' PayReq Data.Text.Text@
    * 'Proto.Rpc_Fields.fallbackAddr' @:: Lens' PayReq Data.Text.Text@
    * 'Proto.Rpc_Fields.cltvExpiry' @:: Lens' PayReq Data.Int.Int64@
    * 'Proto.Rpc_Fields.routeHints' @:: Lens' PayReq [RouteHint]@
    * 'Proto.Rpc_Fields.vec'routeHints' @:: Lens' PayReq (Data.Vector.Vector RouteHint)@
 -}
data PayReq = PayReq{_PayReq'destination :: !Data.Text.Text,
                     _PayReq'paymentHash :: !Data.Text.Text,
                     _PayReq'numSatoshis :: !Data.Int.Int64,
                     _PayReq'timestamp :: !Data.Int.Int64,
                     _PayReq'expiry :: !Data.Int.Int64,
                     _PayReq'description :: !Data.Text.Text,
                     _PayReq'descriptionHash :: !Data.Text.Text,
                     _PayReq'fallbackAddr :: !Data.Text.Text,
                     _PayReq'cltvExpiry :: !Data.Int.Int64,
                     _PayReq'routeHints :: !(Data.Vector.Vector RouteHint),
                     _PayReq'_unknownFields :: !Data.ProtoLens.FieldSet}
                deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PayReq where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PayReq "destination"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'destination
               (\ x__ y__ -> x__{_PayReq'destination = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PayReq "paymentHash"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'paymentHash
               (\ x__ y__ -> x__{_PayReq'paymentHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PayReq "numSatoshis"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'numSatoshis
               (\ x__ y__ -> x__{_PayReq'numSatoshis = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PayReq "timestamp"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'timestamp
               (\ x__ y__ -> x__{_PayReq'timestamp = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PayReq "expiry"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'expiry
               (\ x__ y__ -> x__{_PayReq'expiry = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PayReq "description"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'description
               (\ x__ y__ -> x__{_PayReq'description = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PayReq "descriptionHash"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'descriptionHash
               (\ x__ y__ -> x__{_PayReq'descriptionHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PayReq "fallbackAddr"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'fallbackAddr
               (\ x__ y__ -> x__{_PayReq'fallbackAddr = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PayReq "cltvExpiry"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'cltvExpiry
               (\ x__ y__ -> x__{_PayReq'cltvExpiry = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PayReq "routeHints"
           ([RouteHint])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'routeHints
               (\ x__ y__ -> x__{_PayReq'routeHints = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField PayReq "vec'routeHints"
           (Data.Vector.Vector RouteHint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReq'routeHints
               (\ x__ y__ -> x__{_PayReq'routeHints = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message PayReq where
        messageName _ = Data.Text.pack "lnrpc.PayReq"
        fieldsByTag
          = let destination__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "destination"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"destination"))
                      :: Data.ProtoLens.FieldDescriptor PayReq
                paymentHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentHash"))
                      :: Data.ProtoLens.FieldDescriptor PayReq
                numSatoshis__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_satoshis"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numSatoshis"))
                      :: Data.ProtoLens.FieldDescriptor PayReq
                timestamp__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "timestamp"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"timestamp"))
                      :: Data.ProtoLens.FieldDescriptor PayReq
                expiry__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "expiry"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"expiry"))
                      :: Data.ProtoLens.FieldDescriptor PayReq
                description__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "description"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"description"))
                      :: Data.ProtoLens.FieldDescriptor PayReq
                descriptionHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "description_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"descriptionHash"))
                      :: Data.ProtoLens.FieldDescriptor PayReq
                fallbackAddr__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fallback_addr"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"fallbackAddr"))
                      :: Data.ProtoLens.FieldDescriptor PayReq
                cltvExpiry__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "cltv_expiry"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"cltvExpiry"))
                      :: Data.ProtoLens.FieldDescriptor PayReq
                routeHints__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "route_hints"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor RouteHint)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"routeHints"))
                      :: Data.ProtoLens.FieldDescriptor PayReq
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, destination__field_descriptor),
                 (Data.ProtoLens.Tag 2, paymentHash__field_descriptor),
                 (Data.ProtoLens.Tag 3, numSatoshis__field_descriptor),
                 (Data.ProtoLens.Tag 4, timestamp__field_descriptor),
                 (Data.ProtoLens.Tag 5, expiry__field_descriptor),
                 (Data.ProtoLens.Tag 6, description__field_descriptor),
                 (Data.ProtoLens.Tag 7, descriptionHash__field_descriptor),
                 (Data.ProtoLens.Tag 8, fallbackAddr__field_descriptor),
                 (Data.ProtoLens.Tag 9, cltvExpiry__field_descriptor),
                 (Data.ProtoLens.Tag 10, routeHints__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _PayReq'_unknownFields
              (\ x__ y__ -> x__{_PayReq'_unknownFields = y__})
        defMessage
          = PayReq{_PayReq'destination = Data.ProtoLens.fieldDefault,
                   _PayReq'paymentHash = Data.ProtoLens.fieldDefault,
                   _PayReq'numSatoshis = Data.ProtoLens.fieldDefault,
                   _PayReq'timestamp = Data.ProtoLens.fieldDefault,
                   _PayReq'expiry = Data.ProtoLens.fieldDefault,
                   _PayReq'description = Data.ProtoLens.fieldDefault,
                   _PayReq'descriptionHash = Data.ProtoLens.fieldDefault,
                   _PayReq'fallbackAddr = Data.ProtoLens.fieldDefault,
                   _PayReq'cltvExpiry = Data.ProtoLens.fieldDefault,
                   _PayReq'routeHints = Data.Vector.Generic.empty,
                   _PayReq'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     PayReq ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         RouteHint
                         -> Data.ProtoLens.Encoding.Bytes.Parser PayReq
                loop x mutable'routeHints
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'routeHints <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                   (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                      mutable'routeHints)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'routeHints")
                                    frozen'routeHints
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "destination"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"destination")
                                              y
                                              x)
                                           mutable'routeHints
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentHash")
                                              y
                                              x)
                                           mutable'routeHints
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "num_satoshis"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numSatoshis")
                                              y
                                              x)
                                           mutable'routeHints
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "timestamp"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"timestamp")
                                              y
                                              x)
                                           mutable'routeHints
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "expiry"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"expiry")
                                              y
                                              x)
                                           mutable'routeHints
                                50 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "description"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"description")
                                              y
                                              x)
                                           mutable'routeHints
                                58 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "description_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"descriptionHash")
                                              y
                                              x)
                                           mutable'routeHints
                                66 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "fallback_addr"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"fallbackAddr")
                                              y
                                              x)
                                           mutable'routeHints
                                72 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "cltv_expiry"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"cltvExpiry")
                                              y
                                              x)
                                           mutable'routeHints
                                82 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "route_hints"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'routeHints
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'routeHints
              in
              (do mutable'routeHints <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'routeHints)
                Data.ProtoLens.Encoding.Bytes.<?> "PayReq"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"destination") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"paymentHash") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"numSatoshis") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"timestamp") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"expiry") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"description") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 50) Data.Monoid.<>
                                (((\ bs ->
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                       Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Prelude.. Data.Text.Encoding.encodeUtf8)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"descriptionHash")
                                      _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 58) Data.Monoid.<>
                                  (((\ bs ->
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                          (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                     Prelude.. Data.Text.Encoding.encodeUtf8)
                                    _v)
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view (Data.ProtoLens.Field.field @"fallbackAddr")
                                        _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 66) Data.Monoid.<>
                                    (((\ bs ->
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           Data.Monoid.<>
                                           Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                       Prelude.. Data.Text.Encoding.encodeUtf8)
                                      _v)
                               Data.Monoid.<>
                               (let _v
                                      = Lens.Family2.view (Data.ProtoLens.Field.field @"cltvExpiry")
                                          _x
                                  in
                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                    Data.Monoid.mempty else
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 72) Data.Monoid.<>
                                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                         Prelude.fromIntegral)
                                        _v)
                                 Data.Monoid.<>
                                 (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                    (\ _v ->
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt 82) Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                                    (Lens.Family2.view
                                       (Data.ProtoLens.Field.field @"vec'routeHints")
                                       _x))
                                   Data.Monoid.<>
                                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData PayReq where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_PayReq'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_PayReq'destination x__)
                    (Control.DeepSeq.deepseq (_PayReq'paymentHash x__)
                       (Control.DeepSeq.deepseq (_PayReq'numSatoshis x__)
                          (Control.DeepSeq.deepseq (_PayReq'timestamp x__)
                             (Control.DeepSeq.deepseq (_PayReq'expiry x__)
                                (Control.DeepSeq.deepseq (_PayReq'description x__)
                                   (Control.DeepSeq.deepseq (_PayReq'descriptionHash x__)
                                      (Control.DeepSeq.deepseq (_PayReq'fallbackAddr x__)
                                         (Control.DeepSeq.deepseq (_PayReq'cltvExpiry x__)
                                            (Control.DeepSeq.deepseq (_PayReq'routeHints x__)
                                               (()))))))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.payReq' @:: Lens' PayReqString Data.Text.Text@
 -}
data PayReqString = PayReqString{_PayReqString'payReq ::
                                 !Data.Text.Text,
                                 _PayReqString'_unknownFields :: !Data.ProtoLens.FieldSet}
                      deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PayReqString where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PayReqString "payReq"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PayReqString'payReq
               (\ x__ y__ -> x__{_PayReqString'payReq = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message PayReqString where
        messageName _ = Data.Text.pack "lnrpc.PayReqString"
        fieldsByTag
          = let payReq__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pay_req"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"payReq"))
                      :: Data.ProtoLens.FieldDescriptor PayReqString
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, payReq__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _PayReqString'_unknownFields
              (\ x__ y__ -> x__{_PayReqString'_unknownFields = y__})
        defMessage
          = PayReqString{_PayReqString'payReq = Data.ProtoLens.fieldDefault,
                         _PayReqString'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     PayReqString -> Data.ProtoLens.Encoding.Bytes.Parser PayReqString
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "pay_req"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"payReq")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "PayReqString"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"payReq") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData PayReqString where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_PayReqString'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_PayReqString'payReq x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.paymentHash' @:: Lens' Payment Data.Text.Text@
    * 'Proto.Rpc_Fields.value' @:: Lens' Payment Data.Int.Int64@
    * 'Proto.Rpc_Fields.creationDate' @:: Lens' Payment Data.Int.Int64@
    * 'Proto.Rpc_Fields.path' @:: Lens' Payment [Data.Text.Text]@
    * 'Proto.Rpc_Fields.vec'path' @:: Lens' Payment (Data.Vector.Vector Data.Text.Text)@
    * 'Proto.Rpc_Fields.fee' @:: Lens' Payment Data.Int.Int64@
    * 'Proto.Rpc_Fields.paymentPreimage' @:: Lens' Payment Data.Text.Text@
    * 'Proto.Rpc_Fields.valueSat' @:: Lens' Payment Data.Int.Int64@
    * 'Proto.Rpc_Fields.valueMsat' @:: Lens' Payment Data.Int.Int64@
 -}
data Payment = Payment{_Payment'paymentHash :: !Data.Text.Text,
                       _Payment'value :: !Data.Int.Int64,
                       _Payment'creationDate :: !Data.Int.Int64,
                       _Payment'path :: !(Data.Vector.Vector Data.Text.Text),
                       _Payment'fee :: !Data.Int.Int64,
                       _Payment'paymentPreimage :: !Data.Text.Text,
                       _Payment'valueSat :: !Data.Int.Int64,
                       _Payment'valueMsat :: !Data.Int.Int64,
                       _Payment'_unknownFields :: !Data.ProtoLens.FieldSet}
                 deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Payment where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Payment "paymentHash"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Payment'paymentHash
               (\ x__ y__ -> x__{_Payment'paymentHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Payment "value"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Payment'value
               (\ x__ y__ -> x__{_Payment'value = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Payment "creationDate"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Payment'creationDate
               (\ x__ y__ -> x__{_Payment'creationDate = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Payment "path"
           ([Data.Text.Text])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Payment'path
               (\ x__ y__ -> x__{_Payment'path = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField Payment "vec'path"
           (Data.Vector.Vector Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Payment'path
               (\ x__ y__ -> x__{_Payment'path = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Payment "fee"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Payment'fee
               (\ x__ y__ -> x__{_Payment'fee = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Payment "paymentPreimage"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Payment'paymentPreimage
               (\ x__ y__ -> x__{_Payment'paymentPreimage = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Payment "valueSat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Payment'valueSat
               (\ x__ y__ -> x__{_Payment'valueSat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Payment "valueMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Payment'valueMsat
               (\ x__ y__ -> x__{_Payment'valueMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message Payment where
        messageName _ = Data.Text.pack "lnrpc.Payment"
        fieldsByTag
          = let paymentHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentHash"))
                      :: Data.ProtoLens.FieldDescriptor Payment
                value__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "value"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"value"))
                      :: Data.ProtoLens.FieldDescriptor Payment
                creationDate__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "creation_date"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"creationDate"))
                      :: Data.ProtoLens.FieldDescriptor Payment
                path__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "path"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"path"))
                      :: Data.ProtoLens.FieldDescriptor Payment
                fee__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"fee"))
                      :: Data.ProtoLens.FieldDescriptor Payment
                paymentPreimage__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_preimage"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentPreimage"))
                      :: Data.ProtoLens.FieldDescriptor Payment
                valueSat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "value_sat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"valueSat"))
                      :: Data.ProtoLens.FieldDescriptor Payment
                valueMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "value_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"valueMsat"))
                      :: Data.ProtoLens.FieldDescriptor Payment
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, paymentHash__field_descriptor),
                 (Data.ProtoLens.Tag 2, value__field_descriptor),
                 (Data.ProtoLens.Tag 3, creationDate__field_descriptor),
                 (Data.ProtoLens.Tag 4, path__field_descriptor),
                 (Data.ProtoLens.Tag 5, fee__field_descriptor),
                 (Data.ProtoLens.Tag 6, paymentPreimage__field_descriptor),
                 (Data.ProtoLens.Tag 7, valueSat__field_descriptor),
                 (Data.ProtoLens.Tag 8, valueMsat__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _Payment'_unknownFields
              (\ x__ y__ -> x__{_Payment'_unknownFields = y__})
        defMessage
          = Payment{_Payment'paymentHash = Data.ProtoLens.fieldDefault,
                    _Payment'value = Data.ProtoLens.fieldDefault,
                    _Payment'creationDate = Data.ProtoLens.fieldDefault,
                    _Payment'path = Data.Vector.Generic.empty,
                    _Payment'fee = Data.ProtoLens.fieldDefault,
                    _Payment'paymentPreimage = Data.ProtoLens.fieldDefault,
                    _Payment'valueSat = Data.ProtoLens.fieldDefault,
                    _Payment'valueMsat = Data.ProtoLens.fieldDefault,
                    _Payment'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     Payment ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Data.Text.Text
                         -> Data.ProtoLens.Encoding.Bytes.Parser Payment
                loop x mutable'path
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'path <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'path)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'path")
                                    frozen'path
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentHash")
                                              y
                                              x)
                                           mutable'path
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "value"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y
                                              x)
                                           mutable'path
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "creation_date"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"creationDate")
                                              y
                                              x)
                                           mutable'path
                                34 -> do !y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                               Data.ProtoLens.Encoding.Bytes.getBytes
                                                                 (Prelude.fromIntegral len)
                                                   Data.ProtoLens.Encoding.Bytes.runEither
                                                     (case Data.Text.Encoding.decodeUtf8' value of
                                                          Prelude.Left err -> Prelude.Left
                                                                                (Prelude.show err)
                                                          Prelude.Right r -> Prelude.Right r))
                                                 Data.ProtoLens.Encoding.Bytes.<?> "path"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append mutable'path
                                                   y)
                                         loop x v
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"fee") y
                                              x)
                                           mutable'path
                                50 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_preimage"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentPreimage")
                                              y
                                              x)
                                           mutable'path
                                56 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "value_sat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"valueSat")
                                              y
                                              x)
                                           mutable'path
                                64 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "value_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"valueMsat")
                                              y
                                              x)
                                           mutable'path
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'path
              in
              (do mutable'path <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'path)
                Data.ProtoLens.Encoding.Bytes.<?> "Payment"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"paymentHash") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"value") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"creationDate") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                        (\ _v ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                             (((\ bs ->
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                    Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Prelude.. Data.Text.Encoding.encodeUtf8)
                               _v)
                        (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'path") _x))
                       Data.Monoid.<>
                       (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"fee") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"paymentPreimage")
                                    _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 50) Data.Monoid.<>
                                (((\ bs ->
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                       Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Prelude.. Data.Text.Encoding.encodeUtf8)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"valueSat") _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 56) Data.Monoid.<>
                                  ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                     Prelude.fromIntegral)
                                    _v)
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view (Data.ProtoLens.Field.field @"valueMsat") _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 64) Data.Monoid.<>
                                    ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                       Prelude.fromIntegral)
                                      _v)
                               Data.Monoid.<>
                               Data.ProtoLens.Encoding.Wire.buildFieldSet
                                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData Payment where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_Payment'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_Payment'paymentHash x__)
                    (Control.DeepSeq.deepseq (_Payment'value x__)
                       (Control.DeepSeq.deepseq (_Payment'creationDate x__)
                          (Control.DeepSeq.deepseq (_Payment'path x__)
                             (Control.DeepSeq.deepseq (_Payment'fee x__)
                                (Control.DeepSeq.deepseq (_Payment'paymentPreimage x__)
                                   (Control.DeepSeq.deepseq (_Payment'valueSat x__)
                                      (Control.DeepSeq.deepseq (_Payment'valueMsat x__)
                                         (()))))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.rHashStr' @:: Lens' PaymentHash Data.Text.Text@
    * 'Proto.Rpc_Fields.rHash' @:: Lens' PaymentHash Data.ByteString.ByteString@
 -}
data PaymentHash = PaymentHash{_PaymentHash'rHashStr ::
                               !Data.Text.Text,
                               _PaymentHash'rHash :: !Data.ByteString.ByteString,
                               _PaymentHash'_unknownFields :: !Data.ProtoLens.FieldSet}
                     deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PaymentHash where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PaymentHash "rHashStr"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PaymentHash'rHashStr
               (\ x__ y__ -> x__{_PaymentHash'rHashStr = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PaymentHash "rHash"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PaymentHash'rHash
               (\ x__ y__ -> x__{_PaymentHash'rHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message PaymentHash where
        messageName _ = Data.Text.pack "lnrpc.PaymentHash"
        fieldsByTag
          = let rHashStr__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "r_hash_str"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"rHashStr"))
                      :: Data.ProtoLens.FieldDescriptor PaymentHash
                rHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "r_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"rHash"))
                      :: Data.ProtoLens.FieldDescriptor PaymentHash
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, rHashStr__field_descriptor),
                 (Data.ProtoLens.Tag 2, rHash__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _PaymentHash'_unknownFields
              (\ x__ y__ -> x__{_PaymentHash'_unknownFields = y__})
        defMessage
          = PaymentHash{_PaymentHash'rHashStr = Data.ProtoLens.fieldDefault,
                        _PaymentHash'rHash = Data.ProtoLens.fieldDefault,
                        _PaymentHash'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     PaymentHash -> Data.ProtoLens.Encoding.Bytes.Parser PaymentHash
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "r_hash_str"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"rHashStr")
                                              y
                                              x)
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "r_hash"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"rHash") y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "PaymentHash"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"rHashStr") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"rHash") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData PaymentHash where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_PaymentHash'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_PaymentHash'rHashStr x__)
                    (Control.DeepSeq.deepseq (_PaymentHash'rHash x__) (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.pubKey' @:: Lens' Peer Data.Text.Text@
    * 'Proto.Rpc_Fields.address' @:: Lens' Peer Data.Text.Text@
    * 'Proto.Rpc_Fields.bytesSent' @:: Lens' Peer Data.Word.Word64@
    * 'Proto.Rpc_Fields.bytesRecv' @:: Lens' Peer Data.Word.Word64@
    * 'Proto.Rpc_Fields.satSent' @:: Lens' Peer Data.Int.Int64@
    * 'Proto.Rpc_Fields.satRecv' @:: Lens' Peer Data.Int.Int64@
    * 'Proto.Rpc_Fields.inbound' @:: Lens' Peer Prelude.Bool@
    * 'Proto.Rpc_Fields.pingTime' @:: Lens' Peer Data.Int.Int64@
    * 'Proto.Rpc_Fields.syncType' @:: Lens' Peer Peer'SyncType@
 -}
data Peer = Peer{_Peer'pubKey :: !Data.Text.Text,
                 _Peer'address :: !Data.Text.Text,
                 _Peer'bytesSent :: !Data.Word.Word64,
                 _Peer'bytesRecv :: !Data.Word.Word64,
                 _Peer'satSent :: !Data.Int.Int64, _Peer'satRecv :: !Data.Int.Int64,
                 _Peer'inbound :: !Prelude.Bool, _Peer'pingTime :: !Data.Int.Int64,
                 _Peer'syncType :: !Peer'SyncType,
                 _Peer'_unknownFields :: !Data.ProtoLens.FieldSet}
              deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Peer where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Peer "pubKey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Peer'pubKey
               (\ x__ y__ -> x__{_Peer'pubKey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Peer "address"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Peer'address
               (\ x__ y__ -> x__{_Peer'address = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Peer "bytesSent"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Peer'bytesSent
               (\ x__ y__ -> x__{_Peer'bytesSent = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Peer "bytesRecv"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Peer'bytesRecv
               (\ x__ y__ -> x__{_Peer'bytesRecv = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Peer "satSent"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Peer'satSent
               (\ x__ y__ -> x__{_Peer'satSent = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Peer "satRecv"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Peer'satRecv
               (\ x__ y__ -> x__{_Peer'satRecv = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Peer "inbound"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Peer'inbound
               (\ x__ y__ -> x__{_Peer'inbound = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Peer "pingTime"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Peer'pingTime
               (\ x__ y__ -> x__{_Peer'pingTime = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Peer "syncType"
           (Peer'SyncType)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Peer'syncType
               (\ x__ y__ -> x__{_Peer'syncType = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message Peer where
        messageName _ = Data.Text.pack "lnrpc.Peer"
        fieldsByTag
          = let pubKey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pub_key"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pubKey"))
                      :: Data.ProtoLens.FieldDescriptor Peer
                address__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "address"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"address"))
                      :: Data.ProtoLens.FieldDescriptor Peer
                bytesSent__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "bytes_sent"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"bytesSent"))
                      :: Data.ProtoLens.FieldDescriptor Peer
                bytesRecv__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "bytes_recv"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"bytesRecv"))
                      :: Data.ProtoLens.FieldDescriptor Peer
                satSent__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "sat_sent"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"satSent"))
                      :: Data.ProtoLens.FieldDescriptor Peer
                satRecv__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "sat_recv"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"satRecv"))
                      :: Data.ProtoLens.FieldDescriptor Peer
                inbound__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "inbound"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"inbound"))
                      :: Data.ProtoLens.FieldDescriptor Peer
                pingTime__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "ping_time"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pingTime"))
                      :: Data.ProtoLens.FieldDescriptor Peer
                syncType__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "sync_type"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                         Data.ProtoLens.FieldTypeDescriptor Peer'SyncType)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"syncType"))
                      :: Data.ProtoLens.FieldDescriptor Peer
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, pubKey__field_descriptor),
                 (Data.ProtoLens.Tag 3, address__field_descriptor),
                 (Data.ProtoLens.Tag 4, bytesSent__field_descriptor),
                 (Data.ProtoLens.Tag 5, bytesRecv__field_descriptor),
                 (Data.ProtoLens.Tag 6, satSent__field_descriptor),
                 (Data.ProtoLens.Tag 7, satRecv__field_descriptor),
                 (Data.ProtoLens.Tag 8, inbound__field_descriptor),
                 (Data.ProtoLens.Tag 9, pingTime__field_descriptor),
                 (Data.ProtoLens.Tag 10, syncType__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _Peer'_unknownFields
              (\ x__ y__ -> x__{_Peer'_unknownFields = y__})
        defMessage
          = Peer{_Peer'pubKey = Data.ProtoLens.fieldDefault,
                 _Peer'address = Data.ProtoLens.fieldDefault,
                 _Peer'bytesSent = Data.ProtoLens.fieldDefault,
                 _Peer'bytesRecv = Data.ProtoLens.fieldDefault,
                 _Peer'satSent = Data.ProtoLens.fieldDefault,
                 _Peer'satRecv = Data.ProtoLens.fieldDefault,
                 _Peer'inbound = Data.ProtoLens.fieldDefault,
                 _Peer'pingTime = Data.ProtoLens.fieldDefault,
                 _Peer'syncType = Data.ProtoLens.fieldDefault,
                 _Peer'_unknownFields = ([])}
        parseMessage
          = let loop :: Peer -> Data.ProtoLens.Encoding.Bytes.Parser Peer
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "pub_key"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"pubKey")
                                              y
                                              x)
                                26 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "address"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"address")
                                              y
                                              x)
                                32 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "bytes_sent"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"bytesSent")
                                              y
                                              x)
                                40 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "bytes_recv"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"bytesRecv")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "sat_sent"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"satSent")
                                              y
                                              x)
                                56 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "sat_recv"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"satRecv")
                                              y
                                              x)
                                64 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "inbound"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"inbound")
                                              y
                                              x)
                                72 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "ping_time"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"pingTime")
                                              y
                                              x)
                                80 -> do y <- (Prelude.fmap Prelude.toEnum
                                                 (Prelude.fmap Prelude.fromIntegral
                                                    Data.ProtoLens.Encoding.Bytes.getVarInt))
                                                Data.ProtoLens.Encoding.Bytes.<?> "sync_type"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"syncType")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "Peer"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"pubKey") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"address") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"bytesSent") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                          Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"bytesRecv") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                            Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"satSent") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"satRecv") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 56) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"inbound") _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 64) Data.Monoid.<>
                                  ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                     (\ b -> if b then 1 else 0))
                                    _v)
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view (Data.ProtoLens.Field.field @"pingTime") _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 72) Data.Monoid.<>
                                    ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                       Prelude.fromIntegral)
                                      _v)
                               Data.Monoid.<>
                               (let _v
                                      = Lens.Family2.view (Data.ProtoLens.Field.field @"syncType")
                                          _x
                                  in
                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                    Data.Monoid.mempty else
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 80) Data.Monoid.<>
                                      (((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                          Prelude.fromIntegral)
                                         Prelude.. Prelude.fromEnum)
                                        _v)
                                 Data.Monoid.<>
                                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData Peer where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_Peer'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_Peer'pubKey x__)
                    (Control.DeepSeq.deepseq (_Peer'address x__)
                       (Control.DeepSeq.deepseq (_Peer'bytesSent x__)
                          (Control.DeepSeq.deepseq (_Peer'bytesRecv x__)
                             (Control.DeepSeq.deepseq (_Peer'satSent x__)
                                (Control.DeepSeq.deepseq (_Peer'satRecv x__)
                                   (Control.DeepSeq.deepseq (_Peer'inbound x__)
                                      (Control.DeepSeq.deepseq (_Peer'pingTime x__)
                                         (Control.DeepSeq.deepseq (_Peer'syncType x__)
                                            (())))))))))))
newtype Peer'SyncType'UnrecognizedValue = Peer'SyncType'UnrecognizedValue Data.Int.Int32
                                            deriving (Prelude.Eq, Prelude.Ord, Prelude.Show)
data Peer'SyncType = Peer'UNKNOWN_SYNC
                   | Peer'ACTIVE_SYNC
                   | Peer'PASSIVE_SYNC
                   | Peer'SyncType'Unrecognized !Peer'SyncType'UnrecognizedValue
                       deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum Peer'SyncType where
        maybeToEnum 0 = Prelude.Just Peer'UNKNOWN_SYNC
        maybeToEnum 1 = Prelude.Just Peer'ACTIVE_SYNC
        maybeToEnum 2 = Prelude.Just Peer'PASSIVE_SYNC
        maybeToEnum k
          = Prelude.Just
              (Peer'SyncType'Unrecognized
                 (Peer'SyncType'UnrecognizedValue (Prelude.fromIntegral k)))
        showEnum Peer'UNKNOWN_SYNC = "UNKNOWN_SYNC"
        showEnum Peer'ACTIVE_SYNC = "ACTIVE_SYNC"
        showEnum Peer'PASSIVE_SYNC = "PASSIVE_SYNC"
        showEnum
          (Peer'SyncType'Unrecognized (Peer'SyncType'UnrecognizedValue k))
          = Prelude.show k
        readEnum k
          | (k) Prelude.== "UNKNOWN_SYNC" = Prelude.Just Peer'UNKNOWN_SYNC
          | (k) Prelude.== "ACTIVE_SYNC" = Prelude.Just Peer'ACTIVE_SYNC
          | (k) Prelude.== "PASSIVE_SYNC" = Prelude.Just Peer'PASSIVE_SYNC
        readEnum k
          = (Text.Read.readMaybe k) Prelude.>>= Data.ProtoLens.maybeToEnum
instance Prelude.Bounded Peer'SyncType where
        minBound = Peer'UNKNOWN_SYNC
        maxBound = Peer'PASSIVE_SYNC
instance Prelude.Enum Peer'SyncType where
        toEnum k__
          = Prelude.maybe
              (Prelude.error
                 (("toEnum: unknown value for enum SyncType: ") Prelude.++
                    Prelude.show k__))
              Prelude.id
              (Data.ProtoLens.maybeToEnum k__)
        fromEnum Peer'UNKNOWN_SYNC = 0
        fromEnum Peer'ACTIVE_SYNC = 1
        fromEnum Peer'PASSIVE_SYNC = 2
        fromEnum
          (Peer'SyncType'Unrecognized (Peer'SyncType'UnrecognizedValue k))
          = Prelude.fromIntegral k
        succ Peer'PASSIVE_SYNC
          = Prelude.error
              "Peer'SyncType.succ: bad argument Peer'PASSIVE_SYNC. This value would be out of bounds."
        succ Peer'UNKNOWN_SYNC = Peer'ACTIVE_SYNC
        succ Peer'ACTIVE_SYNC = Peer'PASSIVE_SYNC
        succ (Peer'SyncType'Unrecognized _)
          = Prelude.error
              "Peer'SyncType.succ: bad argument: unrecognized value"
        pred Peer'UNKNOWN_SYNC
          = Prelude.error
              "Peer'SyncType.pred: bad argument Peer'UNKNOWN_SYNC. This value would be out of bounds."
        pred Peer'ACTIVE_SYNC = Peer'UNKNOWN_SYNC
        pred Peer'PASSIVE_SYNC = Peer'ACTIVE_SYNC
        pred (Peer'SyncType'Unrecognized _)
          = Prelude.error
              "Peer'SyncType.pred: bad argument: unrecognized value"
        enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
        enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
        enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
        enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault Peer'SyncType where
        fieldDefault = Peer'UNKNOWN_SYNC
instance Control.DeepSeq.NFData Peer'SyncType where
        rnf x__ = Prelude.seq x__ (())
{- | Fields :

 -}
data PendingChannelsRequest = PendingChannelsRequest{_PendingChannelsRequest'_unknownFields
                                                     :: !Data.ProtoLens.FieldSet}
                                deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PendingChannelsRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message PendingChannelsRequest where
        messageName _ = Data.Text.pack "lnrpc.PendingChannelsRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _PendingChannelsRequest'_unknownFields
              (\ x__ y__ -> x__{_PendingChannelsRequest'_unknownFields = y__})
        defMessage
          = PendingChannelsRequest{_PendingChannelsRequest'_unknownFields =
                                     ([])}
        parseMessage
          = let loop ::
                     PendingChannelsRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser PendingChannelsRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "PendingChannelsRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData PendingChannelsRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_PendingChannelsRequest'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.totalLimboBalance' @:: Lens' PendingChannelsResponse Data.Int.Int64@
    * 'Proto.Rpc_Fields.pendingOpenChannels' @:: Lens' PendingChannelsResponse
  [PendingChannelsResponse'PendingOpenChannel]@
    * 'Proto.Rpc_Fields.vec'pendingOpenChannels' @:: Lens' PendingChannelsResponse
  (Data.Vector.Vector PendingChannelsResponse'PendingOpenChannel)@
    * 'Proto.Rpc_Fields.pendingClosingChannels' @:: Lens' PendingChannelsResponse
  [PendingChannelsResponse'ClosedChannel]@
    * 'Proto.Rpc_Fields.vec'pendingClosingChannels' @:: Lens' PendingChannelsResponse
  (Data.Vector.Vector PendingChannelsResponse'ClosedChannel)@
    * 'Proto.Rpc_Fields.pendingForceClosingChannels' @:: Lens' PendingChannelsResponse
  [PendingChannelsResponse'ForceClosedChannel]@
    * 'Proto.Rpc_Fields.vec'pendingForceClosingChannels' @:: Lens' PendingChannelsResponse
  (Data.Vector.Vector PendingChannelsResponse'ForceClosedChannel)@
    * 'Proto.Rpc_Fields.waitingCloseChannels' @:: Lens' PendingChannelsResponse
  [PendingChannelsResponse'WaitingCloseChannel]@
    * 'Proto.Rpc_Fields.vec'waitingCloseChannels' @:: Lens' PendingChannelsResponse
  (Data.Vector.Vector PendingChannelsResponse'WaitingCloseChannel)@
 -}
data PendingChannelsResponse = PendingChannelsResponse{_PendingChannelsResponse'totalLimboBalance
                                                       :: !Data.Int.Int64,
                                                       _PendingChannelsResponse'pendingOpenChannels
                                                       ::
                                                       !(Data.Vector.Vector
                                                           PendingChannelsResponse'PendingOpenChannel),
                                                       _PendingChannelsResponse'pendingClosingChannels
                                                       ::
                                                       !(Data.Vector.Vector
                                                           PendingChannelsResponse'ClosedChannel),
                                                       _PendingChannelsResponse'pendingForceClosingChannels
                                                       ::
                                                       !(Data.Vector.Vector
                                                           PendingChannelsResponse'ForceClosedChannel),
                                                       _PendingChannelsResponse'waitingCloseChannels
                                                       ::
                                                       !(Data.Vector.Vector
                                                           PendingChannelsResponse'WaitingCloseChannel),
                                                       _PendingChannelsResponse'_unknownFields ::
                                                       !Data.ProtoLens.FieldSet}
                                 deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PendingChannelsResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PendingChannelsResponse
           "totalLimboBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'totalLimboBalance
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'totalLimboBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PendingChannelsResponse
           "pendingOpenChannels"
           ([PendingChannelsResponse'PendingOpenChannel])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'pendingOpenChannels
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'pendingOpenChannels = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField PendingChannelsResponse
           "vec'pendingOpenChannels"
           (Data.Vector.Vector PendingChannelsResponse'PendingOpenChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'pendingOpenChannels
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'pendingOpenChannels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PendingChannelsResponse
           "pendingClosingChannels"
           ([PendingChannelsResponse'ClosedChannel])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'pendingClosingChannels
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'pendingClosingChannels = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField PendingChannelsResponse
           "vec'pendingClosingChannels"
           (Data.Vector.Vector PendingChannelsResponse'ClosedChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'pendingClosingChannels
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'pendingClosingChannels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PendingChannelsResponse
           "pendingForceClosingChannels"
           ([PendingChannelsResponse'ForceClosedChannel])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'pendingForceClosingChannels
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'pendingForceClosingChannels = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField PendingChannelsResponse
           "vec'pendingForceClosingChannels"
           (Data.Vector.Vector PendingChannelsResponse'ForceClosedChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'pendingForceClosingChannels
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'pendingForceClosingChannels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PendingChannelsResponse
           "waitingCloseChannels"
           ([PendingChannelsResponse'WaitingCloseChannel])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'waitingCloseChannels
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'waitingCloseChannels = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField PendingChannelsResponse
           "vec'waitingCloseChannels"
           (Data.Vector.Vector PendingChannelsResponse'WaitingCloseChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'waitingCloseChannels
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'waitingCloseChannels = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message PendingChannelsResponse where
        messageName _ = Data.Text.pack "lnrpc.PendingChannelsResponse"
        fieldsByTag
          = let totalLimboBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_limbo_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalLimboBalance"))
                      :: Data.ProtoLens.FieldDescriptor PendingChannelsResponse
                pendingOpenChannels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pending_open_channels"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor
                           PendingChannelsResponse'PendingOpenChannel)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"pendingOpenChannels"))
                      :: Data.ProtoLens.FieldDescriptor PendingChannelsResponse
                pendingClosingChannels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pending_closing_channels"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor
                           PendingChannelsResponse'ClosedChannel)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"pendingClosingChannels"))
                      :: Data.ProtoLens.FieldDescriptor PendingChannelsResponse
                pendingForceClosingChannels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pending_force_closing_channels"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor
                           PendingChannelsResponse'ForceClosedChannel)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"pendingForceClosingChannels"))
                      :: Data.ProtoLens.FieldDescriptor PendingChannelsResponse
                waitingCloseChannels__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "waiting_close_channels"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor
                           PendingChannelsResponse'WaitingCloseChannel)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"waitingCloseChannels"))
                      :: Data.ProtoLens.FieldDescriptor PendingChannelsResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, totalLimboBalance__field_descriptor),
                 (Data.ProtoLens.Tag 2, pendingOpenChannels__field_descriptor),
                 (Data.ProtoLens.Tag 3, pendingClosingChannels__field_descriptor),
                 (Data.ProtoLens.Tag 4,
                  pendingForceClosingChannels__field_descriptor),
                 (Data.ProtoLens.Tag 5, waitingCloseChannels__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _PendingChannelsResponse'_unknownFields
              (\ x__ y__ -> x__{_PendingChannelsResponse'_unknownFields = y__})
        defMessage
          = PendingChannelsResponse{_PendingChannelsResponse'totalLimboBalance
                                      = Data.ProtoLens.fieldDefault,
                                    _PendingChannelsResponse'pendingOpenChannels =
                                      Data.Vector.Generic.empty,
                                    _PendingChannelsResponse'pendingClosingChannels =
                                      Data.Vector.Generic.empty,
                                    _PendingChannelsResponse'pendingForceClosingChannels =
                                      Data.Vector.Generic.empty,
                                    _PendingChannelsResponse'waitingCloseChannels =
                                      Data.Vector.Generic.empty,
                                    _PendingChannelsResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     PendingChannelsResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         PendingChannelsResponse'ClosedChannel
                         ->
                         Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                           Data.ProtoLens.Encoding.Growing.RealWorld
                           PendingChannelsResponse'ForceClosedChannel
                           ->
                           Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                             Data.ProtoLens.Encoding.Growing.RealWorld
                             PendingChannelsResponse'PendingOpenChannel
                             ->
                             Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                               Data.ProtoLens.Encoding.Growing.RealWorld
                               PendingChannelsResponse'WaitingCloseChannel
                               -> Data.ProtoLens.Encoding.Bytes.Parser PendingChannelsResponse
                loop x mutable'pendingClosingChannels
                  mutable'pendingForceClosingChannels mutable'pendingOpenChannels
                  mutable'waitingCloseChannels
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'pendingClosingChannels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                               (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                                  mutable'pendingClosingChannels)
                            frozen'pendingForceClosingChannels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                    (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                                       mutable'pendingForceClosingChannels)
                            frozen'pendingOpenChannels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                            (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                               mutable'pendingOpenChannels)
                            frozen'waitingCloseChannels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                                mutable'waitingCloseChannels)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'pendingClosingChannels")
                                    frozen'pendingClosingChannels
                                    (Lens.Family2.set
                                       (Data.ProtoLens.Field.field
                                          @"vec'pendingForceClosingChannels")
                                       frozen'pendingForceClosingChannels
                                       (Lens.Family2.set
                                          (Data.ProtoLens.Field.field @"vec'pendingOpenChannels")
                                          frozen'pendingOpenChannels
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field
                                                @"vec'waitingCloseChannels")
                                             frozen'waitingCloseChannels
                                             x)))))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?>
                                               "total_limbo_balance"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"totalLimboBalance")
                                             y
                                             x)
                                          mutable'pendingClosingChannels
                                          mutable'pendingForceClosingChannels
                                          mutable'pendingOpenChannels
                                          mutable'waitingCloseChannels
                                18 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "pending_open_channels"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'pendingOpenChannels
                                                   y)
                                         loop x mutable'pendingClosingChannels
                                           mutable'pendingForceClosingChannels
                                           v
                                           mutable'waitingCloseChannels
                                26 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "pending_closing_channels"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'pendingClosingChannels
                                                   y)
                                         loop x v mutable'pendingForceClosingChannels
                                           mutable'pendingOpenChannels
                                           mutable'waitingCloseChannels
                                34 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "pending_force_closing_channels"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'pendingForceClosingChannels
                                                   y)
                                         loop x mutable'pendingClosingChannels v
                                           mutable'pendingOpenChannels
                                           mutable'waitingCloseChannels
                                42 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?>
                                                 "waiting_close_channels"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'waitingCloseChannels
                                                   y)
                                         loop x mutable'pendingClosingChannels
                                           mutable'pendingForceClosingChannels
                                           mutable'pendingOpenChannels
                                           v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'pendingClosingChannels
                                             mutable'pendingForceClosingChannels
                                             mutable'pendingOpenChannels
                                             mutable'waitingCloseChannels
              in
              (do mutable'pendingClosingChannels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                      Data.ProtoLens.Encoding.Growing.new
                  mutable'pendingForceClosingChannels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                           Data.ProtoLens.Encoding.Growing.new
                  mutable'pendingOpenChannels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                   Data.ProtoLens.Encoding.Growing.new
                  mutable'waitingCloseChannels <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                    Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'pendingClosingChannels
                    mutable'pendingForceClosingChannels
                    mutable'pendingOpenChannels
                    mutable'waitingCloseChannels)
                Data.ProtoLens.Encoding.Bytes.<?> "PendingChannelsResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view
                          (Data.ProtoLens.Field.field @"totalLimboBalance")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                    (\ _v ->
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                         (((\ bs ->
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                            Prelude.. Data.ProtoLens.encodeMessage)
                           _v)
                    (Lens.Family2.view
                       (Data.ProtoLens.Field.field @"vec'pendingOpenChannels")
                       _x))
                   Data.Monoid.<>
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                           (((\ bs ->
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Prelude.. Data.ProtoLens.encodeMessage)
                             _v)
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'pendingClosingChannels")
                         _x))
                     Data.Monoid.<>
                     (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                        (\ _v ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                             (((\ bs ->
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                    Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Prelude.. Data.ProtoLens.encodeMessage)
                               _v)
                        (Lens.Family2.view
                           (Data.ProtoLens.Field.field @"vec'pendingForceClosingChannels")
                           _x))
                       Data.Monoid.<>
                       (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                          (\ _v ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 42) Data.Monoid.<>
                               (((\ bs ->
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                       (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                  Prelude.. Data.ProtoLens.encodeMessage)
                                 _v)
                          (Lens.Family2.view
                             (Data.ProtoLens.Field.field @"vec'waitingCloseChannels")
                             _x))
                         Data.Monoid.<>
                         Data.ProtoLens.Encoding.Wire.buildFieldSet
                           (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData PendingChannelsResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_PendingChannelsResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_PendingChannelsResponse'totalLimboBalance x__)
                    (Control.DeepSeq.deepseq
                       (_PendingChannelsResponse'pendingOpenChannels x__)
                       (Control.DeepSeq.deepseq
                          (_PendingChannelsResponse'pendingClosingChannels x__)
                          (Control.DeepSeq.deepseq
                             (_PendingChannelsResponse'pendingForceClosingChannels x__)
                             (Control.DeepSeq.deepseq
                                (_PendingChannelsResponse'waitingCloseChannels x__)
                                (())))))))
{- | Fields :

    * 'Proto.Rpc_Fields.channel' @:: Lens' PendingChannelsResponse'ClosedChannel
  PendingChannelsResponse'PendingChannel@
    * 'Proto.Rpc_Fields.maybe'channel' @:: Lens' PendingChannelsResponse'ClosedChannel
  (Prelude.Maybe PendingChannelsResponse'PendingChannel)@
    * 'Proto.Rpc_Fields.closingTxid' @:: Lens' PendingChannelsResponse'ClosedChannel Data.Text.Text@
 -}
data PendingChannelsResponse'ClosedChannel = PendingChannelsResponse'ClosedChannel{_PendingChannelsResponse'ClosedChannel'channel
                                                                                   ::
                                                                                   !(Prelude.Maybe
                                                                                       PendingChannelsResponse'PendingChannel),
                                                                                   _PendingChannelsResponse'ClosedChannel'closingTxid
                                                                                   ::
                                                                                   !Data.Text.Text,
                                                                                   _PendingChannelsResponse'ClosedChannel'_unknownFields
                                                                                   ::
                                                                                   !Data.ProtoLens.FieldSet}
                                               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PendingChannelsResponse'ClosedChannel where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ClosedChannel
           "channel"
           (PendingChannelsResponse'PendingChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ClosedChannel'channel
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ClosedChannel'channel = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ClosedChannel
           "maybe'channel"
           (Prelude.Maybe PendingChannelsResponse'PendingChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ClosedChannel'channel
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ClosedChannel'channel = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ClosedChannel
           "closingTxid"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ClosedChannel'closingTxid
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ClosedChannel'closingTxid = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message
           PendingChannelsResponse'ClosedChannel
         where
        messageName _
          = Data.Text.pack "lnrpc.PendingChannelsResponse.ClosedChannel"
        fieldsByTag
          = let channel__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor
                           PendingChannelsResponse'PendingChannel)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'channel"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'ClosedChannel
                closingTxid__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "closing_txid"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"closingTxid"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'ClosedChannel
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channel__field_descriptor),
                 (Data.ProtoLens.Tag 2, closingTxid__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _PendingChannelsResponse'ClosedChannel'_unknownFields
              (\ x__ y__ ->
                 x__{_PendingChannelsResponse'ClosedChannel'_unknownFields = y__})
        defMessage
          = PendingChannelsResponse'ClosedChannel{_PendingChannelsResponse'ClosedChannel'channel
                                                    = Prelude.Nothing,
                                                  _PendingChannelsResponse'ClosedChannel'closingTxid
                                                    = Data.ProtoLens.fieldDefault,
                                                  _PendingChannelsResponse'ClosedChannel'_unknownFields
                                                    = ([])}
        parseMessage
          = let loop ::
                     PendingChannelsResponse'ClosedChannel ->
                       Data.ProtoLens.Encoding.Bytes.Parser
                         PendingChannelsResponse'ClosedChannel
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"channel")
                                              y
                                              x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "closing_txid"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"closingTxid")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "ClosedChannel"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'channel") _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"closingTxid") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData
           PendingChannelsResponse'ClosedChannel
         where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_PendingChannelsResponse'ClosedChannel'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_PendingChannelsResponse'ClosedChannel'channel x__)
                    (Control.DeepSeq.deepseq
                       (_PendingChannelsResponse'ClosedChannel'closingTxid x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.channel' @:: Lens' PendingChannelsResponse'ForceClosedChannel
  PendingChannelsResponse'PendingChannel@
    * 'Proto.Rpc_Fields.maybe'channel' @:: Lens' PendingChannelsResponse'ForceClosedChannel
  (Prelude.Maybe PendingChannelsResponse'PendingChannel)@
    * 'Proto.Rpc_Fields.closingTxid' @:: Lens' PendingChannelsResponse'ForceClosedChannel Data.Text.Text@
    * 'Proto.Rpc_Fields.limboBalance' @:: Lens' PendingChannelsResponse'ForceClosedChannel Data.Int.Int64@
    * 'Proto.Rpc_Fields.maturityHeight' @:: Lens' PendingChannelsResponse'ForceClosedChannel Data.Word.Word32@
    * 'Proto.Rpc_Fields.blocksTilMaturity' @:: Lens' PendingChannelsResponse'ForceClosedChannel Data.Int.Int32@
    * 'Proto.Rpc_Fields.recoveredBalance' @:: Lens' PendingChannelsResponse'ForceClosedChannel Data.Int.Int64@
    * 'Proto.Rpc_Fields.pendingHtlcs' @:: Lens' PendingChannelsResponse'ForceClosedChannel [PendingHTLC]@
    * 'Proto.Rpc_Fields.vec'pendingHtlcs' @:: Lens' PendingChannelsResponse'ForceClosedChannel
  (Data.Vector.Vector PendingHTLC)@
 -}
data PendingChannelsResponse'ForceClosedChannel = PendingChannelsResponse'ForceClosedChannel{_PendingChannelsResponse'ForceClosedChannel'channel
                                                                                             ::
                                                                                             !(Prelude.Maybe
                                                                                                 PendingChannelsResponse'PendingChannel),
                                                                                             _PendingChannelsResponse'ForceClosedChannel'closingTxid
                                                                                             ::
                                                                                             !Data.Text.Text,
                                                                                             _PendingChannelsResponse'ForceClosedChannel'limboBalance
                                                                                             ::
                                                                                             !Data.Int.Int64,
                                                                                             _PendingChannelsResponse'ForceClosedChannel'maturityHeight
                                                                                             ::
                                                                                             !Data.Word.Word32,
                                                                                             _PendingChannelsResponse'ForceClosedChannel'blocksTilMaturity
                                                                                             ::
                                                                                             !Data.Int.Int32,
                                                                                             _PendingChannelsResponse'ForceClosedChannel'recoveredBalance
                                                                                             ::
                                                                                             !Data.Int.Int64,
                                                                                             _PendingChannelsResponse'ForceClosedChannel'pendingHtlcs
                                                                                             ::
                                                                                             !(Data.Vector.Vector
                                                                                                 PendingHTLC),
                                                                                             _PendingChannelsResponse'ForceClosedChannel'_unknownFields
                                                                                             ::
                                                                                             !Data.ProtoLens.FieldSet}
                                                    deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PendingChannelsResponse'ForceClosedChannel
         where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ForceClosedChannel
           "channel"
           (PendingChannelsResponse'PendingChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ForceClosedChannel'channel
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ForceClosedChannel'channel = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ForceClosedChannel
           "maybe'channel"
           (Prelude.Maybe PendingChannelsResponse'PendingChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ForceClosedChannel'channel
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ForceClosedChannel'channel = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ForceClosedChannel
           "closingTxid"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ForceClosedChannel'closingTxid
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ForceClosedChannel'closingTxid =
                        y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ForceClosedChannel
           "limboBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ForceClosedChannel'limboBalance
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ForceClosedChannel'limboBalance =
                        y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ForceClosedChannel
           "maturityHeight"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ForceClosedChannel'maturityHeight
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ForceClosedChannel'maturityHeight =
                        y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ForceClosedChannel
           "blocksTilMaturity"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ForceClosedChannel'blocksTilMaturity
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ForceClosedChannel'blocksTilMaturity =
                        y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ForceClosedChannel
           "recoveredBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ForceClosedChannel'recoveredBalance
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ForceClosedChannel'recoveredBalance =
                        y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ForceClosedChannel
           "pendingHtlcs"
           ([PendingHTLC])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ForceClosedChannel'pendingHtlcs
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ForceClosedChannel'pendingHtlcs =
                        y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'ForceClosedChannel
           "vec'pendingHtlcs"
           (Data.Vector.Vector PendingHTLC)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'ForceClosedChannel'pendingHtlcs
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'ForceClosedChannel'pendingHtlcs =
                        y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message
           PendingChannelsResponse'ForceClosedChannel
         where
        messageName _
          = Data.Text.pack "lnrpc.PendingChannelsResponse.ForceClosedChannel"
        fieldsByTag
          = let channel__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor
                           PendingChannelsResponse'PendingChannel)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'channel"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'ForceClosedChannel
                closingTxid__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "closing_txid"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"closingTxid"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'ForceClosedChannel
                limboBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "limbo_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"limboBalance"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'ForceClosedChannel
                maturityHeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "maturity_height"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"maturityHeight"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'ForceClosedChannel
                blocksTilMaturity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "blocks_til_maturity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"blocksTilMaturity"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'ForceClosedChannel
                recoveredBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "recovered_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"recoveredBalance"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'ForceClosedChannel
                pendingHtlcs__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pending_htlcs"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor PendingHTLC)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"pendingHtlcs"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'ForceClosedChannel
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channel__field_descriptor),
                 (Data.ProtoLens.Tag 2, closingTxid__field_descriptor),
                 (Data.ProtoLens.Tag 3, limboBalance__field_descriptor),
                 (Data.ProtoLens.Tag 4, maturityHeight__field_descriptor),
                 (Data.ProtoLens.Tag 5, blocksTilMaturity__field_descriptor),
                 (Data.ProtoLens.Tag 6, recoveredBalance__field_descriptor),
                 (Data.ProtoLens.Tag 8, pendingHtlcs__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _PendingChannelsResponse'ForceClosedChannel'_unknownFields
              (\ x__ y__ ->
                 x__{_PendingChannelsResponse'ForceClosedChannel'_unknownFields =
                       y__})
        defMessage
          = PendingChannelsResponse'ForceClosedChannel{_PendingChannelsResponse'ForceClosedChannel'channel
                                                         = Prelude.Nothing,
                                                       _PendingChannelsResponse'ForceClosedChannel'closingTxid
                                                         = Data.ProtoLens.fieldDefault,
                                                       _PendingChannelsResponse'ForceClosedChannel'limboBalance
                                                         = Data.ProtoLens.fieldDefault,
                                                       _PendingChannelsResponse'ForceClosedChannel'maturityHeight
                                                         = Data.ProtoLens.fieldDefault,
                                                       _PendingChannelsResponse'ForceClosedChannel'blocksTilMaturity
                                                         = Data.ProtoLens.fieldDefault,
                                                       _PendingChannelsResponse'ForceClosedChannel'recoveredBalance
                                                         = Data.ProtoLens.fieldDefault,
                                                       _PendingChannelsResponse'ForceClosedChannel'pendingHtlcs
                                                         = Data.Vector.Generic.empty,
                                                       _PendingChannelsResponse'ForceClosedChannel'_unknownFields
                                                         = ([])}
        parseMessage
          = let loop ::
                     PendingChannelsResponse'ForceClosedChannel ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         PendingHTLC
                         ->
                         Data.ProtoLens.Encoding.Bytes.Parser
                           PendingChannelsResponse'ForceClosedChannel
                loop x mutable'pendingHtlcs
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'pendingHtlcs <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                     (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                        mutable'pendingHtlcs)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'pendingHtlcs")
                                    frozen'pendingHtlcs
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"channel")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "closing_txid"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"closingTxid")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "limbo_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"limboBalance")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "maturity_height"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"maturityHeight")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "blocks_til_maturity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"blocksTilMaturity")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "recovered_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"recoveredBalance")
                                              y
                                              x)
                                           mutable'pendingHtlcs
                                66 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "pending_htlcs"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'pendingHtlcs
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'pendingHtlcs
              in
              (do mutable'pendingHtlcs <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'pendingHtlcs)
                Data.ProtoLens.Encoding.Bytes.<?> "ForceClosedChannel"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'channel") _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"closingTxid") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"limboBalance") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"maturityHeight")
                                _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view
                                  (Data.ProtoLens.Field.field @"blocksTilMaturity")
                                  _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view
                                    (Data.ProtoLens.Field.field @"recoveredBalance")
                                    _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                              (\ _v ->
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 66) Data.Monoid.<>
                                   (((\ bs ->
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                          Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Prelude.. Data.ProtoLens.encodeMessage)
                                     _v)
                              (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'pendingHtlcs")
                                 _x))
                             Data.Monoid.<>
                             Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData
           PendingChannelsResponse'ForceClosedChannel
         where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_PendingChannelsResponse'ForceClosedChannel'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_PendingChannelsResponse'ForceClosedChannel'channel x__)
                    (Control.DeepSeq.deepseq
                       (_PendingChannelsResponse'ForceClosedChannel'closingTxid x__)
                       (Control.DeepSeq.deepseq
                          (_PendingChannelsResponse'ForceClosedChannel'limboBalance x__)
                          (Control.DeepSeq.deepseq
                             (_PendingChannelsResponse'ForceClosedChannel'maturityHeight x__)
                             (Control.DeepSeq.deepseq
                                (_PendingChannelsResponse'ForceClosedChannel'blocksTilMaturity x__)
                                (Control.DeepSeq.deepseq
                                   (_PendingChannelsResponse'ForceClosedChannel'recoveredBalance
                                      x__)
                                   (Control.DeepSeq.deepseq
                                      (_PendingChannelsResponse'ForceClosedChannel'pendingHtlcs x__)
                                      (())))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.remoteNodePub' @:: Lens' PendingChannelsResponse'PendingChannel Data.Text.Text@
    * 'Proto.Rpc_Fields.channelPoint' @:: Lens' PendingChannelsResponse'PendingChannel Data.Text.Text@
    * 'Proto.Rpc_Fields.capacity' @:: Lens' PendingChannelsResponse'PendingChannel Data.Int.Int64@
    * 'Proto.Rpc_Fields.localBalance' @:: Lens' PendingChannelsResponse'PendingChannel Data.Int.Int64@
    * 'Proto.Rpc_Fields.remoteBalance' @:: Lens' PendingChannelsResponse'PendingChannel Data.Int.Int64@
 -}
data PendingChannelsResponse'PendingChannel = PendingChannelsResponse'PendingChannel{_PendingChannelsResponse'PendingChannel'remoteNodePub
                                                                                     ::
                                                                                     !Data.Text.Text,
                                                                                     _PendingChannelsResponse'PendingChannel'channelPoint
                                                                                     ::
                                                                                     !Data.Text.Text,
                                                                                     _PendingChannelsResponse'PendingChannel'capacity
                                                                                     ::
                                                                                     !Data.Int.Int64,
                                                                                     _PendingChannelsResponse'PendingChannel'localBalance
                                                                                     ::
                                                                                     !Data.Int.Int64,
                                                                                     _PendingChannelsResponse'PendingChannel'remoteBalance
                                                                                     ::
                                                                                     !Data.Int.Int64,
                                                                                     _PendingChannelsResponse'PendingChannel'_unknownFields
                                                                                     ::
                                                                                     !Data.ProtoLens.FieldSet}
                                                deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PendingChannelsResponse'PendingChannel where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingChannel
           "remoteNodePub"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingChannel'remoteNodePub
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingChannel'remoteNodePub = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingChannel
           "channelPoint"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingChannel'channelPoint
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingChannel'channelPoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingChannel
           "capacity"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingChannel'capacity
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingChannel'capacity = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingChannel
           "localBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingChannel'localBalance
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingChannel'localBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingChannel
           "remoteBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingChannel'remoteBalance
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingChannel'remoteBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message
           PendingChannelsResponse'PendingChannel
         where
        messageName _
          = Data.Text.pack "lnrpc.PendingChannelsResponse.PendingChannel"
        fieldsByTag
          = let remoteNodePub__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "remote_node_pub"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"remoteNodePub"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'PendingChannel
                channelPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_point"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"channelPoint"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'PendingChannel
                capacity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "capacity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"capacity"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'PendingChannel
                localBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "local_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"localBalance"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'PendingChannel
                remoteBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "remote_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"remoteBalance"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'PendingChannel
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, remoteNodePub__field_descriptor),
                 (Data.ProtoLens.Tag 2, channelPoint__field_descriptor),
                 (Data.ProtoLens.Tag 3, capacity__field_descriptor),
                 (Data.ProtoLens.Tag 4, localBalance__field_descriptor),
                 (Data.ProtoLens.Tag 5, remoteBalance__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _PendingChannelsResponse'PendingChannel'_unknownFields
              (\ x__ y__ ->
                 x__{_PendingChannelsResponse'PendingChannel'_unknownFields = y__})
        defMessage
          = PendingChannelsResponse'PendingChannel{_PendingChannelsResponse'PendingChannel'remoteNodePub
                                                     = Data.ProtoLens.fieldDefault,
                                                   _PendingChannelsResponse'PendingChannel'channelPoint
                                                     = Data.ProtoLens.fieldDefault,
                                                   _PendingChannelsResponse'PendingChannel'capacity
                                                     = Data.ProtoLens.fieldDefault,
                                                   _PendingChannelsResponse'PendingChannel'localBalance
                                                     = Data.ProtoLens.fieldDefault,
                                                   _PendingChannelsResponse'PendingChannel'remoteBalance
                                                     = Data.ProtoLens.fieldDefault,
                                                   _PendingChannelsResponse'PendingChannel'_unknownFields
                                                     = ([])}
        parseMessage
          = let loop ::
                     PendingChannelsResponse'PendingChannel ->
                       Data.ProtoLens.Encoding.Bytes.Parser
                         PendingChannelsResponse'PendingChannel
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "remote_node_pub"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"remoteNodePub")
                                              y
                                              x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"channelPoint")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "capacity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"capacity")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "local_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"localBalance")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "remote_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"remoteBalance")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "PendingChannel"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"remoteNodePub")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"channelPoint") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"capacity") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"localBalance") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"remoteBalance")
                                  _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         Data.ProtoLens.Encoding.Wire.buildFieldSet
                           (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData
           PendingChannelsResponse'PendingChannel
         where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_PendingChannelsResponse'PendingChannel'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_PendingChannelsResponse'PendingChannel'remoteNodePub x__)
                    (Control.DeepSeq.deepseq
                       (_PendingChannelsResponse'PendingChannel'channelPoint x__)
                       (Control.DeepSeq.deepseq
                          (_PendingChannelsResponse'PendingChannel'capacity x__)
                          (Control.DeepSeq.deepseq
                             (_PendingChannelsResponse'PendingChannel'localBalance x__)
                             (Control.DeepSeq.deepseq
                                (_PendingChannelsResponse'PendingChannel'remoteBalance x__)
                                (())))))))
{- | Fields :

    * 'Proto.Rpc_Fields.channel' @:: Lens' PendingChannelsResponse'PendingOpenChannel
  PendingChannelsResponse'PendingChannel@
    * 'Proto.Rpc_Fields.maybe'channel' @:: Lens' PendingChannelsResponse'PendingOpenChannel
  (Prelude.Maybe PendingChannelsResponse'PendingChannel)@
    * 'Proto.Rpc_Fields.confirmationHeight' @:: Lens' PendingChannelsResponse'PendingOpenChannel Data.Word.Word32@
    * 'Proto.Rpc_Fields.commitFee' @:: Lens' PendingChannelsResponse'PendingOpenChannel Data.Int.Int64@
    * 'Proto.Rpc_Fields.commitWeight' @:: Lens' PendingChannelsResponse'PendingOpenChannel Data.Int.Int64@
    * 'Proto.Rpc_Fields.feePerKw' @:: Lens' PendingChannelsResponse'PendingOpenChannel Data.Int.Int64@
 -}
data PendingChannelsResponse'PendingOpenChannel = PendingChannelsResponse'PendingOpenChannel{_PendingChannelsResponse'PendingOpenChannel'channel
                                                                                             ::
                                                                                             !(Prelude.Maybe
                                                                                                 PendingChannelsResponse'PendingChannel),
                                                                                             _PendingChannelsResponse'PendingOpenChannel'confirmationHeight
                                                                                             ::
                                                                                             !Data.Word.Word32,
                                                                                             _PendingChannelsResponse'PendingOpenChannel'commitFee
                                                                                             ::
                                                                                             !Data.Int.Int64,
                                                                                             _PendingChannelsResponse'PendingOpenChannel'commitWeight
                                                                                             ::
                                                                                             !Data.Int.Int64,
                                                                                             _PendingChannelsResponse'PendingOpenChannel'feePerKw
                                                                                             ::
                                                                                             !Data.Int.Int64,
                                                                                             _PendingChannelsResponse'PendingOpenChannel'_unknownFields
                                                                                             ::
                                                                                             !Data.ProtoLens.FieldSet}
                                                    deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PendingChannelsResponse'PendingOpenChannel
         where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingOpenChannel
           "channel"
           (PendingChannelsResponse'PendingChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingOpenChannel'channel
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingOpenChannel'channel = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingOpenChannel
           "maybe'channel"
           (Prelude.Maybe PendingChannelsResponse'PendingChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingOpenChannel'channel
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingOpenChannel'channel = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingOpenChannel
           "confirmationHeight"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingOpenChannel'confirmationHeight
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingOpenChannel'confirmationHeight
                        = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingOpenChannel
           "commitFee"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingOpenChannel'commitFee
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingOpenChannel'commitFee = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingOpenChannel
           "commitWeight"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingOpenChannel'commitWeight
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingOpenChannel'commitWeight =
                        y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'PendingOpenChannel
           "feePerKw"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'PendingOpenChannel'feePerKw
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'PendingOpenChannel'feePerKw = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message
           PendingChannelsResponse'PendingOpenChannel
         where
        messageName _
          = Data.Text.pack "lnrpc.PendingChannelsResponse.PendingOpenChannel"
        fieldsByTag
          = let channel__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor
                           PendingChannelsResponse'PendingChannel)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'channel"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'PendingOpenChannel
                confirmationHeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "confirmation_height"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"confirmationHeight"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'PendingOpenChannel
                commitFee__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "commit_fee"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"commitFee"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'PendingOpenChannel
                commitWeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "commit_weight"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"commitWeight"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'PendingOpenChannel
                feePerKw__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_per_kw"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feePerKw"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'PendingOpenChannel
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channel__field_descriptor),
                 (Data.ProtoLens.Tag 2, confirmationHeight__field_descriptor),
                 (Data.ProtoLens.Tag 4, commitFee__field_descriptor),
                 (Data.ProtoLens.Tag 5, commitWeight__field_descriptor),
                 (Data.ProtoLens.Tag 6, feePerKw__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _PendingChannelsResponse'PendingOpenChannel'_unknownFields
              (\ x__ y__ ->
                 x__{_PendingChannelsResponse'PendingOpenChannel'_unknownFields =
                       y__})
        defMessage
          = PendingChannelsResponse'PendingOpenChannel{_PendingChannelsResponse'PendingOpenChannel'channel
                                                         = Prelude.Nothing,
                                                       _PendingChannelsResponse'PendingOpenChannel'confirmationHeight
                                                         = Data.ProtoLens.fieldDefault,
                                                       _PendingChannelsResponse'PendingOpenChannel'commitFee
                                                         = Data.ProtoLens.fieldDefault,
                                                       _PendingChannelsResponse'PendingOpenChannel'commitWeight
                                                         = Data.ProtoLens.fieldDefault,
                                                       _PendingChannelsResponse'PendingOpenChannel'feePerKw
                                                         = Data.ProtoLens.fieldDefault,
                                                       _PendingChannelsResponse'PendingOpenChannel'_unknownFields
                                                         = ([])}
        parseMessage
          = let loop ::
                     PendingChannelsResponse'PendingOpenChannel ->
                       Data.ProtoLens.Encoding.Bytes.Parser
                         PendingChannelsResponse'PendingOpenChannel
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"channel")
                                              y
                                              x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "confirmation_height"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"confirmationHeight")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "commit_fee"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"commitFee")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "commit_weight"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"commitWeight")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_per_kw"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"feePerKw")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "PendingOpenChannel"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'channel") _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view
                            (Data.ProtoLens.Field.field @"confirmationHeight")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"commitFee") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"commitWeight") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"feePerKw") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         Data.ProtoLens.Encoding.Wire.buildFieldSet
                           (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData
           PendingChannelsResponse'PendingOpenChannel
         where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_PendingChannelsResponse'PendingOpenChannel'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_PendingChannelsResponse'PendingOpenChannel'channel x__)
                    (Control.DeepSeq.deepseq
                       (_PendingChannelsResponse'PendingOpenChannel'confirmationHeight
                          x__)
                       (Control.DeepSeq.deepseq
                          (_PendingChannelsResponse'PendingOpenChannel'commitFee x__)
                          (Control.DeepSeq.deepseq
                             (_PendingChannelsResponse'PendingOpenChannel'commitWeight x__)
                             (Control.DeepSeq.deepseq
                                (_PendingChannelsResponse'PendingOpenChannel'feePerKw x__)
                                (())))))))
{- | Fields :

    * 'Proto.Rpc_Fields.channel' @:: Lens' PendingChannelsResponse'WaitingCloseChannel
  PendingChannelsResponse'PendingChannel@
    * 'Proto.Rpc_Fields.maybe'channel' @:: Lens' PendingChannelsResponse'WaitingCloseChannel
  (Prelude.Maybe PendingChannelsResponse'PendingChannel)@
    * 'Proto.Rpc_Fields.limboBalance' @:: Lens' PendingChannelsResponse'WaitingCloseChannel Data.Int.Int64@
 -}
data PendingChannelsResponse'WaitingCloseChannel = PendingChannelsResponse'WaitingCloseChannel{_PendingChannelsResponse'WaitingCloseChannel'channel
                                                                                               ::
                                                                                               !(Prelude.Maybe
                                                                                                   PendingChannelsResponse'PendingChannel),
                                                                                               _PendingChannelsResponse'WaitingCloseChannel'limboBalance
                                                                                               ::
                                                                                               !Data.Int.Int64,
                                                                                               _PendingChannelsResponse'WaitingCloseChannel'_unknownFields
                                                                                               ::
                                                                                               !Data.ProtoLens.FieldSet}
                                                     deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PendingChannelsResponse'WaitingCloseChannel
         where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'WaitingCloseChannel
           "channel"
           (PendingChannelsResponse'PendingChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'WaitingCloseChannel'channel
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'WaitingCloseChannel'channel = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'WaitingCloseChannel
           "maybe'channel"
           (Prelude.Maybe PendingChannelsResponse'PendingChannel)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'WaitingCloseChannel'channel
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'WaitingCloseChannel'channel = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           PendingChannelsResponse'WaitingCloseChannel
           "limboBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _PendingChannelsResponse'WaitingCloseChannel'limboBalance
               (\ x__ y__ ->
                  x__{_PendingChannelsResponse'WaitingCloseChannel'limboBalance =
                        y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message
           PendingChannelsResponse'WaitingCloseChannel
         where
        messageName _
          = Data.Text.pack
              "lnrpc.PendingChannelsResponse.WaitingCloseChannel"
        fieldsByTag
          = let channel__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor
                           PendingChannelsResponse'PendingChannel)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'channel"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'WaitingCloseChannel
                limboBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "limbo_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"limboBalance"))
                      ::
                      Data.ProtoLens.FieldDescriptor
                        PendingChannelsResponse'WaitingCloseChannel
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, channel__field_descriptor),
                 (Data.ProtoLens.Tag 2, limboBalance__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _PendingChannelsResponse'WaitingCloseChannel'_unknownFields
              (\ x__ y__ ->
                 x__{_PendingChannelsResponse'WaitingCloseChannel'_unknownFields =
                       y__})
        defMessage
          = PendingChannelsResponse'WaitingCloseChannel{_PendingChannelsResponse'WaitingCloseChannel'channel
                                                          = Prelude.Nothing,
                                                        _PendingChannelsResponse'WaitingCloseChannel'limboBalance
                                                          = Data.ProtoLens.fieldDefault,
                                                        _PendingChannelsResponse'WaitingCloseChannel'_unknownFields
                                                          = ([])}
        parseMessage
          = let loop ::
                     PendingChannelsResponse'WaitingCloseChannel ->
                       Data.ProtoLens.Encoding.Bytes.Parser
                         PendingChannelsResponse'WaitingCloseChannel
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"channel")
                                              y
                                              x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "limbo_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"limboBalance")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "WaitingCloseChannel"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'channel") _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                                         Data.Monoid.<>
                                         (((\ bs ->
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                                Data.Monoid.<>
                                                Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Prelude.. Data.ProtoLens.encodeMessage)
                                           _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"limboBalance") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData
           PendingChannelsResponse'WaitingCloseChannel
         where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_PendingChannelsResponse'WaitingCloseChannel'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_PendingChannelsResponse'WaitingCloseChannel'channel x__)
                    (Control.DeepSeq.deepseq
                       (_PendingChannelsResponse'WaitingCloseChannel'limboBalance x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.incoming' @:: Lens' PendingHTLC Prelude.Bool@
    * 'Proto.Rpc_Fields.amount' @:: Lens' PendingHTLC Data.Int.Int64@
    * 'Proto.Rpc_Fields.outpoint' @:: Lens' PendingHTLC Data.Text.Text@
    * 'Proto.Rpc_Fields.maturityHeight' @:: Lens' PendingHTLC Data.Word.Word32@
    * 'Proto.Rpc_Fields.blocksTilMaturity' @:: Lens' PendingHTLC Data.Int.Int32@
    * 'Proto.Rpc_Fields.stage' @:: Lens' PendingHTLC Data.Word.Word32@
 -}
data PendingHTLC = PendingHTLC{_PendingHTLC'incoming ::
                               !Prelude.Bool,
                               _PendingHTLC'amount :: !Data.Int.Int64,
                               _PendingHTLC'outpoint :: !Data.Text.Text,
                               _PendingHTLC'maturityHeight :: !Data.Word.Word32,
                               _PendingHTLC'blocksTilMaturity :: !Data.Int.Int32,
                               _PendingHTLC'stage :: !Data.Word.Word32,
                               _PendingHTLC'_unknownFields :: !Data.ProtoLens.FieldSet}
                     deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PendingHTLC where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PendingHTLC "incoming"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PendingHTLC'incoming
               (\ x__ y__ -> x__{_PendingHTLC'incoming = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PendingHTLC "amount"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PendingHTLC'amount
               (\ x__ y__ -> x__{_PendingHTLC'amount = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PendingHTLC "outpoint"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PendingHTLC'outpoint
               (\ x__ y__ -> x__{_PendingHTLC'outpoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PendingHTLC "maturityHeight"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PendingHTLC'maturityHeight
               (\ x__ y__ -> x__{_PendingHTLC'maturityHeight = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PendingHTLC
           "blocksTilMaturity"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PendingHTLC'blocksTilMaturity
               (\ x__ y__ -> x__{_PendingHTLC'blocksTilMaturity = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PendingHTLC "stage"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PendingHTLC'stage
               (\ x__ y__ -> x__{_PendingHTLC'stage = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message PendingHTLC where
        messageName _ = Data.Text.pack "lnrpc.PendingHTLC"
        fieldsByTag
          = let incoming__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "incoming"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"incoming"))
                      :: Data.ProtoLens.FieldDescriptor PendingHTLC
                amount__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amount"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amount"))
                      :: Data.ProtoLens.FieldDescriptor PendingHTLC
                outpoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "outpoint"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"outpoint"))
                      :: Data.ProtoLens.FieldDescriptor PendingHTLC
                maturityHeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "maturity_height"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"maturityHeight"))
                      :: Data.ProtoLens.FieldDescriptor PendingHTLC
                blocksTilMaturity__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "blocks_til_maturity"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"blocksTilMaturity"))
                      :: Data.ProtoLens.FieldDescriptor PendingHTLC
                stage__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "stage"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"stage"))
                      :: Data.ProtoLens.FieldDescriptor PendingHTLC
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, incoming__field_descriptor),
                 (Data.ProtoLens.Tag 2, amount__field_descriptor),
                 (Data.ProtoLens.Tag 3, outpoint__field_descriptor),
                 (Data.ProtoLens.Tag 4, maturityHeight__field_descriptor),
                 (Data.ProtoLens.Tag 5, blocksTilMaturity__field_descriptor),
                 (Data.ProtoLens.Tag 6, stage__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _PendingHTLC'_unknownFields
              (\ x__ y__ -> x__{_PendingHTLC'_unknownFields = y__})
        defMessage
          = PendingHTLC{_PendingHTLC'incoming = Data.ProtoLens.fieldDefault,
                        _PendingHTLC'amount = Data.ProtoLens.fieldDefault,
                        _PendingHTLC'outpoint = Data.ProtoLens.fieldDefault,
                        _PendingHTLC'maturityHeight = Data.ProtoLens.fieldDefault,
                        _PendingHTLC'blocksTilMaturity = Data.ProtoLens.fieldDefault,
                        _PendingHTLC'stage = Data.ProtoLens.fieldDefault,
                        _PendingHTLC'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     PendingHTLC -> Data.ProtoLens.Encoding.Bytes.Parser PendingHTLC
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "incoming"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"incoming")
                                             y
                                             x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "amount"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"amount")
                                              y
                                              x)
                                26 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "outpoint"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"outpoint")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "maturity_height"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"maturityHeight")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "blocks_til_maturity"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"blocksTilMaturity")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "stage"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"stage") y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "PendingHTLC"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"incoming") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         (\ b -> if b then 1 else 0))
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"amount") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"outpoint") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                          (((\ bs ->
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Prelude.. Data.Text.Encoding.encodeUtf8)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"maturityHeight")
                                _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view
                                  (Data.ProtoLens.Field.field @"blocksTilMaturity")
                                  _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"stage") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           Data.ProtoLens.Encoding.Wire.buildFieldSet
                             (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData PendingHTLC where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_PendingHTLC'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_PendingHTLC'incoming x__)
                    (Control.DeepSeq.deepseq (_PendingHTLC'amount x__)
                       (Control.DeepSeq.deepseq (_PendingHTLC'outpoint x__)
                          (Control.DeepSeq.deepseq (_PendingHTLC'maturityHeight x__)
                             (Control.DeepSeq.deepseq (_PendingHTLC'blocksTilMaturity x__)
                                (Control.DeepSeq.deepseq (_PendingHTLC'stage x__) (()))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.txid' @:: Lens' PendingUpdate Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.outputIndex' @:: Lens' PendingUpdate Data.Word.Word32@
 -}
data PendingUpdate = PendingUpdate{_PendingUpdate'txid ::
                                   !Data.ByteString.ByteString,
                                   _PendingUpdate'outputIndex :: !Data.Word.Word32,
                                   _PendingUpdate'_unknownFields :: !Data.ProtoLens.FieldSet}
                       deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PendingUpdate where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PendingUpdate "txid"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PendingUpdate'txid
               (\ x__ y__ -> x__{_PendingUpdate'txid = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PendingUpdate "outputIndex"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PendingUpdate'outputIndex
               (\ x__ y__ -> x__{_PendingUpdate'outputIndex = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message PendingUpdate where
        messageName _ = Data.Text.pack "lnrpc.PendingUpdate"
        fieldsByTag
          = let txid__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "txid"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"txid"))
                      :: Data.ProtoLens.FieldDescriptor PendingUpdate
                outputIndex__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "output_index"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"outputIndex"))
                      :: Data.ProtoLens.FieldDescriptor PendingUpdate
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, txid__field_descriptor),
                 (Data.ProtoLens.Tag 2, outputIndex__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _PendingUpdate'_unknownFields
              (\ x__ y__ -> x__{_PendingUpdate'_unknownFields = y__})
        defMessage
          = PendingUpdate{_PendingUpdate'txid = Data.ProtoLens.fieldDefault,
                          _PendingUpdate'outputIndex = Data.ProtoLens.fieldDefault,
                          _PendingUpdate'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     PendingUpdate -> Data.ProtoLens.Encoding.Bytes.Parser PendingUpdate
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "txid"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"txid") y
                                              x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "output_index"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"outputIndex")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "PendingUpdate"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"txid") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"outputIndex") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData PendingUpdate where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_PendingUpdate'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_PendingUpdate'txid x__)
                    (Control.DeepSeq.deepseq (_PendingUpdate'outputIndex x__) (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.baseFeeMsat' @:: Lens' PolicyUpdateRequest Data.Int.Int64@
    * 'Proto.Rpc_Fields.feeRate' @:: Lens' PolicyUpdateRequest Prelude.Double@
    * 'Proto.Rpc_Fields.timeLockDelta' @:: Lens' PolicyUpdateRequest Data.Word.Word32@
    * 'Proto.Rpc_Fields.maybe'scope' @:: Lens' PolicyUpdateRequest (Prelude.Maybe PolicyUpdateRequest'Scope)@
    * 'Proto.Rpc_Fields.maybe'global' @:: Lens' PolicyUpdateRequest (Prelude.Maybe Prelude.Bool)@
    * 'Proto.Rpc_Fields.global' @:: Lens' PolicyUpdateRequest Prelude.Bool@
    * 'Proto.Rpc_Fields.maybe'chanPoint' @:: Lens' PolicyUpdateRequest (Prelude.Maybe ChannelPoint)@
    * 'Proto.Rpc_Fields.chanPoint' @:: Lens' PolicyUpdateRequest ChannelPoint@
 -}
data PolicyUpdateRequest = PolicyUpdateRequest{_PolicyUpdateRequest'baseFeeMsat
                                               :: !Data.Int.Int64,
                                               _PolicyUpdateRequest'feeRate :: !Prelude.Double,
                                               _PolicyUpdateRequest'timeLockDelta ::
                                               !Data.Word.Word32,
                                               _PolicyUpdateRequest'scope ::
                                               !(Prelude.Maybe PolicyUpdateRequest'Scope),
                                               _PolicyUpdateRequest'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PolicyUpdateRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
data PolicyUpdateRequest'Scope = PolicyUpdateRequest'Global !Prelude.Bool
                               | PolicyUpdateRequest'ChanPoint !ChannelPoint
                                   deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField PolicyUpdateRequest
           "baseFeeMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PolicyUpdateRequest'baseFeeMsat
               (\ x__ y__ -> x__{_PolicyUpdateRequest'baseFeeMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PolicyUpdateRequest
           "feeRate"
           (Prelude.Double)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PolicyUpdateRequest'feeRate
               (\ x__ y__ -> x__{_PolicyUpdateRequest'feeRate = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PolicyUpdateRequest
           "timeLockDelta"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PolicyUpdateRequest'timeLockDelta
               (\ x__ y__ -> x__{_PolicyUpdateRequest'timeLockDelta = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PolicyUpdateRequest
           "maybe'scope"
           (Prelude.Maybe PolicyUpdateRequest'Scope)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PolicyUpdateRequest'scope
               (\ x__ y__ -> x__{_PolicyUpdateRequest'scope = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField PolicyUpdateRequest
           "maybe'global"
           (Prelude.Maybe Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PolicyUpdateRequest'scope
               (\ x__ y__ -> x__{_PolicyUpdateRequest'scope = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just (PolicyUpdateRequest'Global x__val) -> Prelude.Just
                                                                             x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap PolicyUpdateRequest'Global y__)
instance Data.ProtoLens.Field.HasField PolicyUpdateRequest "global"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PolicyUpdateRequest'scope
               (\ x__ y__ -> x__{_PolicyUpdateRequest'scope = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just (PolicyUpdateRequest'Global x__val) -> Prelude.Just
                                                                              x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap PolicyUpdateRequest'Global y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault
instance Data.ProtoLens.Field.HasField PolicyUpdateRequest
           "maybe'chanPoint"
           (Prelude.Maybe ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PolicyUpdateRequest'scope
               (\ x__ y__ -> x__{_PolicyUpdateRequest'scope = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just (PolicyUpdateRequest'ChanPoint x__val) -> Prelude.Just
                                                                                x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap PolicyUpdateRequest'ChanPoint y__)
instance Data.ProtoLens.Field.HasField PolicyUpdateRequest
           "chanPoint"
           (ChannelPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _PolicyUpdateRequest'scope
               (\ x__ y__ -> x__{_PolicyUpdateRequest'scope = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just (PolicyUpdateRequest'ChanPoint x__val) -> Prelude.Just
                                                                                 x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap PolicyUpdateRequest'ChanPoint y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Message PolicyUpdateRequest where
        messageName _ = Data.Text.pack "lnrpc.PolicyUpdateRequest"
        fieldsByTag
          = let baseFeeMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "base_fee_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"baseFeeMsat"))
                      :: Data.ProtoLens.FieldDescriptor PolicyUpdateRequest
                feeRate__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_rate"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.DoubleField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Double)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feeRate"))
                      :: Data.ProtoLens.FieldDescriptor PolicyUpdateRequest
                timeLockDelta__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "time_lock_delta"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"timeLockDelta"))
                      :: Data.ProtoLens.FieldDescriptor PolicyUpdateRequest
                global__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "global"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'global"))
                      :: Data.ProtoLens.FieldDescriptor PolicyUpdateRequest
                chanPoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_point"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'chanPoint"))
                      :: Data.ProtoLens.FieldDescriptor PolicyUpdateRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 3, baseFeeMsat__field_descriptor),
                 (Data.ProtoLens.Tag 4, feeRate__field_descriptor),
                 (Data.ProtoLens.Tag 5, timeLockDelta__field_descriptor),
                 (Data.ProtoLens.Tag 1, global__field_descriptor),
                 (Data.ProtoLens.Tag 2, chanPoint__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _PolicyUpdateRequest'_unknownFields
              (\ x__ y__ -> x__{_PolicyUpdateRequest'_unknownFields = y__})
        defMessage
          = PolicyUpdateRequest{_PolicyUpdateRequest'baseFeeMsat =
                                  Data.ProtoLens.fieldDefault,
                                _PolicyUpdateRequest'feeRate = Data.ProtoLens.fieldDefault,
                                _PolicyUpdateRequest'timeLockDelta = Data.ProtoLens.fieldDefault,
                                _PolicyUpdateRequest'scope = Prelude.Nothing,
                                _PolicyUpdateRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     PolicyUpdateRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser PolicyUpdateRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "base_fee_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"baseFeeMsat")
                                              y
                                              x)
                                33 -> do y <- (Prelude.fmap
                                                 Data.ProtoLens.Encoding.Bytes.wordToDouble
                                                 Data.ProtoLens.Encoding.Bytes.getFixed64)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_rate"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"feeRate")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "time_lock_delta"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"timeLockDelta")
                                              y
                                              x)
                                8 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "global"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"global") y
                                             x)
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_point"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanPoint")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "PolicyUpdateRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"baseFeeMsat") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"feeRate") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 33) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putFixed64) Prelude..
                           Data.ProtoLens.Encoding.Bytes.doubleToWord)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"timeLockDelta")
                              _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'scope") _x of
                          (Prelude.Nothing) -> Data.Monoid.mempty
                          Prelude.Just
                            (PolicyUpdateRequest'Global
                               v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                                       ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                          (\ b -> if b then 1 else 0))
                                         v
                          Prelude.Just
                            (PolicyUpdateRequest'ChanPoint
                               v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                                       (((\ bs ->
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              Data.Monoid.<>
                                              Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                          Prelude.. Data.ProtoLens.encodeMessage)
                                         v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData PolicyUpdateRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_PolicyUpdateRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_PolicyUpdateRequest'baseFeeMsat x__)
                    (Control.DeepSeq.deepseq (_PolicyUpdateRequest'feeRate x__)
                       (Control.DeepSeq.deepseq (_PolicyUpdateRequest'timeLockDelta x__)
                          (Control.DeepSeq.deepseq (_PolicyUpdateRequest'scope x__) (()))))))
instance Control.DeepSeq.NFData PolicyUpdateRequest'Scope where
        rnf (PolicyUpdateRequest'Global x__) = Control.DeepSeq.rnf x__
        rnf (PolicyUpdateRequest'ChanPoint x__) = Control.DeepSeq.rnf x__
_PolicyUpdateRequest'Global ::
                            Data.ProtoLens.Prism.Prism' PolicyUpdateRequest'Scope Prelude.Bool
_PolicyUpdateRequest'Global
  = Data.ProtoLens.Prism.prism' PolicyUpdateRequest'Global
      (\ p__ ->
         case p__ of
             PolicyUpdateRequest'Global p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
_PolicyUpdateRequest'ChanPoint ::
                               Data.ProtoLens.Prism.Prism' PolicyUpdateRequest'Scope ChannelPoint
_PolicyUpdateRequest'ChanPoint
  = Data.ProtoLens.Prism.prism' PolicyUpdateRequest'ChanPoint
      (\ p__ ->
         case p__ of
             PolicyUpdateRequest'ChanPoint p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
{- | Fields :

 -}
data PolicyUpdateResponse = PolicyUpdateResponse{_PolicyUpdateResponse'_unknownFields
                                                 :: !Data.ProtoLens.FieldSet}
                              deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PolicyUpdateResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message PolicyUpdateResponse where
        messageName _ = Data.Text.pack "lnrpc.PolicyUpdateResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _PolicyUpdateResponse'_unknownFields
              (\ x__ y__ -> x__{_PolicyUpdateResponse'_unknownFields = y__})
        defMessage
          = PolicyUpdateResponse{_PolicyUpdateResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     PolicyUpdateResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser PolicyUpdateResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "PolicyUpdateResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData PolicyUpdateResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_PolicyUpdateResponse'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.pubKey' @:: Lens' QueryRoutesRequest Data.Text.Text@
    * 'Proto.Rpc_Fields.amt' @:: Lens' QueryRoutesRequest Data.Int.Int64@
    * 'Proto.Rpc_Fields.numRoutes' @:: Lens' QueryRoutesRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.finalCltvDelta' @:: Lens' QueryRoutesRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.feeLimit' @:: Lens' QueryRoutesRequest FeeLimit@
    * 'Proto.Rpc_Fields.maybe'feeLimit' @:: Lens' QueryRoutesRequest (Prelude.Maybe FeeLimit)@
    * 'Proto.Rpc_Fields.ignoredNodes' @:: Lens' QueryRoutesRequest [Data.ByteString.ByteString]@
    * 'Proto.Rpc_Fields.vec'ignoredNodes' @:: Lens' QueryRoutesRequest
  (Data.Vector.Vector Data.ByteString.ByteString)@
    * 'Proto.Rpc_Fields.ignoredEdges' @:: Lens' QueryRoutesRequest [EdgeLocator]@
    * 'Proto.Rpc_Fields.vec'ignoredEdges' @:: Lens' QueryRoutesRequest (Data.Vector.Vector EdgeLocator)@
    * 'Proto.Rpc_Fields.sourcePubKey' @:: Lens' QueryRoutesRequest Data.Text.Text@
 -}
data QueryRoutesRequest = QueryRoutesRequest{_QueryRoutesRequest'pubKey
                                             :: !Data.Text.Text,
                                             _QueryRoutesRequest'amt :: !Data.Int.Int64,
                                             _QueryRoutesRequest'numRoutes :: !Data.Int.Int32,
                                             _QueryRoutesRequest'finalCltvDelta :: !Data.Int.Int32,
                                             _QueryRoutesRequest'feeLimit ::
                                             !(Prelude.Maybe FeeLimit),
                                             _QueryRoutesRequest'ignoredNodes ::
                                             !(Data.Vector.Vector Data.ByteString.ByteString),
                                             _QueryRoutesRequest'ignoredEdges ::
                                             !(Data.Vector.Vector EdgeLocator),
                                             _QueryRoutesRequest'sourcePubKey :: !Data.Text.Text,
                                             _QueryRoutesRequest'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show QueryRoutesRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField QueryRoutesRequest "pubKey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'pubKey
               (\ x__ y__ -> x__{_QueryRoutesRequest'pubKey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField QueryRoutesRequest "amt"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'amt
               (\ x__ y__ -> x__{_QueryRoutesRequest'amt = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField QueryRoutesRequest
           "numRoutes"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'numRoutes
               (\ x__ y__ -> x__{_QueryRoutesRequest'numRoutes = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField QueryRoutesRequest
           "finalCltvDelta"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'finalCltvDelta
               (\ x__ y__ -> x__{_QueryRoutesRequest'finalCltvDelta = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField QueryRoutesRequest
           "feeLimit"
           (FeeLimit)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'feeLimit
               (\ x__ y__ -> x__{_QueryRoutesRequest'feeLimit = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField QueryRoutesRequest
           "maybe'feeLimit"
           (Prelude.Maybe FeeLimit)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'feeLimit
               (\ x__ y__ -> x__{_QueryRoutesRequest'feeLimit = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField QueryRoutesRequest
           "ignoredNodes"
           ([Data.ByteString.ByteString])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'ignoredNodes
               (\ x__ y__ -> x__{_QueryRoutesRequest'ignoredNodes = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField QueryRoutesRequest
           "vec'ignoredNodes"
           (Data.Vector.Vector Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'ignoredNodes
               (\ x__ y__ -> x__{_QueryRoutesRequest'ignoredNodes = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField QueryRoutesRequest
           "ignoredEdges"
           ([EdgeLocator])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'ignoredEdges
               (\ x__ y__ -> x__{_QueryRoutesRequest'ignoredEdges = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField QueryRoutesRequest
           "vec'ignoredEdges"
           (Data.Vector.Vector EdgeLocator)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'ignoredEdges
               (\ x__ y__ -> x__{_QueryRoutesRequest'ignoredEdges = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField QueryRoutesRequest
           "sourcePubKey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesRequest'sourcePubKey
               (\ x__ y__ -> x__{_QueryRoutesRequest'sourcePubKey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message QueryRoutesRequest where
        messageName _ = Data.Text.pack "lnrpc.QueryRoutesRequest"
        fieldsByTag
          = let pubKey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pub_key"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pubKey"))
                      :: Data.ProtoLens.FieldDescriptor QueryRoutesRequest
                amt__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amt"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amt"))
                      :: Data.ProtoLens.FieldDescriptor QueryRoutesRequest
                numRoutes__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_routes"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numRoutes"))
                      :: Data.ProtoLens.FieldDescriptor QueryRoutesRequest
                finalCltvDelta__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "final_cltv_delta"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"finalCltvDelta"))
                      :: Data.ProtoLens.FieldDescriptor QueryRoutesRequest
                feeLimit__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_limit"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor FeeLimit)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'feeLimit"))
                      :: Data.ProtoLens.FieldDescriptor QueryRoutesRequest
                ignoredNodes__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "ignored_nodes"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"ignoredNodes"))
                      :: Data.ProtoLens.FieldDescriptor QueryRoutesRequest
                ignoredEdges__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "ignored_edges"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor EdgeLocator)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"ignoredEdges"))
                      :: Data.ProtoLens.FieldDescriptor QueryRoutesRequest
                sourcePubKey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "source_pub_key"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"sourcePubKey"))
                      :: Data.ProtoLens.FieldDescriptor QueryRoutesRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, pubKey__field_descriptor),
                 (Data.ProtoLens.Tag 2, amt__field_descriptor),
                 (Data.ProtoLens.Tag 3, numRoutes__field_descriptor),
                 (Data.ProtoLens.Tag 4, finalCltvDelta__field_descriptor),
                 (Data.ProtoLens.Tag 5, feeLimit__field_descriptor),
                 (Data.ProtoLens.Tag 6, ignoredNodes__field_descriptor),
                 (Data.ProtoLens.Tag 7, ignoredEdges__field_descriptor),
                 (Data.ProtoLens.Tag 8, sourcePubKey__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _QueryRoutesRequest'_unknownFields
              (\ x__ y__ -> x__{_QueryRoutesRequest'_unknownFields = y__})
        defMessage
          = QueryRoutesRequest{_QueryRoutesRequest'pubKey =
                                 Data.ProtoLens.fieldDefault,
                               _QueryRoutesRequest'amt = Data.ProtoLens.fieldDefault,
                               _QueryRoutesRequest'numRoutes = Data.ProtoLens.fieldDefault,
                               _QueryRoutesRequest'finalCltvDelta = Data.ProtoLens.fieldDefault,
                               _QueryRoutesRequest'feeLimit = Prelude.Nothing,
                               _QueryRoutesRequest'ignoredNodes = Data.Vector.Generic.empty,
                               _QueryRoutesRequest'ignoredEdges = Data.Vector.Generic.empty,
                               _QueryRoutesRequest'sourcePubKey = Data.ProtoLens.fieldDefault,
                               _QueryRoutesRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     QueryRoutesRequest ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         EdgeLocator
                         ->
                         Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                           Data.ProtoLens.Encoding.Growing.RealWorld
                           Data.ByteString.ByteString
                           -> Data.ProtoLens.Encoding.Bytes.Parser QueryRoutesRequest
                loop x mutable'ignoredEdges mutable'ignoredNodes
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'ignoredEdges <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                     (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                        mutable'ignoredEdges)
                            frozen'ignoredNodes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                     (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                        mutable'ignoredNodes)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'ignoredEdges")
                                    frozen'ignoredEdges
                                    (Lens.Family2.set
                                       (Data.ProtoLens.Field.field @"vec'ignoredNodes")
                                       frozen'ignoredNodes
                                       x)))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "pub_key"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"pubKey")
                                              y
                                              x)
                                           mutable'ignoredEdges
                                           mutable'ignoredNodes
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "amt"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"amt") y
                                              x)
                                           mutable'ignoredEdges
                                           mutable'ignoredNodes
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "num_routes"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numRoutes")
                                              y
                                              x)
                                           mutable'ignoredEdges
                                           mutable'ignoredNodes
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "final_cltv_delta"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"finalCltvDelta")
                                              y
                                              x)
                                           mutable'ignoredEdges
                                           mutable'ignoredNodes
                                42 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_limit"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"feeLimit")
                                              y
                                              x)
                                           mutable'ignoredEdges
                                           mutable'ignoredNodes
                                50 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.getBytes
                                                     (Prelude.fromIntegral len))
                                                 Data.ProtoLens.Encoding.Bytes.<?> "ignored_nodes"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'ignoredNodes
                                                   y)
                                         loop x mutable'ignoredEdges v
                                58 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "ignored_edges"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'ignoredEdges
                                                   y)
                                         loop x v mutable'ignoredNodes
                                66 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "source_pub_key"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"sourcePubKey")
                                              y
                                              x)
                                           mutable'ignoredEdges
                                           mutable'ignoredNodes
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'ignoredEdges
                                             mutable'ignoredNodes
              in
              (do mutable'ignoredEdges <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            Data.ProtoLens.Encoding.Growing.new
                  mutable'ignoredNodes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'ignoredEdges
                    mutable'ignoredNodes)
                Data.ProtoLens.Encoding.Bytes.<?> "QueryRoutesRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"pubKey") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"amt") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"numRoutes") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"finalCltvDelta")
                                _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (case
                          Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'feeLimit") _x
                          of
                            (Prelude.Nothing) -> Data.Monoid.mempty
                            Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                                 Data.Monoid.<>
                                                 (((\ bs ->
                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                         (Prelude.fromIntegral
                                                            (Data.ByteString.length bs)))
                                                        Data.Monoid.<>
                                                        Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                    Prelude.. Data.ProtoLens.encodeMessage)
                                                   _v)
                         Data.Monoid.<>
                         (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                            (\ _v ->
                               (Data.ProtoLens.Encoding.Bytes.putVarInt 50) Data.Monoid.<>
                                 (\ bs ->
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                       (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                                   _v)
                            (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'ignoredNodes")
                               _x))
                           Data.Monoid.<>
                           (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                              (\ _v ->
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 58) Data.Monoid.<>
                                   (((\ bs ->
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                          Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Prelude.. Data.ProtoLens.encodeMessage)
                                     _v)
                              (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'ignoredEdges")
                                 _x))
                             Data.Monoid.<>
                             (let _v
                                    = Lens.Family2.view (Data.ProtoLens.Field.field @"sourcePubKey")
                                        _x
                                in
                                if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                  Data.Monoid.mempty else
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 66) Data.Monoid.<>
                                    (((\ bs ->
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           Data.Monoid.<>
                                           Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                       Prelude.. Data.Text.Encoding.encodeUtf8)
                                      _v)
                               Data.Monoid.<>
                               Data.ProtoLens.Encoding.Wire.buildFieldSet
                                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData QueryRoutesRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_QueryRoutesRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_QueryRoutesRequest'pubKey x__)
                    (Control.DeepSeq.deepseq (_QueryRoutesRequest'amt x__)
                       (Control.DeepSeq.deepseq (_QueryRoutesRequest'numRoutes x__)
                          (Control.DeepSeq.deepseq (_QueryRoutesRequest'finalCltvDelta x__)
                             (Control.DeepSeq.deepseq (_QueryRoutesRequest'feeLimit x__)
                                (Control.DeepSeq.deepseq (_QueryRoutesRequest'ignoredNodes x__)
                                   (Control.DeepSeq.deepseq (_QueryRoutesRequest'ignoredEdges x__)
                                      (Control.DeepSeq.deepseq
                                         (_QueryRoutesRequest'sourcePubKey x__)
                                         (()))))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.routes' @:: Lens' QueryRoutesResponse [Route]@
    * 'Proto.Rpc_Fields.vec'routes' @:: Lens' QueryRoutesResponse (Data.Vector.Vector Route)@
 -}
data QueryRoutesResponse = QueryRoutesResponse{_QueryRoutesResponse'routes
                                               :: !(Data.Vector.Vector Route),
                                               _QueryRoutesResponse'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show QueryRoutesResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField QueryRoutesResponse "routes"
           ([Route])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesResponse'routes
               (\ x__ y__ -> x__{_QueryRoutesResponse'routes = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField QueryRoutesResponse
           "vec'routes"
           (Data.Vector.Vector Route)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _QueryRoutesResponse'routes
               (\ x__ y__ -> x__{_QueryRoutesResponse'routes = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message QueryRoutesResponse where
        messageName _ = Data.Text.pack "lnrpc.QueryRoutesResponse"
        fieldsByTag
          = let routes__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "routes"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Route)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"routes"))
                      :: Data.ProtoLens.FieldDescriptor QueryRoutesResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, routes__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _QueryRoutesResponse'_unknownFields
              (\ x__ y__ -> x__{_QueryRoutesResponse'_unknownFields = y__})
        defMessage
          = QueryRoutesResponse{_QueryRoutesResponse'routes =
                                  Data.Vector.Generic.empty,
                                _QueryRoutesResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     QueryRoutesResponse ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Route
                         -> Data.ProtoLens.Encoding.Bytes.Parser QueryRoutesResponse
                loop x mutable'routes
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'routes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                               (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                  mutable'routes)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'routes")
                                    frozen'routes
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "routes"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'routes
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'routes
              in
              (do mutable'routes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'routes)
                Data.ProtoLens.Encoding.Bytes.<?> "QueryRoutesResponse"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'routes") _x))
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData QueryRoutesResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_QueryRoutesResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_QueryRoutesResponse'routes x__) (())))
{- | Fields :

 -}
data RestoreBackupResponse = RestoreBackupResponse{_RestoreBackupResponse'_unknownFields
                                                   :: !Data.ProtoLens.FieldSet}
                               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RestoreBackupResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RestoreBackupResponse where
        messageName _ = Data.Text.pack "lnrpc.RestoreBackupResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _RestoreBackupResponse'_unknownFields
              (\ x__ y__ -> x__{_RestoreBackupResponse'_unknownFields = y__})
        defMessage
          = RestoreBackupResponse{_RestoreBackupResponse'_unknownFields =
                                    ([])}
        parseMessage
          = let loop ::
                     RestoreBackupResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser RestoreBackupResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "RestoreBackupResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RestoreBackupResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_RestoreBackupResponse'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.maybe'backup' @:: Lens' RestoreChanBackupRequest
  (Prelude.Maybe RestoreChanBackupRequest'Backup)@
    * 'Proto.Rpc_Fields.maybe'chanBackups' @:: Lens' RestoreChanBackupRequest (Prelude.Maybe ChannelBackups)@
    * 'Proto.Rpc_Fields.chanBackups' @:: Lens' RestoreChanBackupRequest ChannelBackups@
    * 'Proto.Rpc_Fields.maybe'multiChanBackup' @:: Lens' RestoreChanBackupRequest
  (Prelude.Maybe Data.ByteString.ByteString)@
    * 'Proto.Rpc_Fields.multiChanBackup' @:: Lens' RestoreChanBackupRequest Data.ByteString.ByteString@
 -}
data RestoreChanBackupRequest = RestoreChanBackupRequest{_RestoreChanBackupRequest'backup
                                                         ::
                                                         !(Prelude.Maybe
                                                             RestoreChanBackupRequest'Backup),
                                                         _RestoreChanBackupRequest'_unknownFields ::
                                                         !Data.ProtoLens.FieldSet}
                                  deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RestoreChanBackupRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
data RestoreChanBackupRequest'Backup = RestoreChanBackupRequest'ChanBackups !ChannelBackups
                                     | RestoreChanBackupRequest'MultiChanBackup !Data.ByteString.ByteString
                                         deriving (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.Field.HasField RestoreChanBackupRequest
           "maybe'backup"
           (Prelude.Maybe RestoreChanBackupRequest'Backup)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RestoreChanBackupRequest'backup
               (\ x__ y__ -> x__{_RestoreChanBackupRequest'backup = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField RestoreChanBackupRequest
           "maybe'chanBackups"
           (Prelude.Maybe ChannelBackups)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RestoreChanBackupRequest'backup
               (\ x__ y__ -> x__{_RestoreChanBackupRequest'backup = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just
                         (RestoreChanBackupRequest'ChanBackups x__val) -> Prelude.Just
                                                                            x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ -> Prelude.fmap RestoreChanBackupRequest'ChanBackups y__)
instance Data.ProtoLens.Field.HasField RestoreChanBackupRequest
           "chanBackups"
           (ChannelBackups)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RestoreChanBackupRequest'backup
               (\ x__ y__ -> x__{_RestoreChanBackupRequest'backup = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just
                          (RestoreChanBackupRequest'ChanBackups x__val) -> Prelude.Just
                                                                             x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ -> Prelude.fmap RestoreChanBackupRequest'ChanBackups y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField RestoreChanBackupRequest
           "maybe'multiChanBackup"
           (Prelude.Maybe Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RestoreChanBackupRequest'backup
               (\ x__ y__ -> x__{_RestoreChanBackupRequest'backup = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens
                (\ x__ ->
                   case x__ of
                       Prelude.Just
                         (RestoreChanBackupRequest'MultiChanBackup x__val) -> Prelude.Just
                                                                                x__val
                       _otherwise -> Prelude.Nothing)
                (\ _ y__ ->
                   Prelude.fmap RestoreChanBackupRequest'MultiChanBackup y__)
instance Data.ProtoLens.Field.HasField RestoreChanBackupRequest
           "multiChanBackup"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RestoreChanBackupRequest'backup
               (\ x__ y__ -> x__{_RestoreChanBackupRequest'backup = y__}))
              Prelude..
              (Lens.Family2.Unchecked.lens
                 (\ x__ ->
                    case x__ of
                        Prelude.Just
                          (RestoreChanBackupRequest'MultiChanBackup x__val) -> Prelude.Just
                                                                                 x__val
                        _otherwise -> Prelude.Nothing)
                 (\ _ y__ ->
                    Prelude.fmap RestoreChanBackupRequest'MultiChanBackup y__))
                Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault
instance Data.ProtoLens.Message RestoreChanBackupRequest where
        messageName _ = Data.Text.pack "lnrpc.RestoreChanBackupRequest"
        fieldsByTag
          = let chanBackups__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "chan_backups"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChannelBackups)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'chanBackups"))
                      :: Data.ProtoLens.FieldDescriptor RestoreChanBackupRequest
                multiChanBackup__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "multi_chan_backup"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'multiChanBackup"))
                      :: Data.ProtoLens.FieldDescriptor RestoreChanBackupRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, chanBackups__field_descriptor),
                 (Data.ProtoLens.Tag 2, multiChanBackup__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _RestoreChanBackupRequest'_unknownFields
              (\ x__ y__ -> x__{_RestoreChanBackupRequest'_unknownFields = y__})
        defMessage
          = RestoreChanBackupRequest{_RestoreChanBackupRequest'backup =
                                       Prelude.Nothing,
                                     _RestoreChanBackupRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     RestoreChanBackupRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser RestoreChanBackupRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "chan_backups"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"chanBackups")
                                              y
                                              x)
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "multi_chan_backup"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"multiChanBackup")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "RestoreChanBackupRequest"
        buildMessage
          = (\ _x ->
               (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'backup") _x
                  of
                    (Prelude.Nothing) -> Data.Monoid.mempty
                    Prelude.Just
                      (RestoreChanBackupRequest'ChanBackups
                         v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                                 (((\ bs ->
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Prelude.. Data.ProtoLens.encodeMessage)
                                   v
                    Prelude.Just
                      (RestoreChanBackupRequest'MultiChanBackup
                         v) -> (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                                 (\ bs ->
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                       (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                                   v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RestoreChanBackupRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_RestoreChanBackupRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_RestoreChanBackupRequest'backup x__)
                    (())))
instance Control.DeepSeq.NFData RestoreChanBackupRequest'Backup
         where
        rnf (RestoreChanBackupRequest'ChanBackups x__)
          = Control.DeepSeq.rnf x__
        rnf (RestoreChanBackupRequest'MultiChanBackup x__)
          = Control.DeepSeq.rnf x__
_RestoreChanBackupRequest'ChanBackups ::
                                      Data.ProtoLens.Prism.Prism' RestoreChanBackupRequest'Backup
                                        ChannelBackups
_RestoreChanBackupRequest'ChanBackups
  = Data.ProtoLens.Prism.prism' RestoreChanBackupRequest'ChanBackups
      (\ p__ ->
         case p__ of
             RestoreChanBackupRequest'ChanBackups p__val -> Prelude.Just p__val
             _otherwise -> Prelude.Nothing)
_RestoreChanBackupRequest'MultiChanBackup ::
                                          Data.ProtoLens.Prism.Prism'
                                            RestoreChanBackupRequest'Backup
                                            Data.ByteString.ByteString
_RestoreChanBackupRequest'MultiChanBackup
  = Data.ProtoLens.Prism.prism'
      RestoreChanBackupRequest'MultiChanBackup
      (\ p__ ->
         case p__ of
             RestoreChanBackupRequest'MultiChanBackup p__val -> Prelude.Just
                                                                  p__val
             _otherwise -> Prelude.Nothing)
{- | Fields :

    * 'Proto.Rpc_Fields.totalTimeLock' @:: Lens' Route Data.Word.Word32@
    * 'Proto.Rpc_Fields.totalFees' @:: Lens' Route Data.Int.Int64@
    * 'Proto.Rpc_Fields.totalAmt' @:: Lens' Route Data.Int.Int64@
    * 'Proto.Rpc_Fields.hops' @:: Lens' Route [Hop]@
    * 'Proto.Rpc_Fields.vec'hops' @:: Lens' Route (Data.Vector.Vector Hop)@
    * 'Proto.Rpc_Fields.totalFeesMsat' @:: Lens' Route Data.Int.Int64@
    * 'Proto.Rpc_Fields.totalAmtMsat' @:: Lens' Route Data.Int.Int64@
 -}
data Route = Route{_Route'totalTimeLock :: !Data.Word.Word32,
                   _Route'totalFees :: !Data.Int.Int64,
                   _Route'totalAmt :: !Data.Int.Int64,
                   _Route'hops :: !(Data.Vector.Vector Hop),
                   _Route'totalFeesMsat :: !Data.Int.Int64,
                   _Route'totalAmtMsat :: !Data.Int.Int64,
                   _Route'_unknownFields :: !Data.ProtoLens.FieldSet}
               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Route where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Route "totalTimeLock"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Route'totalTimeLock
               (\ x__ y__ -> x__{_Route'totalTimeLock = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Route "totalFees"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Route'totalFees
               (\ x__ y__ -> x__{_Route'totalFees = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Route "totalAmt"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Route'totalAmt
               (\ x__ y__ -> x__{_Route'totalAmt = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Route "hops" ([Hop]) where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Route'hops
               (\ x__ y__ -> x__{_Route'hops = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField Route "vec'hops"
           (Data.Vector.Vector Hop)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Route'hops
               (\ x__ y__ -> x__{_Route'hops = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Route "totalFeesMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Route'totalFeesMsat
               (\ x__ y__ -> x__{_Route'totalFeesMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Route "totalAmtMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Route'totalAmtMsat
               (\ x__ y__ -> x__{_Route'totalAmtMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message Route where
        messageName _ = Data.Text.pack "lnrpc.Route"
        fieldsByTag
          = let totalTimeLock__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_time_lock"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalTimeLock"))
                      :: Data.ProtoLens.FieldDescriptor Route
                totalFees__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_fees"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalFees"))
                      :: Data.ProtoLens.FieldDescriptor Route
                totalAmt__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_amt"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalAmt"))
                      :: Data.ProtoLens.FieldDescriptor Route
                hops__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "hops"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Hop)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"hops"))
                      :: Data.ProtoLens.FieldDescriptor Route
                totalFeesMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_fees_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalFeesMsat"))
                      :: Data.ProtoLens.FieldDescriptor Route
                totalAmtMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_amt_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalAmtMsat"))
                      :: Data.ProtoLens.FieldDescriptor Route
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, totalTimeLock__field_descriptor),
                 (Data.ProtoLens.Tag 2, totalFees__field_descriptor),
                 (Data.ProtoLens.Tag 3, totalAmt__field_descriptor),
                 (Data.ProtoLens.Tag 4, hops__field_descriptor),
                 (Data.ProtoLens.Tag 5, totalFeesMsat__field_descriptor),
                 (Data.ProtoLens.Tag 6, totalAmtMsat__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _Route'_unknownFields
              (\ x__ y__ -> x__{_Route'_unknownFields = y__})
        defMessage
          = Route{_Route'totalTimeLock = Data.ProtoLens.fieldDefault,
                  _Route'totalFees = Data.ProtoLens.fieldDefault,
                  _Route'totalAmt = Data.ProtoLens.fieldDefault,
                  _Route'hops = Data.Vector.Generic.empty,
                  _Route'totalFeesMsat = Data.ProtoLens.fieldDefault,
                  _Route'totalAmtMsat = Data.ProtoLens.fieldDefault,
                  _Route'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     Route ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Hop
                         -> Data.ProtoLens.Encoding.Bytes.Parser Route
                loop x mutable'hops
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'hops <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'hops)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'hops")
                                    frozen'hops
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "total_time_lock"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"totalTimeLock")
                                             y
                                             x)
                                          mutable'hops
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "total_fees"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"totalFees")
                                              y
                                              x)
                                           mutable'hops
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "total_amt"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"totalAmt")
                                              y
                                              x)
                                           mutable'hops
                                34 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "hops"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append mutable'hops
                                                   y)
                                         loop x v
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "total_fees_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"totalFeesMsat")
                                              y
                                              x)
                                           mutable'hops
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "total_amt_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"totalAmtMsat")
                                              y
                                              x)
                                           mutable'hops
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'hops
              in
              (do mutable'hops <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'hops)
                Data.ProtoLens.Encoding.Bytes.<?> "Route"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"totalTimeLock")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"totalFees") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"totalAmt") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                        (\ _v ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                             (((\ bs ->
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                    Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Prelude.. Data.ProtoLens.encodeMessage)
                               _v)
                        (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'hops") _x))
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"totalFeesMsat")
                                  _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"totalAmtMsat") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           Data.ProtoLens.Encoding.Wire.buildFieldSet
                             (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData Route where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_Route'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_Route'totalTimeLock x__)
                    (Control.DeepSeq.deepseq (_Route'totalFees x__)
                       (Control.DeepSeq.deepseq (_Route'totalAmt x__)
                          (Control.DeepSeq.deepseq (_Route'hops x__)
                             (Control.DeepSeq.deepseq (_Route'totalFeesMsat x__)
                                (Control.DeepSeq.deepseq (_Route'totalAmtMsat x__) (()))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.hopHints' @:: Lens' RouteHint [HopHint]@
    * 'Proto.Rpc_Fields.vec'hopHints' @:: Lens' RouteHint (Data.Vector.Vector HopHint)@
 -}
data RouteHint = RouteHint{_RouteHint'hopHints ::
                           !(Data.Vector.Vector HopHint),
                           _RouteHint'_unknownFields :: !Data.ProtoLens.FieldSet}
                   deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RouteHint where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RouteHint "hopHints"
           ([HopHint])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RouteHint'hopHints
               (\ x__ y__ -> x__{_RouteHint'hopHints = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField RouteHint "vec'hopHints"
           (Data.Vector.Vector HopHint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RouteHint'hopHints
               (\ x__ y__ -> x__{_RouteHint'hopHints = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message RouteHint where
        messageName _ = Data.Text.pack "lnrpc.RouteHint"
        fieldsByTag
          = let hopHints__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "hop_hints"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor HopHint)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"hopHints"))
                      :: Data.ProtoLens.FieldDescriptor RouteHint
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, hopHints__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _RouteHint'_unknownFields
              (\ x__ y__ -> x__{_RouteHint'_unknownFields = y__})
        defMessage
          = RouteHint{_RouteHint'hopHints = Data.Vector.Generic.empty,
                      _RouteHint'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     RouteHint ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         HopHint
                         -> Data.ProtoLens.Encoding.Bytes.Parser RouteHint
                loop x mutable'hopHints
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'hopHints <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                    mutable'hopHints)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'hopHints")
                                    frozen'hopHints
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "hop_hints"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'hopHints
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'hopHints
              in
              (do mutable'hopHints <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'hopHints)
                Data.ProtoLens.Encoding.Bytes.<?> "RouteHint"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'hopHints")
                     _x))
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RouteHint where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_RouteHint'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_RouteHint'hopHints x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.timeLockDelta' @:: Lens' RoutingPolicy Data.Word.Word32@
    * 'Proto.Rpc_Fields.minHtlc' @:: Lens' RoutingPolicy Data.Int.Int64@
    * 'Proto.Rpc_Fields.feeBaseMsat' @:: Lens' RoutingPolicy Data.Int.Int64@
    * 'Proto.Rpc_Fields.feeRateMilliMsat' @:: Lens' RoutingPolicy Data.Int.Int64@
    * 'Proto.Rpc_Fields.disabled' @:: Lens' RoutingPolicy Prelude.Bool@
    * 'Proto.Rpc_Fields.maxHtlcMsat' @:: Lens' RoutingPolicy Data.Word.Word64@
 -}
data RoutingPolicy = RoutingPolicy{_RoutingPolicy'timeLockDelta ::
                                   !Data.Word.Word32,
                                   _RoutingPolicy'minHtlc :: !Data.Int.Int64,
                                   _RoutingPolicy'feeBaseMsat :: !Data.Int.Int64,
                                   _RoutingPolicy'feeRateMilliMsat :: !Data.Int.Int64,
                                   _RoutingPolicy'disabled :: !Prelude.Bool,
                                   _RoutingPolicy'maxHtlcMsat :: !Data.Word.Word64,
                                   _RoutingPolicy'_unknownFields :: !Data.ProtoLens.FieldSet}
                       deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RoutingPolicy where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RoutingPolicy
           "timeLockDelta"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RoutingPolicy'timeLockDelta
               (\ x__ y__ -> x__{_RoutingPolicy'timeLockDelta = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField RoutingPolicy "minHtlc"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RoutingPolicy'minHtlc
               (\ x__ y__ -> x__{_RoutingPolicy'minHtlc = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField RoutingPolicy "feeBaseMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RoutingPolicy'feeBaseMsat
               (\ x__ y__ -> x__{_RoutingPolicy'feeBaseMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField RoutingPolicy
           "feeRateMilliMsat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RoutingPolicy'feeRateMilliMsat
               (\ x__ y__ -> x__{_RoutingPolicy'feeRateMilliMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField RoutingPolicy "disabled"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RoutingPolicy'disabled
               (\ x__ y__ -> x__{_RoutingPolicy'disabled = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField RoutingPolicy "maxHtlcMsat"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _RoutingPolicy'maxHtlcMsat
               (\ x__ y__ -> x__{_RoutingPolicy'maxHtlcMsat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message RoutingPolicy where
        messageName _ = Data.Text.pack "lnrpc.RoutingPolicy"
        fieldsByTag
          = let timeLockDelta__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "time_lock_delta"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"timeLockDelta"))
                      :: Data.ProtoLens.FieldDescriptor RoutingPolicy
                minHtlc__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "min_htlc"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"minHtlc"))
                      :: Data.ProtoLens.FieldDescriptor RoutingPolicy
                feeBaseMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_base_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feeBaseMsat"))
                      :: Data.ProtoLens.FieldDescriptor RoutingPolicy
                feeRateMilliMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_rate_milli_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"feeRateMilliMsat"))
                      :: Data.ProtoLens.FieldDescriptor RoutingPolicy
                disabled__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "disabled"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"disabled"))
                      :: Data.ProtoLens.FieldDescriptor RoutingPolicy
                maxHtlcMsat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "max_htlc_msat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"maxHtlcMsat"))
                      :: Data.ProtoLens.FieldDescriptor RoutingPolicy
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, timeLockDelta__field_descriptor),
                 (Data.ProtoLens.Tag 2, minHtlc__field_descriptor),
                 (Data.ProtoLens.Tag 3, feeBaseMsat__field_descriptor),
                 (Data.ProtoLens.Tag 4, feeRateMilliMsat__field_descriptor),
                 (Data.ProtoLens.Tag 5, disabled__field_descriptor),
                 (Data.ProtoLens.Tag 6, maxHtlcMsat__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _RoutingPolicy'_unknownFields
              (\ x__ y__ -> x__{_RoutingPolicy'_unknownFields = y__})
        defMessage
          = RoutingPolicy{_RoutingPolicy'timeLockDelta =
                            Data.ProtoLens.fieldDefault,
                          _RoutingPolicy'minHtlc = Data.ProtoLens.fieldDefault,
                          _RoutingPolicy'feeBaseMsat = Data.ProtoLens.fieldDefault,
                          _RoutingPolicy'feeRateMilliMsat = Data.ProtoLens.fieldDefault,
                          _RoutingPolicy'disabled = Data.ProtoLens.fieldDefault,
                          _RoutingPolicy'maxHtlcMsat = Data.ProtoLens.fieldDefault,
                          _RoutingPolicy'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     RoutingPolicy -> Data.ProtoLens.Encoding.Bytes.Parser RoutingPolicy
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "time_lock_delta"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"timeLockDelta")
                                             y
                                             x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "min_htlc"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"minHtlc")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_base_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"feeBaseMsat")
                                              y
                                              x)
                                32 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "fee_rate_milli_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"feeRateMilliMsat")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "disabled"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"disabled")
                                              y
                                              x)
                                48 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "max_htlc_msat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"maxHtlcMsat")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "RoutingPolicy"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"timeLockDelta")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"minHtlc") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"feeBaseMsat") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view
                                (Data.ProtoLens.Field.field @"feeRateMilliMsat")
                                _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 32) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"disabled") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 (\ b -> if b then 1 else 0))
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"maxHtlcMsat") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                           Data.Monoid.<>
                           Data.ProtoLens.Encoding.Wire.buildFieldSet
                             (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RoutingPolicy where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_RoutingPolicy'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_RoutingPolicy'timeLockDelta x__)
                    (Control.DeepSeq.deepseq (_RoutingPolicy'minHtlc x__)
                       (Control.DeepSeq.deepseq (_RoutingPolicy'feeBaseMsat x__)
                          (Control.DeepSeq.deepseq (_RoutingPolicy'feeRateMilliMsat x__)
                             (Control.DeepSeq.deepseq (_RoutingPolicy'disabled x__)
                                (Control.DeepSeq.deepseq (_RoutingPolicy'maxHtlcMsat x__)
                                   (()))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.addr' @:: Lens' SendCoinsRequest Data.Text.Text@
    * 'Proto.Rpc_Fields.amount' @:: Lens' SendCoinsRequest Data.Int.Int64@
    * 'Proto.Rpc_Fields.targetConf' @:: Lens' SendCoinsRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.satPerByte' @:: Lens' SendCoinsRequest Data.Int.Int64@
    * 'Proto.Rpc_Fields.sendAll' @:: Lens' SendCoinsRequest Prelude.Bool@
 -}
data SendCoinsRequest = SendCoinsRequest{_SendCoinsRequest'addr ::
                                         !Data.Text.Text,
                                         _SendCoinsRequest'amount :: !Data.Int.Int64,
                                         _SendCoinsRequest'targetConf :: !Data.Int.Int32,
                                         _SendCoinsRequest'satPerByte :: !Data.Int.Int64,
                                         _SendCoinsRequest'sendAll :: !Prelude.Bool,
                                         _SendCoinsRequest'_unknownFields ::
                                         !Data.ProtoLens.FieldSet}
                          deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SendCoinsRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SendCoinsRequest "addr"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendCoinsRequest'addr
               (\ x__ y__ -> x__{_SendCoinsRequest'addr = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendCoinsRequest "amount"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendCoinsRequest'amount
               (\ x__ y__ -> x__{_SendCoinsRequest'amount = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendCoinsRequest
           "targetConf"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendCoinsRequest'targetConf
               (\ x__ y__ -> x__{_SendCoinsRequest'targetConf = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendCoinsRequest
           "satPerByte"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendCoinsRequest'satPerByte
               (\ x__ y__ -> x__{_SendCoinsRequest'satPerByte = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendCoinsRequest "sendAll"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendCoinsRequest'sendAll
               (\ x__ y__ -> x__{_SendCoinsRequest'sendAll = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message SendCoinsRequest where
        messageName _ = Data.Text.pack "lnrpc.SendCoinsRequest"
        fieldsByTag
          = let addr__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "addr"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"addr"))
                      :: Data.ProtoLens.FieldDescriptor SendCoinsRequest
                amount__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amount"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amount"))
                      :: Data.ProtoLens.FieldDescriptor SendCoinsRequest
                targetConf__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "target_conf"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"targetConf"))
                      :: Data.ProtoLens.FieldDescriptor SendCoinsRequest
                satPerByte__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "sat_per_byte"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"satPerByte"))
                      :: Data.ProtoLens.FieldDescriptor SendCoinsRequest
                sendAll__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "send_all"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"sendAll"))
                      :: Data.ProtoLens.FieldDescriptor SendCoinsRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, addr__field_descriptor),
                 (Data.ProtoLens.Tag 2, amount__field_descriptor),
                 (Data.ProtoLens.Tag 3, targetConf__field_descriptor),
                 (Data.ProtoLens.Tag 5, satPerByte__field_descriptor),
                 (Data.ProtoLens.Tag 6, sendAll__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _SendCoinsRequest'_unknownFields
              (\ x__ y__ -> x__{_SendCoinsRequest'_unknownFields = y__})
        defMessage
          = SendCoinsRequest{_SendCoinsRequest'addr =
                               Data.ProtoLens.fieldDefault,
                             _SendCoinsRequest'amount = Data.ProtoLens.fieldDefault,
                             _SendCoinsRequest'targetConf = Data.ProtoLens.fieldDefault,
                             _SendCoinsRequest'satPerByte = Data.ProtoLens.fieldDefault,
                             _SendCoinsRequest'sendAll = Data.ProtoLens.fieldDefault,
                             _SendCoinsRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     SendCoinsRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser SendCoinsRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "addr"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"addr") y
                                              x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "amount"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"amount")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "target_conf"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"targetConf")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "sat_per_byte"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"satPerByte")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "send_all"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"sendAll")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "SendCoinsRequest"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"addr") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"amount") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"targetConf") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"satPerByte") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                            ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                               Prelude.fromIntegral)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"sendAll") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 (\ b -> if b then 1 else 0))
                                _v)
                         Data.Monoid.<>
                         Data.ProtoLens.Encoding.Wire.buildFieldSet
                           (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData SendCoinsRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_SendCoinsRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_SendCoinsRequest'addr x__)
                    (Control.DeepSeq.deepseq (_SendCoinsRequest'amount x__)
                       (Control.DeepSeq.deepseq (_SendCoinsRequest'targetConf x__)
                          (Control.DeepSeq.deepseq (_SendCoinsRequest'satPerByte x__)
                             (Control.DeepSeq.deepseq (_SendCoinsRequest'sendAll x__) (())))))))
{- | Fields :

    * 'Proto.Rpc_Fields.txid' @:: Lens' SendCoinsResponse Data.Text.Text@
 -}
data SendCoinsResponse = SendCoinsResponse{_SendCoinsResponse'txid
                                           :: !Data.Text.Text,
                                           _SendCoinsResponse'_unknownFields ::
                                           !Data.ProtoLens.FieldSet}
                           deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SendCoinsResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SendCoinsResponse "txid"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendCoinsResponse'txid
               (\ x__ y__ -> x__{_SendCoinsResponse'txid = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message SendCoinsResponse where
        messageName _ = Data.Text.pack "lnrpc.SendCoinsResponse"
        fieldsByTag
          = let txid__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "txid"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"txid"))
                      :: Data.ProtoLens.FieldDescriptor SendCoinsResponse
              in
              Data.Map.fromList [(Data.ProtoLens.Tag 1, txid__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _SendCoinsResponse'_unknownFields
              (\ x__ y__ -> x__{_SendCoinsResponse'_unknownFields = y__})
        defMessage
          = SendCoinsResponse{_SendCoinsResponse'txid =
                                Data.ProtoLens.fieldDefault,
                              _SendCoinsResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     SendCoinsResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser SendCoinsResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "txid"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"txid") y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "SendCoinsResponse"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"txid") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData SendCoinsResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_SendCoinsResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_SendCoinsResponse'txid x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.addrToAmount' @:: Lens' SendManyRequest (Data.Map.Map Data.Text.Text Data.Int.Int64)@
    * 'Proto.Rpc_Fields.targetConf' @:: Lens' SendManyRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.satPerByte' @:: Lens' SendManyRequest Data.Int.Int64@
 -}
data SendManyRequest = SendManyRequest{_SendManyRequest'addrToAmount
                                       :: !(Data.Map.Map Data.Text.Text Data.Int.Int64),
                                       _SendManyRequest'targetConf :: !Data.Int.Int32,
                                       _SendManyRequest'satPerByte :: !Data.Int.Int64,
                                       _SendManyRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
                         deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SendManyRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SendManyRequest
           "addrToAmount"
           (Data.Map.Map Data.Text.Text Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendManyRequest'addrToAmount
               (\ x__ y__ -> x__{_SendManyRequest'addrToAmount = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendManyRequest "targetConf"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendManyRequest'targetConf
               (\ x__ y__ -> x__{_SendManyRequest'targetConf = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendManyRequest "satPerByte"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendManyRequest'satPerByte
               (\ x__ y__ -> x__{_SendManyRequest'satPerByte = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message SendManyRequest where
        messageName _ = Data.Text.pack "lnrpc.SendManyRequest"
        fieldsByTag
          = let addrToAmount__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "AddrToAmount"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor
                           SendManyRequest'AddrToAmountEntry)
                      (Data.ProtoLens.MapField (Data.ProtoLens.Field.field @"key")
                         (Data.ProtoLens.Field.field @"value")
                         (Data.ProtoLens.Field.field @"addrToAmount"))
                      :: Data.ProtoLens.FieldDescriptor SendManyRequest
                targetConf__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "target_conf"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"targetConf"))
                      :: Data.ProtoLens.FieldDescriptor SendManyRequest
                satPerByte__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "sat_per_byte"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"satPerByte"))
                      :: Data.ProtoLens.FieldDescriptor SendManyRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, addrToAmount__field_descriptor),
                 (Data.ProtoLens.Tag 3, targetConf__field_descriptor),
                 (Data.ProtoLens.Tag 5, satPerByte__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _SendManyRequest'_unknownFields
              (\ x__ y__ -> x__{_SendManyRequest'_unknownFields = y__})
        defMessage
          = SendManyRequest{_SendManyRequest'addrToAmount = Data.Map.empty,
                            _SendManyRequest'targetConf = Data.ProtoLens.fieldDefault,
                            _SendManyRequest'satPerByte = Data.ProtoLens.fieldDefault,
                            _SendManyRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     SendManyRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser SendManyRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !(entry ::
                                             SendManyRequest'AddrToAmountEntry) <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                                                       Data.ProtoLens.Encoding.Bytes.isolate
                                                                                         (Prelude.fromIntegral
                                                                                            len)
                                                                                         Data.ProtoLens.parseMessage)
                                                                                     Data.ProtoLens.Encoding.Bytes.<?>
                                                                                     "AddrToAmount"
                                         let key
                                               = Lens.Family2.view
                                                   (Data.ProtoLens.Field.field @"key")
                                                   entry
                                             value
                                               = Lens.Family2.view
                                                   (Data.ProtoLens.Field.field @"value")
                                                   entry
                                           in
                                           loop
                                             (Lens.Family2.over
                                                (Data.ProtoLens.Field.field @"addrToAmount")
                                                (\ !t -> Data.Map.insert key value t)
                                                x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "target_conf"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"targetConf")
                                              y
                                              x)
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "sat_per_byte"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"satPerByte")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "SendManyRequest"
        buildMessage
          = (\ _x ->
               (Data.Monoid.mconcat
                  (Prelude.map
                     (\ _v ->
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                          (((\ bs ->
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Prelude.. Data.ProtoLens.encodeMessage)
                            (Lens.Family2.set (Data.ProtoLens.Field.field @"key")
                               (Prelude.fst _v)
                               (Lens.Family2.set (Data.ProtoLens.Field.field @"value")
                                  (Prelude.snd _v)
                                  (Data.ProtoLens.defMessage ::
                                     SendManyRequest'AddrToAmountEntry))))
                     (Data.Map.toList
                        (Lens.Family2.view (Data.ProtoLens.Field.field @"addrToAmount")
                           _x))))
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"targetConf") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"satPerByte") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                       (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData SendManyRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_SendManyRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_SendManyRequest'addrToAmount x__)
                    (Control.DeepSeq.deepseq (_SendManyRequest'targetConf x__)
                       (Control.DeepSeq.deepseq (_SendManyRequest'satPerByte x__) (())))))
{- | Fields :

    * 'Proto.Rpc_Fields.key' @:: Lens' SendManyRequest'AddrToAmountEntry Data.Text.Text@
    * 'Proto.Rpc_Fields.value' @:: Lens' SendManyRequest'AddrToAmountEntry Data.Int.Int64@
 -}
data SendManyRequest'AddrToAmountEntry = SendManyRequest'AddrToAmountEntry{_SendManyRequest'AddrToAmountEntry'key
                                                                           :: !Data.Text.Text,
                                                                           _SendManyRequest'AddrToAmountEntry'value
                                                                           :: !Data.Int.Int64,
                                                                           _SendManyRequest'AddrToAmountEntry'_unknownFields
                                                                           ::
                                                                           !Data.ProtoLens.FieldSet}
                                           deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SendManyRequest'AddrToAmountEntry where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField
           SendManyRequest'AddrToAmountEntry
           "key"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _SendManyRequest'AddrToAmountEntry'key
               (\ x__ y__ -> x__{_SendManyRequest'AddrToAmountEntry'key = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField
           SendManyRequest'AddrToAmountEntry
           "value"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _SendManyRequest'AddrToAmountEntry'value
               (\ x__ y__ -> x__{_SendManyRequest'AddrToAmountEntry'value = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message SendManyRequest'AddrToAmountEntry
         where
        messageName _
          = Data.Text.pack "lnrpc.SendManyRequest.AddrToAmountEntry"
        fieldsByTag
          = let key__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "key"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"key"))
                      :: Data.ProtoLens.FieldDescriptor SendManyRequest'AddrToAmountEntry
                value__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "value"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"value"))
                      :: Data.ProtoLens.FieldDescriptor SendManyRequest'AddrToAmountEntry
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, key__field_descriptor),
                 (Data.ProtoLens.Tag 2, value__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens
              _SendManyRequest'AddrToAmountEntry'_unknownFields
              (\ x__ y__ ->
                 x__{_SendManyRequest'AddrToAmountEntry'_unknownFields = y__})
        defMessage
          = SendManyRequest'AddrToAmountEntry{_SendManyRequest'AddrToAmountEntry'key
                                                = Data.ProtoLens.fieldDefault,
                                              _SendManyRequest'AddrToAmountEntry'value =
                                                Data.ProtoLens.fieldDefault,
                                              _SendManyRequest'AddrToAmountEntry'_unknownFields =
                                                ([])}
        parseMessage
          = let loop ::
                     SendManyRequest'AddrToAmountEntry ->
                       Data.ProtoLens.Encoding.Bytes.Parser
                         SendManyRequest'AddrToAmountEntry
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "key"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y
                                              x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "value"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "AddrToAmountEntry"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"value") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData SendManyRequest'AddrToAmountEntry
         where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_SendManyRequest'AddrToAmountEntry'_unknownFields x__)
                 (Control.DeepSeq.deepseq
                    (_SendManyRequest'AddrToAmountEntry'key x__)
                    (Control.DeepSeq.deepseq
                       (_SendManyRequest'AddrToAmountEntry'value x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.txid' @:: Lens' SendManyResponse Data.Text.Text@
 -}
data SendManyResponse = SendManyResponse{_SendManyResponse'txid ::
                                         !Data.Text.Text,
                                         _SendManyResponse'_unknownFields ::
                                         !Data.ProtoLens.FieldSet}
                          deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SendManyResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SendManyResponse "txid"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendManyResponse'txid
               (\ x__ y__ -> x__{_SendManyResponse'txid = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message SendManyResponse where
        messageName _ = Data.Text.pack "lnrpc.SendManyResponse"
        fieldsByTag
          = let txid__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "txid"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"txid"))
                      :: Data.ProtoLens.FieldDescriptor SendManyResponse
              in
              Data.Map.fromList [(Data.ProtoLens.Tag 1, txid__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _SendManyResponse'_unknownFields
              (\ x__ y__ -> x__{_SendManyResponse'_unknownFields = y__})
        defMessage
          = SendManyResponse{_SendManyResponse'txid =
                               Data.ProtoLens.fieldDefault,
                             _SendManyResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     SendManyResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser SendManyResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "txid"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"txid") y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "SendManyResponse"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"txid") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData SendManyResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_SendManyResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_SendManyResponse'txid x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.dest' @:: Lens' SendRequest Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.destString' @:: Lens' SendRequest Data.Text.Text@
    * 'Proto.Rpc_Fields.amt' @:: Lens' SendRequest Data.Int.Int64@
    * 'Proto.Rpc_Fields.paymentHash' @:: Lens' SendRequest Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.paymentHashString' @:: Lens' SendRequest Data.Text.Text@
    * 'Proto.Rpc_Fields.paymentRequest' @:: Lens' SendRequest Data.Text.Text@
    * 'Proto.Rpc_Fields.finalCltvDelta' @:: Lens' SendRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.feeLimit' @:: Lens' SendRequest FeeLimit@
    * 'Proto.Rpc_Fields.maybe'feeLimit' @:: Lens' SendRequest (Prelude.Maybe FeeLimit)@
    * 'Proto.Rpc_Fields.outgoingChanId' @:: Lens' SendRequest Data.Word.Word64@
    * 'Proto.Rpc_Fields.cltvLimit' @:: Lens' SendRequest Data.Word.Word32@
 -}
data SendRequest = SendRequest{_SendRequest'dest ::
                               !Data.ByteString.ByteString,
                               _SendRequest'destString :: !Data.Text.Text,
                               _SendRequest'amt :: !Data.Int.Int64,
                               _SendRequest'paymentHash :: !Data.ByteString.ByteString,
                               _SendRequest'paymentHashString :: !Data.Text.Text,
                               _SendRequest'paymentRequest :: !Data.Text.Text,
                               _SendRequest'finalCltvDelta :: !Data.Int.Int32,
                               _SendRequest'feeLimit :: !(Prelude.Maybe FeeLimit),
                               _SendRequest'outgoingChanId :: !Data.Word.Word64,
                               _SendRequest'cltvLimit :: !Data.Word.Word32,
                               _SendRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
                     deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SendRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SendRequest "dest"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'dest
               (\ x__ y__ -> x__{_SendRequest'dest = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendRequest "destString"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'destString
               (\ x__ y__ -> x__{_SendRequest'destString = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendRequest "amt"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'amt
               (\ x__ y__ -> x__{_SendRequest'amt = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendRequest "paymentHash"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'paymentHash
               (\ x__ y__ -> x__{_SendRequest'paymentHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendRequest
           "paymentHashString"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'paymentHashString
               (\ x__ y__ -> x__{_SendRequest'paymentHashString = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendRequest "paymentRequest"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'paymentRequest
               (\ x__ y__ -> x__{_SendRequest'paymentRequest = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendRequest "finalCltvDelta"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'finalCltvDelta
               (\ x__ y__ -> x__{_SendRequest'finalCltvDelta = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendRequest "feeLimit"
           (FeeLimit)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'feeLimit
               (\ x__ y__ -> x__{_SendRequest'feeLimit = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField SendRequest "maybe'feeLimit"
           (Prelude.Maybe FeeLimit)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'feeLimit
               (\ x__ y__ -> x__{_SendRequest'feeLimit = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendRequest "outgoingChanId"
           (Data.Word.Word64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'outgoingChanId
               (\ x__ y__ -> x__{_SendRequest'outgoingChanId = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendRequest "cltvLimit"
           (Data.Word.Word32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendRequest'cltvLimit
               (\ x__ y__ -> x__{_SendRequest'cltvLimit = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message SendRequest where
        messageName _ = Data.Text.pack "lnrpc.SendRequest"
        fieldsByTag
          = let dest__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "dest"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"dest"))
                      :: Data.ProtoLens.FieldDescriptor SendRequest
                destString__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "dest_string"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"destString"))
                      :: Data.ProtoLens.FieldDescriptor SendRequest
                amt__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amt"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amt"))
                      :: Data.ProtoLens.FieldDescriptor SendRequest
                paymentHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentHash"))
                      :: Data.ProtoLens.FieldDescriptor SendRequest
                paymentHashString__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_hash_string"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentHashString"))
                      :: Data.ProtoLens.FieldDescriptor SendRequest
                paymentRequest__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_request"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentRequest"))
                      :: Data.ProtoLens.FieldDescriptor SendRequest
                finalCltvDelta__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "final_cltv_delta"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"finalCltvDelta"))
                      :: Data.ProtoLens.FieldDescriptor SendRequest
                feeLimit__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "fee_limit"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor FeeLimit)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'feeLimit"))
                      :: Data.ProtoLens.FieldDescriptor SendRequest
                outgoingChanId__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "outgoing_chan_id"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"outgoingChanId"))
                      :: Data.ProtoLens.FieldDescriptor SendRequest
                cltvLimit__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "cltv_limit"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"cltvLimit"))
                      :: Data.ProtoLens.FieldDescriptor SendRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, dest__field_descriptor),
                 (Data.ProtoLens.Tag 2, destString__field_descriptor),
                 (Data.ProtoLens.Tag 3, amt__field_descriptor),
                 (Data.ProtoLens.Tag 4, paymentHash__field_descriptor),
                 (Data.ProtoLens.Tag 5, paymentHashString__field_descriptor),
                 (Data.ProtoLens.Tag 6, paymentRequest__field_descriptor),
                 (Data.ProtoLens.Tag 7, finalCltvDelta__field_descriptor),
                 (Data.ProtoLens.Tag 8, feeLimit__field_descriptor),
                 (Data.ProtoLens.Tag 9, outgoingChanId__field_descriptor),
                 (Data.ProtoLens.Tag 10, cltvLimit__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _SendRequest'_unknownFields
              (\ x__ y__ -> x__{_SendRequest'_unknownFields = y__})
        defMessage
          = SendRequest{_SendRequest'dest = Data.ProtoLens.fieldDefault,
                        _SendRequest'destString = Data.ProtoLens.fieldDefault,
                        _SendRequest'amt = Data.ProtoLens.fieldDefault,
                        _SendRequest'paymentHash = Data.ProtoLens.fieldDefault,
                        _SendRequest'paymentHashString = Data.ProtoLens.fieldDefault,
                        _SendRequest'paymentRequest = Data.ProtoLens.fieldDefault,
                        _SendRequest'finalCltvDelta = Data.ProtoLens.fieldDefault,
                        _SendRequest'feeLimit = Prelude.Nothing,
                        _SendRequest'outgoingChanId = Data.ProtoLens.fieldDefault,
                        _SendRequest'cltvLimit = Data.ProtoLens.fieldDefault,
                        _SendRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     SendRequest -> Data.ProtoLens.Encoding.Bytes.Parser SendRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "dest"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"dest") y
                                              x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "dest_string"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"destString")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "amt"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"amt") y
                                              x)
                                34 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentHash")
                                              y
                                              x)
                                42 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "payment_hash_string"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentHashString")
                                              y
                                              x)
                                50 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_request"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentRequest")
                                              y
                                              x)
                                56 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "final_cltv_delta"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"finalCltvDelta")
                                              y
                                              x)
                                66 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "fee_limit"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"feeLimit")
                                              y
                                              x)
                                72 -> do y <- (Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "outgoing_chan_id"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"outgoingChanId")
                                              y
                                              x)
                                80 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "cltv_limit"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"cltvLimit")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "SendRequest"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"dest") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"destString") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"amt") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"paymentHash") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                            (\ bs ->
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view
                                  (Data.ProtoLens.Field.field @"paymentHashString")
                                  _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 42) Data.Monoid.<>
                              (((\ bs ->
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Prelude.. Data.Text.Encoding.encodeUtf8)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"paymentRequest")
                                    _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 50) Data.Monoid.<>
                                (((\ bs ->
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                       Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Prelude.. Data.Text.Encoding.encodeUtf8)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"finalCltvDelta")
                                      _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 56) Data.Monoid.<>
                                  ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                     Prelude.fromIntegral)
                                    _v)
                             Data.Monoid.<>
                             (case
                                Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'feeLimit") _x
                                of
                                  (Prelude.Nothing) -> Data.Monoid.mempty
                                  Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                                       Data.Monoid.<>
                                                       (((\ bs ->
                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                               (Prelude.fromIntegral
                                                                  (Data.ByteString.length bs)))
                                                              Data.Monoid.<>
                                                              Data.ProtoLens.Encoding.Bytes.putBytes
                                                                bs))
                                                          Prelude.. Data.ProtoLens.encodeMessage)
                                                         _v)
                               Data.Monoid.<>
                               (let _v
                                      = Lens.Family2.view
                                          (Data.ProtoLens.Field.field @"outgoingChanId")
                                          _x
                                  in
                                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                    Data.Monoid.mempty else
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 72) Data.Monoid.<>
                                      Data.ProtoLens.Encoding.Bytes.putVarInt _v)
                                 Data.Monoid.<>
                                 (let _v
                                        = Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"cltvLimit")
                                            _x
                                    in
                                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                      Data.Monoid.mempty else
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 80) Data.Monoid.<>
                                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                           Prelude.fromIntegral)
                                          _v)
                                   Data.Monoid.<>
                                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData SendRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_SendRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_SendRequest'dest x__)
                    (Control.DeepSeq.deepseq (_SendRequest'destString x__)
                       (Control.DeepSeq.deepseq (_SendRequest'amt x__)
                          (Control.DeepSeq.deepseq (_SendRequest'paymentHash x__)
                             (Control.DeepSeq.deepseq (_SendRequest'paymentHashString x__)
                                (Control.DeepSeq.deepseq (_SendRequest'paymentRequest x__)
                                   (Control.DeepSeq.deepseq (_SendRequest'finalCltvDelta x__)
                                      (Control.DeepSeq.deepseq (_SendRequest'feeLimit x__)
                                         (Control.DeepSeq.deepseq (_SendRequest'outgoingChanId x__)
                                            (Control.DeepSeq.deepseq (_SendRequest'cltvLimit x__)
                                               (()))))))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.paymentError' @:: Lens' SendResponse Data.Text.Text@
    * 'Proto.Rpc_Fields.paymentPreimage' @:: Lens' SendResponse Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.paymentRoute' @:: Lens' SendResponse Route@
    * 'Proto.Rpc_Fields.maybe'paymentRoute' @:: Lens' SendResponse (Prelude.Maybe Route)@
    * 'Proto.Rpc_Fields.paymentHash' @:: Lens' SendResponse Data.ByteString.ByteString@
 -}
data SendResponse = SendResponse{_SendResponse'paymentError ::
                                 !Data.Text.Text,
                                 _SendResponse'paymentPreimage :: !Data.ByteString.ByteString,
                                 _SendResponse'paymentRoute :: !(Prelude.Maybe Route),
                                 _SendResponse'paymentHash :: !Data.ByteString.ByteString,
                                 _SendResponse'_unknownFields :: !Data.ProtoLens.FieldSet}
                      deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SendResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SendResponse "paymentError"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendResponse'paymentError
               (\ x__ y__ -> x__{_SendResponse'paymentError = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendResponse
           "paymentPreimage"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendResponse'paymentPreimage
               (\ x__ y__ -> x__{_SendResponse'paymentPreimage = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendResponse "paymentRoute"
           (Route)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendResponse'paymentRoute
               (\ x__ y__ -> x__{_SendResponse'paymentRoute = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField SendResponse
           "maybe'paymentRoute"
           (Prelude.Maybe Route)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendResponse'paymentRoute
               (\ x__ y__ -> x__{_SendResponse'paymentRoute = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendResponse "paymentHash"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendResponse'paymentHash
               (\ x__ y__ -> x__{_SendResponse'paymentHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message SendResponse where
        messageName _ = Data.Text.pack "lnrpc.SendResponse"
        fieldsByTag
          = let paymentError__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_error"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentError"))
                      :: Data.ProtoLens.FieldDescriptor SendResponse
                paymentPreimage__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_preimage"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentPreimage"))
                      :: Data.ProtoLens.FieldDescriptor SendResponse
                paymentRoute__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_route"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Route)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'paymentRoute"))
                      :: Data.ProtoLens.FieldDescriptor SendResponse
                paymentHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentHash"))
                      :: Data.ProtoLens.FieldDescriptor SendResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, paymentError__field_descriptor),
                 (Data.ProtoLens.Tag 2, paymentPreimage__field_descriptor),
                 (Data.ProtoLens.Tag 3, paymentRoute__field_descriptor),
                 (Data.ProtoLens.Tag 4, paymentHash__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _SendResponse'_unknownFields
              (\ x__ y__ -> x__{_SendResponse'_unknownFields = y__})
        defMessage
          = SendResponse{_SendResponse'paymentError =
                           Data.ProtoLens.fieldDefault,
                         _SendResponse'paymentPreimage = Data.ProtoLens.fieldDefault,
                         _SendResponse'paymentRoute = Prelude.Nothing,
                         _SendResponse'paymentHash = Data.ProtoLens.fieldDefault,
                         _SendResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     SendResponse -> Data.ProtoLens.Encoding.Bytes.Parser SendResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_error"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentError")
                                              y
                                              x)
                                18 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_preimage"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentPreimage")
                                              y
                                              x)
                                26 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_route"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentRoute")
                                              y
                                              x)
                                34 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentHash")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "SendResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"paymentError") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"paymentPreimage")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                          _v)
                   Data.Monoid.<>
                   (case
                      Lens.Family2.view
                        (Data.ProtoLens.Field.field @"maybe'paymentRoute")
                        _x
                      of
                        (Prelude.Nothing) -> Data.Monoid.mempty
                        Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                                             Data.Monoid.<>
                                             (((\ bs ->
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                    Data.Monoid.<>
                                                    Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                Prelude.. Data.ProtoLens.encodeMessage)
                                               _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"paymentHash") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                            (\ bs ->
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                              _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData SendResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_SendResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_SendResponse'paymentError x__)
                    (Control.DeepSeq.deepseq (_SendResponse'paymentPreimage x__)
                       (Control.DeepSeq.deepseq (_SendResponse'paymentRoute x__)
                          (Control.DeepSeq.deepseq (_SendResponse'paymentHash x__) (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.paymentHash' @:: Lens' SendToRouteRequest Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.paymentHashString' @:: Lens' SendToRouteRequest Data.Text.Text@
    * 'Proto.Rpc_Fields.routes' @:: Lens' SendToRouteRequest [Route]@
    * 'Proto.Rpc_Fields.vec'routes' @:: Lens' SendToRouteRequest (Data.Vector.Vector Route)@
    * 'Proto.Rpc_Fields.route' @:: Lens' SendToRouteRequest Route@
    * 'Proto.Rpc_Fields.maybe'route' @:: Lens' SendToRouteRequest (Prelude.Maybe Route)@
 -}
data SendToRouteRequest = SendToRouteRequest{_SendToRouteRequest'paymentHash
                                             :: !Data.ByteString.ByteString,
                                             _SendToRouteRequest'paymentHashString ::
                                             !Data.Text.Text,
                                             _SendToRouteRequest'routes ::
                                             !(Data.Vector.Vector Route),
                                             _SendToRouteRequest'route :: !(Prelude.Maybe Route),
                                             _SendToRouteRequest'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SendToRouteRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SendToRouteRequest
           "paymentHash"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendToRouteRequest'paymentHash
               (\ x__ y__ -> x__{_SendToRouteRequest'paymentHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendToRouteRequest
           "paymentHashString"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _SendToRouteRequest'paymentHashString
               (\ x__ y__ -> x__{_SendToRouteRequest'paymentHashString = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendToRouteRequest "routes"
           ([Route])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendToRouteRequest'routes
               (\ x__ y__ -> x__{_SendToRouteRequest'routes = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField SendToRouteRequest
           "vec'routes"
           (Data.Vector.Vector Route)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendToRouteRequest'routes
               (\ x__ y__ -> x__{_SendToRouteRequest'routes = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField SendToRouteRequest "route"
           (Route)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendToRouteRequest'route
               (\ x__ y__ -> x__{_SendToRouteRequest'route = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField SendToRouteRequest
           "maybe'route"
           (Prelude.Maybe Route)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SendToRouteRequest'route
               (\ x__ y__ -> x__{_SendToRouteRequest'route = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message SendToRouteRequest where
        messageName _ = Data.Text.pack "lnrpc.SendToRouteRequest"
        fieldsByTag
          = let paymentHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentHash"))
                      :: Data.ProtoLens.FieldDescriptor SendToRouteRequest
                paymentHashString__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "payment_hash_string"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"paymentHashString"))
                      :: Data.ProtoLens.FieldDescriptor SendToRouteRequest
                routes__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "routes"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Route)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"routes"))
                      :: Data.ProtoLens.FieldDescriptor SendToRouteRequest
                route__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "route"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Route)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'route"))
                      :: Data.ProtoLens.FieldDescriptor SendToRouteRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, paymentHash__field_descriptor),
                 (Data.ProtoLens.Tag 2, paymentHashString__field_descriptor),
                 (Data.ProtoLens.Tag 3, routes__field_descriptor),
                 (Data.ProtoLens.Tag 4, route__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _SendToRouteRequest'_unknownFields
              (\ x__ y__ -> x__{_SendToRouteRequest'_unknownFields = y__})
        defMessage
          = SendToRouteRequest{_SendToRouteRequest'paymentHash =
                                 Data.ProtoLens.fieldDefault,
                               _SendToRouteRequest'paymentHashString =
                                 Data.ProtoLens.fieldDefault,
                               _SendToRouteRequest'routes = Data.Vector.Generic.empty,
                               _SendToRouteRequest'route = Prelude.Nothing,
                               _SendToRouteRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     SendToRouteRequest ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Route
                         -> Data.ProtoLens.Encoding.Bytes.Parser SendToRouteRequest
                loop x mutable'routes
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'routes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                               (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                  mutable'routes)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'routes")
                                    frozen'routes
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "payment_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentHash")
                                              y
                                              x)
                                           mutable'routes
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "payment_hash_string"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"paymentHashString")
                                              y
                                              x)
                                           mutable'routes
                                26 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "routes"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'routes
                                                   y)
                                         loop x v
                                34 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "route"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"route") y
                                              x)
                                           mutable'routes
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'routes
              in
              (do mutable'routes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'routes)
                Data.ProtoLens.Encoding.Bytes.<?> "SendToRouteRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"paymentHash") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view
                            (Data.ProtoLens.Field.field @"paymentHashString")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt 26) Data.Monoid.<>
                           (((\ bs ->
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Prelude.. Data.ProtoLens.encodeMessage)
                             _v)
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'routes") _x))
                     Data.Monoid.<>
                     (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'route") _x of
                          (Prelude.Nothing) -> Data.Monoid.mempty
                          Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                               Data.Monoid.<>
                                               (((\ bs ->
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                      Data.Monoid.<>
                                                      Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                  Prelude.. Data.ProtoLens.encodeMessage)
                                                 _v)
                       Data.Monoid.<>
                       Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData SendToRouteRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_SendToRouteRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_SendToRouteRequest'paymentHash x__)
                    (Control.DeepSeq.deepseq
                       (_SendToRouteRequest'paymentHashString x__)
                       (Control.DeepSeq.deepseq (_SendToRouteRequest'routes x__)
                          (Control.DeepSeq.deepseq (_SendToRouteRequest'route x__) (()))))))
{- | Fields :

    * 'Proto.Rpc_Fields.msg' @:: Lens' SignMessageRequest Data.ByteString.ByteString@
 -}
data SignMessageRequest = SignMessageRequest{_SignMessageRequest'msg
                                             :: !Data.ByteString.ByteString,
                                             _SignMessageRequest'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SignMessageRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SignMessageRequest "msg"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SignMessageRequest'msg
               (\ x__ y__ -> x__{_SignMessageRequest'msg = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message SignMessageRequest where
        messageName _ = Data.Text.pack "lnrpc.SignMessageRequest"
        fieldsByTag
          = let msg__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "msg"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"msg"))
                      :: Data.ProtoLens.FieldDescriptor SignMessageRequest
              in
              Data.Map.fromList [(Data.ProtoLens.Tag 1, msg__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _SignMessageRequest'_unknownFields
              (\ x__ y__ -> x__{_SignMessageRequest'_unknownFields = y__})
        defMessage
          = SignMessageRequest{_SignMessageRequest'msg =
                                 Data.ProtoLens.fieldDefault,
                               _SignMessageRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     SignMessageRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser SignMessageRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "msg"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"msg") y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "SignMessageRequest"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"msg") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData SignMessageRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_SignMessageRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_SignMessageRequest'msg x__) (())))
{- | Fields :

    * 'Proto.Rpc_Fields.signature' @:: Lens' SignMessageResponse Data.Text.Text@
 -}
data SignMessageResponse = SignMessageResponse{_SignMessageResponse'signature
                                               :: !Data.Text.Text,
                                               _SignMessageResponse'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SignMessageResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SignMessageResponse
           "signature"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _SignMessageResponse'signature
               (\ x__ y__ -> x__{_SignMessageResponse'signature = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message SignMessageResponse where
        messageName _ = Data.Text.pack "lnrpc.SignMessageResponse"
        fieldsByTag
          = let signature__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "signature"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"signature"))
                      :: Data.ProtoLens.FieldDescriptor SignMessageResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, signature__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _SignMessageResponse'_unknownFields
              (\ x__ y__ -> x__{_SignMessageResponse'_unknownFields = y__})
        defMessage
          = SignMessageResponse{_SignMessageResponse'signature =
                                  Data.ProtoLens.fieldDefault,
                                _SignMessageResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     SignMessageResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser SignMessageResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "signature"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"signature")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "SignMessageResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"signature") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData SignMessageResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_SignMessageResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_SignMessageResponse'signature x__)
                    (())))
{- | Fields :

 -}
data StopRequest = StopRequest{_StopRequest'_unknownFields ::
                               !Data.ProtoLens.FieldSet}
                     deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show StopRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message StopRequest where
        messageName _ = Data.Text.pack "lnrpc.StopRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _StopRequest'_unknownFields
              (\ x__ y__ -> x__{_StopRequest'_unknownFields = y__})
        defMessage = StopRequest{_StopRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     StopRequest -> Data.ProtoLens.Encoding.Bytes.Parser StopRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "StopRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData StopRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_StopRequest'_unknownFields x__) (()))
{- | Fields :

 -}
data StopResponse = StopResponse{_StopResponse'_unknownFields ::
                                 !Data.ProtoLens.FieldSet}
                      deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show StopResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message StopResponse where
        messageName _ = Data.Text.pack "lnrpc.StopResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _StopResponse'_unknownFields
              (\ x__ y__ -> x__{_StopResponse'_unknownFields = y__})
        defMessage = StopResponse{_StopResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     StopResponse -> Data.ProtoLens.Encoding.Bytes.Parser StopResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "StopResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData StopResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_StopResponse'_unknownFields x__) (()))
{- | Fields :

    * 'Proto.Rpc_Fields.txHash' @:: Lens' Transaction Data.Text.Text@
    * 'Proto.Rpc_Fields.amount' @:: Lens' Transaction Data.Int.Int64@
    * 'Proto.Rpc_Fields.numConfirmations' @:: Lens' Transaction Data.Int.Int32@
    * 'Proto.Rpc_Fields.blockHash' @:: Lens' Transaction Data.Text.Text@
    * 'Proto.Rpc_Fields.blockHeight' @:: Lens' Transaction Data.Int.Int32@
    * 'Proto.Rpc_Fields.timeStamp' @:: Lens' Transaction Data.Int.Int64@
    * 'Proto.Rpc_Fields.totalFees' @:: Lens' Transaction Data.Int.Int64@
    * 'Proto.Rpc_Fields.destAddresses' @:: Lens' Transaction [Data.Text.Text]@
    * 'Proto.Rpc_Fields.vec'destAddresses' @:: Lens' Transaction (Data.Vector.Vector Data.Text.Text)@
 -}
data Transaction = Transaction{_Transaction'txHash ::
                               !Data.Text.Text,
                               _Transaction'amount :: !Data.Int.Int64,
                               _Transaction'numConfirmations :: !Data.Int.Int32,
                               _Transaction'blockHash :: !Data.Text.Text,
                               _Transaction'blockHeight :: !Data.Int.Int32,
                               _Transaction'timeStamp :: !Data.Int.Int64,
                               _Transaction'totalFees :: !Data.Int.Int64,
                               _Transaction'destAddresses :: !(Data.Vector.Vector Data.Text.Text),
                               _Transaction'_unknownFields :: !Data.ProtoLens.FieldSet}
                     deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Transaction where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Transaction "txHash"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Transaction'txHash
               (\ x__ y__ -> x__{_Transaction'txHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Transaction "amount"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Transaction'amount
               (\ x__ y__ -> x__{_Transaction'amount = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Transaction
           "numConfirmations"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Transaction'numConfirmations
               (\ x__ y__ -> x__{_Transaction'numConfirmations = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Transaction "blockHash"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Transaction'blockHash
               (\ x__ y__ -> x__{_Transaction'blockHash = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Transaction "blockHeight"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Transaction'blockHeight
               (\ x__ y__ -> x__{_Transaction'blockHeight = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Transaction "timeStamp"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Transaction'timeStamp
               (\ x__ y__ -> x__{_Transaction'timeStamp = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Transaction "totalFees"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Transaction'totalFees
               (\ x__ y__ -> x__{_Transaction'totalFees = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Transaction "destAddresses"
           ([Data.Text.Text])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Transaction'destAddresses
               (\ x__ y__ -> x__{_Transaction'destAddresses = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField Transaction
           "vec'destAddresses"
           (Data.Vector.Vector Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Transaction'destAddresses
               (\ x__ y__ -> x__{_Transaction'destAddresses = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message Transaction where
        messageName _ = Data.Text.pack "lnrpc.Transaction"
        fieldsByTag
          = let txHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "tx_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"txHash"))
                      :: Data.ProtoLens.FieldDescriptor Transaction
                amount__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amount"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amount"))
                      :: Data.ProtoLens.FieldDescriptor Transaction
                numConfirmations__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "num_confirmations"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"numConfirmations"))
                      :: Data.ProtoLens.FieldDescriptor Transaction
                blockHash__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "block_hash"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"blockHash"))
                      :: Data.ProtoLens.FieldDescriptor Transaction
                blockHeight__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "block_height"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"blockHeight"))
                      :: Data.ProtoLens.FieldDescriptor Transaction
                timeStamp__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "time_stamp"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"timeStamp"))
                      :: Data.ProtoLens.FieldDescriptor Transaction
                totalFees__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_fees"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalFees"))
                      :: Data.ProtoLens.FieldDescriptor Transaction
                destAddresses__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "dest_addresses"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"destAddresses"))
                      :: Data.ProtoLens.FieldDescriptor Transaction
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, txHash__field_descriptor),
                 (Data.ProtoLens.Tag 2, amount__field_descriptor),
                 (Data.ProtoLens.Tag 3, numConfirmations__field_descriptor),
                 (Data.ProtoLens.Tag 4, blockHash__field_descriptor),
                 (Data.ProtoLens.Tag 5, blockHeight__field_descriptor),
                 (Data.ProtoLens.Tag 6, timeStamp__field_descriptor),
                 (Data.ProtoLens.Tag 7, totalFees__field_descriptor),
                 (Data.ProtoLens.Tag 8, destAddresses__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _Transaction'_unknownFields
              (\ x__ y__ -> x__{_Transaction'_unknownFields = y__})
        defMessage
          = Transaction{_Transaction'txHash = Data.ProtoLens.fieldDefault,
                        _Transaction'amount = Data.ProtoLens.fieldDefault,
                        _Transaction'numConfirmations = Data.ProtoLens.fieldDefault,
                        _Transaction'blockHash = Data.ProtoLens.fieldDefault,
                        _Transaction'blockHeight = Data.ProtoLens.fieldDefault,
                        _Transaction'timeStamp = Data.ProtoLens.fieldDefault,
                        _Transaction'totalFees = Data.ProtoLens.fieldDefault,
                        _Transaction'destAddresses = Data.Vector.Generic.empty,
                        _Transaction'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     Transaction ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Data.Text.Text
                         -> Data.ProtoLens.Encoding.Bytes.Parser Transaction
                loop x mutable'destAddresses
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'destAddresses <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                      (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                         mutable'destAddresses)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'destAddresses")
                                    frozen'destAddresses
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "tx_hash"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"txHash")
                                              y
                                              x)
                                           mutable'destAddresses
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "amount"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"amount")
                                              y
                                              x)
                                           mutable'destAddresses
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "num_confirmations"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"numConfirmations")
                                              y
                                              x)
                                           mutable'destAddresses
                                34 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "block_hash"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"blockHash")
                                              y
                                              x)
                                           mutable'destAddresses
                                40 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "block_height"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"blockHeight")
                                              y
                                              x)
                                           mutable'destAddresses
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "time_stamp"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"timeStamp")
                                              y
                                              x)
                                           mutable'destAddresses
                                56 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "total_fees"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"totalFees")
                                              y
                                              x)
                                           mutable'destAddresses
                                66 -> do !y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                               Data.ProtoLens.Encoding.Bytes.getBytes
                                                                 (Prelude.fromIntegral len)
                                                   Data.ProtoLens.Encoding.Bytes.runEither
                                                     (case Data.Text.Encoding.decodeUtf8' value of
                                                          Prelude.Left err -> Prelude.Left
                                                                                (Prelude.show err)
                                                          Prelude.Right r -> Prelude.Right r))
                                                 Data.ProtoLens.Encoding.Bytes.<?> "dest_addresses"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'destAddresses
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'destAddresses
              in
              (do mutable'destAddresses <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'destAddresses)
                Data.ProtoLens.Encoding.Bytes.<?> "Transaction"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"txHash") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (((\ bs ->
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                             Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Prelude.. Data.Text.Encoding.encodeUtf8)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"amount") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view
                              (Data.ProtoLens.Field.field @"numConfirmations")
                              _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"blockHash") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                            (((\ bs ->
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                               Prelude.. Data.Text.Encoding.encodeUtf8)
                              _v)
                       Data.Monoid.<>
                       (let _v
                              = Lens.Family2.view (Data.ProtoLens.Field.field @"blockHeight") _x
                          in
                          if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                            Data.Monoid.mempty else
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40) Data.Monoid.<>
                              ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                 Prelude.fromIntegral)
                                _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"timeStamp") _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           (let _v
                                  = Lens.Family2.view (Data.ProtoLens.Field.field @"totalFees") _x
                              in
                              if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                                Data.Monoid.mempty else
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 56) Data.Monoid.<>
                                  ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                     Prelude.fromIntegral)
                                    _v)
                             Data.Monoid.<>
                             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                (\ _v ->
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 66) Data.Monoid.<>
                                     (((\ bs ->
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                             (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            Data.Monoid.<>
                                            Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                        Prelude.. Data.Text.Encoding.encodeUtf8)
                                       _v)
                                (Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"vec'destAddresses")
                                   _x))
                               Data.Monoid.<>
                               Data.ProtoLens.Encoding.Wire.buildFieldSet
                                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData Transaction where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_Transaction'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_Transaction'txHash x__)
                    (Control.DeepSeq.deepseq (_Transaction'amount x__)
                       (Control.DeepSeq.deepseq (_Transaction'numConfirmations x__)
                          (Control.DeepSeq.deepseq (_Transaction'blockHash x__)
                             (Control.DeepSeq.deepseq (_Transaction'blockHeight x__)
                                (Control.DeepSeq.deepseq (_Transaction'timeStamp x__)
                                   (Control.DeepSeq.deepseq (_Transaction'totalFees x__)
                                      (Control.DeepSeq.deepseq (_Transaction'destAddresses x__)
                                         (()))))))))))
{- | Fields :

    * 'Proto.Rpc_Fields.transactions' @:: Lens' TransactionDetails [Transaction]@
    * 'Proto.Rpc_Fields.vec'transactions' @:: Lens' TransactionDetails (Data.Vector.Vector Transaction)@
 -}
data TransactionDetails = TransactionDetails{_TransactionDetails'transactions
                                             :: !(Data.Vector.Vector Transaction),
                                             _TransactionDetails'_unknownFields ::
                                             !Data.ProtoLens.FieldSet}
                            deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TransactionDetails where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TransactionDetails
           "transactions"
           ([Transaction])
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _TransactionDetails'transactions
               (\ x__ y__ -> x__{_TransactionDetails'transactions = y__}))
              Prelude..
              Lens.Family2.Unchecked.lens Data.Vector.Generic.toList
                (\ _ y__ -> Data.Vector.Generic.fromList y__)
instance Data.ProtoLens.Field.HasField TransactionDetails
           "vec'transactions"
           (Data.Vector.Vector Transaction)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _TransactionDetails'transactions
               (\ x__ y__ -> x__{_TransactionDetails'transactions = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message TransactionDetails where
        messageName _ = Data.Text.pack "lnrpc.TransactionDetails"
        fieldsByTag
          = let transactions__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "transactions"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor Transaction)
                      (Data.ProtoLens.RepeatedField Data.ProtoLens.Unpacked
                         (Data.ProtoLens.Field.field @"transactions"))
                      :: Data.ProtoLens.FieldDescriptor TransactionDetails
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, transactions__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _TransactionDetails'_unknownFields
              (\ x__ y__ -> x__{_TransactionDetails'_unknownFields = y__})
        defMessage
          = TransactionDetails{_TransactionDetails'transactions =
                                 Data.Vector.Generic.empty,
                               _TransactionDetails'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     TransactionDetails ->
                       Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector
                         Data.ProtoLens.Encoding.Growing.RealWorld
                         Transaction
                         -> Data.ProtoLens.Encoding.Bytes.Parser TransactionDetails
                loop x mutable'transactions
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do frozen'transactions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                     (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                        mutable'transactions)
                            let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 (Lens.Family2.set (Data.ProtoLens.Field.field @"vec'transactions")
                                    frozen'transactions
                                    x))
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do !y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                   Data.ProtoLens.Encoding.Bytes.isolate
                                                     (Prelude.fromIntegral len)
                                                     Data.ProtoLens.parseMessage)
                                                 Data.ProtoLens.Encoding.Bytes.<?> "transactions"
                                         v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.append
                                                   mutable'transactions
                                                   y)
                                         loop x v
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
                                             mutable'transactions
              in
              (do mutable'transactions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            Data.ProtoLens.Encoding.Growing.new
                  loop Data.ProtoLens.defMessage mutable'transactions)
                Data.ProtoLens.Encoding.Bytes.<?> "TransactionDetails"
        buildMessage
          = (\ _x ->
               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                  (\ _v ->
                     (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                       (((\ bs ->
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                              Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Prelude.. Data.ProtoLens.encodeMessage)
                         _v)
                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'transactions")
                     _x))
                 Data.Monoid.<>
                 Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData TransactionDetails where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_TransactionDetails'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_TransactionDetails'transactions x__)
                    (())))
{- | Fields :

    * 'Proto.Rpc_Fields.walletPassword' @:: Lens' UnlockWalletRequest Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.recoveryWindow' @:: Lens' UnlockWalletRequest Data.Int.Int32@
    * 'Proto.Rpc_Fields.channelBackups' @:: Lens' UnlockWalletRequest ChanBackupSnapshot@
    * 'Proto.Rpc_Fields.maybe'channelBackups' @:: Lens' UnlockWalletRequest (Prelude.Maybe ChanBackupSnapshot)@
 -}
data UnlockWalletRequest = UnlockWalletRequest{_UnlockWalletRequest'walletPassword
                                               :: !Data.ByteString.ByteString,
                                               _UnlockWalletRequest'recoveryWindow ::
                                               !Data.Int.Int32,
                                               _UnlockWalletRequest'channelBackups ::
                                               !(Prelude.Maybe ChanBackupSnapshot),
                                               _UnlockWalletRequest'_unknownFields ::
                                               !Data.ProtoLens.FieldSet}
                             deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UnlockWalletRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UnlockWalletRequest
           "walletPassword"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _UnlockWalletRequest'walletPassword
               (\ x__ y__ -> x__{_UnlockWalletRequest'walletPassword = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField UnlockWalletRequest
           "recoveryWindow"
           (Data.Int.Int32)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _UnlockWalletRequest'recoveryWindow
               (\ x__ y__ -> x__{_UnlockWalletRequest'recoveryWindow = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField UnlockWalletRequest
           "channelBackups"
           (ChanBackupSnapshot)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _UnlockWalletRequest'channelBackups
               (\ x__ y__ -> x__{_UnlockWalletRequest'channelBackups = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField UnlockWalletRequest
           "maybe'channelBackups"
           (Prelude.Maybe ChanBackupSnapshot)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _UnlockWalletRequest'channelBackups
               (\ x__ y__ -> x__{_UnlockWalletRequest'channelBackups = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message UnlockWalletRequest where
        messageName _ = Data.Text.pack "lnrpc.UnlockWalletRequest"
        fieldsByTag
          = let walletPassword__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "wallet_password"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"walletPassword"))
                      :: Data.ProtoLens.FieldDescriptor UnlockWalletRequest
                recoveryWindow__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "recovery_window"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"recoveryWindow"))
                      :: Data.ProtoLens.FieldDescriptor UnlockWalletRequest
                channelBackups__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "channel_backups"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor ChanBackupSnapshot)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'channelBackups"))
                      :: Data.ProtoLens.FieldDescriptor UnlockWalletRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, walletPassword__field_descriptor),
                 (Data.ProtoLens.Tag 2, recoveryWindow__field_descriptor),
                 (Data.ProtoLens.Tag 3, channelBackups__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _UnlockWalletRequest'_unknownFields
              (\ x__ y__ -> x__{_UnlockWalletRequest'_unknownFields = y__})
        defMessage
          = UnlockWalletRequest{_UnlockWalletRequest'walletPassword =
                                  Data.ProtoLens.fieldDefault,
                                _UnlockWalletRequest'recoveryWindow = Data.ProtoLens.fieldDefault,
                                _UnlockWalletRequest'channelBackups = Prelude.Nothing,
                                _UnlockWalletRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     UnlockWalletRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser UnlockWalletRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "wallet_password"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"walletPassword")
                                              y
                                              x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "recovery_window"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"recoveryWindow")
                                              y
                                              x)
                                26 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "channel_backups"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"channelBackups")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "UnlockWalletRequest"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"walletPassword")
                          _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"recoveryWindow")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (case
                      Lens.Family2.view
                        (Data.ProtoLens.Field.field @"maybe'channelBackups")
                        _x
                      of
                        (Prelude.Nothing) -> Data.Monoid.mempty
                        Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                                             Data.Monoid.<>
                                             (((\ bs ->
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                    Data.Monoid.<>
                                                    Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                Prelude.. Data.ProtoLens.encodeMessage)
                                               _v)
                     Data.Monoid.<>
                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                       (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData UnlockWalletRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_UnlockWalletRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_UnlockWalletRequest'walletPassword x__)
                    (Control.DeepSeq.deepseq (_UnlockWalletRequest'recoveryWindow x__)
                       (Control.DeepSeq.deepseq (_UnlockWalletRequest'channelBackups x__)
                          (())))))
{- | Fields :

 -}
data UnlockWalletResponse = UnlockWalletResponse{_UnlockWalletResponse'_unknownFields
                                                 :: !Data.ProtoLens.FieldSet}
                              deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UnlockWalletResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message UnlockWalletResponse where
        messageName _ = Data.Text.pack "lnrpc.UnlockWalletResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _UnlockWalletResponse'_unknownFields
              (\ x__ y__ -> x__{_UnlockWalletResponse'_unknownFields = y__})
        defMessage
          = UnlockWalletResponse{_UnlockWalletResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     UnlockWalletResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser UnlockWalletResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "UnlockWalletResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData UnlockWalletResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_UnlockWalletResponse'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.type'' @:: Lens' Utxo AddressType@
    * 'Proto.Rpc_Fields.address' @:: Lens' Utxo Data.Text.Text@
    * 'Proto.Rpc_Fields.amountSat' @:: Lens' Utxo Data.Int.Int64@
    * 'Proto.Rpc_Fields.pkScript' @:: Lens' Utxo Data.Text.Text@
    * 'Proto.Rpc_Fields.outpoint' @:: Lens' Utxo OutPoint@
    * 'Proto.Rpc_Fields.maybe'outpoint' @:: Lens' Utxo (Prelude.Maybe OutPoint)@
    * 'Proto.Rpc_Fields.confirmations' @:: Lens' Utxo Data.Int.Int64@
 -}
data Utxo = Utxo{_Utxo'type' :: !AddressType,
                 _Utxo'address :: !Data.Text.Text,
                 _Utxo'amountSat :: !Data.Int.Int64,
                 _Utxo'pkScript :: !Data.Text.Text,
                 _Utxo'outpoint :: !(Prelude.Maybe OutPoint),
                 _Utxo'confirmations :: !Data.Int.Int64,
                 _Utxo'_unknownFields :: !Data.ProtoLens.FieldSet}
              deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Utxo where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Utxo "type'" (AddressType)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Utxo'type'
               (\ x__ y__ -> x__{_Utxo'type' = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Utxo "address"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Utxo'address
               (\ x__ y__ -> x__{_Utxo'address = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Utxo "amountSat"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Utxo'amountSat
               (\ x__ y__ -> x__{_Utxo'amountSat = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Utxo "pkScript"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Utxo'pkScript
               (\ x__ y__ -> x__{_Utxo'pkScript = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Utxo "outpoint" (OutPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Utxo'outpoint
               (\ x__ y__ -> x__{_Utxo'outpoint = y__}))
              Prelude.. Data.ProtoLens.maybeLens Data.ProtoLens.defMessage
instance Data.ProtoLens.Field.HasField Utxo "maybe'outpoint"
           (Prelude.Maybe OutPoint)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Utxo'outpoint
               (\ x__ y__ -> x__{_Utxo'outpoint = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField Utxo "confirmations"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _Utxo'confirmations
               (\ x__ y__ -> x__{_Utxo'confirmations = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message Utxo where
        messageName _ = Data.Text.pack "lnrpc.Utxo"
        fieldsByTag
          = let type'__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "type"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                         Data.ProtoLens.FieldTypeDescriptor AddressType)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"type'"))
                      :: Data.ProtoLens.FieldDescriptor Utxo
                address__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "address"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"address"))
                      :: Data.ProtoLens.FieldDescriptor Utxo
                amountSat__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "amount_sat"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"amountSat"))
                      :: Data.ProtoLens.FieldDescriptor Utxo
                pkScript__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pk_script"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pkScript"))
                      :: Data.ProtoLens.FieldDescriptor Utxo
                outpoint__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "outpoint"
                      (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                         Data.ProtoLens.FieldTypeDescriptor OutPoint)
                      (Data.ProtoLens.OptionalField
                         (Data.ProtoLens.Field.field @"maybe'outpoint"))
                      :: Data.ProtoLens.FieldDescriptor Utxo
                confirmations__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "confirmations"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"confirmations"))
                      :: Data.ProtoLens.FieldDescriptor Utxo
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, type'__field_descriptor),
                 (Data.ProtoLens.Tag 2, address__field_descriptor),
                 (Data.ProtoLens.Tag 3, amountSat__field_descriptor),
                 (Data.ProtoLens.Tag 4, pkScript__field_descriptor),
                 (Data.ProtoLens.Tag 5, outpoint__field_descriptor),
                 (Data.ProtoLens.Tag 6, confirmations__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _Utxo'_unknownFields
              (\ x__ y__ -> x__{_Utxo'_unknownFields = y__})
        defMessage
          = Utxo{_Utxo'type' = Data.ProtoLens.fieldDefault,
                 _Utxo'address = Data.ProtoLens.fieldDefault,
                 _Utxo'amountSat = Data.ProtoLens.fieldDefault,
                 _Utxo'pkScript = Data.ProtoLens.fieldDefault,
                 _Utxo'outpoint = Prelude.Nothing,
                 _Utxo'confirmations = Data.ProtoLens.fieldDefault,
                 _Utxo'_unknownFields = ([])}
        parseMessage
          = let loop :: Utxo -> Data.ProtoLens.Encoding.Bytes.Parser Utxo
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.toEnum
                                                (Prelude.fmap Prelude.fromIntegral
                                                   Data.ProtoLens.Encoding.Bytes.getVarInt))
                                               Data.ProtoLens.Encoding.Bytes.<?> "type"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y
                                             x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "address"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"address")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "amount_sat"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"amountSat")
                                              y
                                              x)
                                34 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "pk_script"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"pkScript")
                                              y
                                              x)
                                42 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.isolate
                                                    (Prelude.fromIntegral len)
                                                    Data.ProtoLens.parseMessage)
                                                Data.ProtoLens.Encoding.Bytes.<?> "outpoint"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"outpoint")
                                              y
                                              x)
                                48 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?> "confirmations"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"confirmations")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "Utxo"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      (((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                          Prelude.fromIntegral)
                         Prelude.. Prelude.fromEnum)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"address") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view (Data.ProtoLens.Field.field @"amountSat") _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     (let _v
                            = Lens.Family2.view (Data.ProtoLens.Field.field @"pkScript") _x
                        in
                        if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                          Data.Monoid.mempty else
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 34) Data.Monoid.<>
                            (((\ bs ->
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                               Prelude.. Data.Text.Encoding.encodeUtf8)
                              _v)
                       Data.Monoid.<>
                       (case
                          Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'outpoint") _x
                          of
                            (Prelude.Nothing) -> Data.Monoid.mempty
                            Prelude.Just _v -> (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                                 Data.Monoid.<>
                                                 (((\ bs ->
                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                         (Prelude.fromIntegral
                                                            (Data.ByteString.length bs)))
                                                        Data.Monoid.<>
                                                        Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                    Prelude.. Data.ProtoLens.encodeMessage)
                                                   _v)
                         Data.Monoid.<>
                         (let _v
                                = Lens.Family2.view (Data.ProtoLens.Field.field @"confirmations")
                                    _x
                            in
                            if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                              Data.Monoid.mempty else
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 48) Data.Monoid.<>
                                ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                                   Prelude.fromIntegral)
                                  _v)
                           Data.Monoid.<>
                           Data.ProtoLens.Encoding.Wire.buildFieldSet
                             (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData Utxo where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_Utxo'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_Utxo'type' x__)
                    (Control.DeepSeq.deepseq (_Utxo'address x__)
                       (Control.DeepSeq.deepseq (_Utxo'amountSat x__)
                          (Control.DeepSeq.deepseq (_Utxo'pkScript x__)
                             (Control.DeepSeq.deepseq (_Utxo'outpoint x__)
                                (Control.DeepSeq.deepseq (_Utxo'confirmations x__) (()))))))))
{- | Fields :

 -}
data VerifyChanBackupResponse = VerifyChanBackupResponse{_VerifyChanBackupResponse'_unknownFields
                                                         :: !Data.ProtoLens.FieldSet}
                                  deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show VerifyChanBackupResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message VerifyChanBackupResponse where
        messageName _ = Data.Text.pack "lnrpc.VerifyChanBackupResponse"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens
              _VerifyChanBackupResponse'_unknownFields
              (\ x__ y__ -> x__{_VerifyChanBackupResponse'_unknownFields = y__})
        defMessage
          = VerifyChanBackupResponse{_VerifyChanBackupResponse'_unknownFields
                                       = ([])}
        parseMessage
          = let loop ::
                     VerifyChanBackupResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser VerifyChanBackupResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "VerifyChanBackupResponse"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData VerifyChanBackupResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq
                 (_VerifyChanBackupResponse'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.msg' @:: Lens' VerifyMessageRequest Data.ByteString.ByteString@
    * 'Proto.Rpc_Fields.signature' @:: Lens' VerifyMessageRequest Data.Text.Text@
 -}
data VerifyMessageRequest = VerifyMessageRequest{_VerifyMessageRequest'msg
                                                 :: !Data.ByteString.ByteString,
                                                 _VerifyMessageRequest'signature :: !Data.Text.Text,
                                                 _VerifyMessageRequest'_unknownFields ::
                                                 !Data.ProtoLens.FieldSet}
                              deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show VerifyMessageRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField VerifyMessageRequest "msg"
           (Data.ByteString.ByteString)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _VerifyMessageRequest'msg
               (\ x__ y__ -> x__{_VerifyMessageRequest'msg = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField VerifyMessageRequest
           "signature"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _VerifyMessageRequest'signature
               (\ x__ y__ -> x__{_VerifyMessageRequest'signature = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message VerifyMessageRequest where
        messageName _ = Data.Text.pack "lnrpc.VerifyMessageRequest"
        fieldsByTag
          = let msg__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "msg"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"msg"))
                      :: Data.ProtoLens.FieldDescriptor VerifyMessageRequest
                signature__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "signature"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"signature"))
                      :: Data.ProtoLens.FieldDescriptor VerifyMessageRequest
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, msg__field_descriptor),
                 (Data.ProtoLens.Tag 2, signature__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _VerifyMessageRequest'_unknownFields
              (\ x__ y__ -> x__{_VerifyMessageRequest'_unknownFields = y__})
        defMessage
          = VerifyMessageRequest{_VerifyMessageRequest'msg =
                                   Data.ProtoLens.fieldDefault,
                                 _VerifyMessageRequest'signature = Data.ProtoLens.fieldDefault,
                                 _VerifyMessageRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     VerifyMessageRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser VerifyMessageRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                10 -> do y <- (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                  Data.ProtoLens.Encoding.Bytes.getBytes
                                                    (Prelude.fromIntegral len))
                                                Data.ProtoLens.Encoding.Bytes.<?> "msg"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"msg") y
                                              x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "signature"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"signature")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "VerifyMessageRequest"
        buildMessage
          = (\ _x ->
               (let _v = Lens.Family2.view (Data.ProtoLens.Field.field @"msg") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 10) Data.Monoid.<>
                      (\ bs ->
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                           Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"signature") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData VerifyMessageRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_VerifyMessageRequest'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_VerifyMessageRequest'msg x__)
                    (Control.DeepSeq.deepseq (_VerifyMessageRequest'signature x__)
                       (()))))
{- | Fields :

    * 'Proto.Rpc_Fields.valid' @:: Lens' VerifyMessageResponse Prelude.Bool@
    * 'Proto.Rpc_Fields.pubkey' @:: Lens' VerifyMessageResponse Data.Text.Text@
 -}
data VerifyMessageResponse = VerifyMessageResponse{_VerifyMessageResponse'valid
                                                   :: !Prelude.Bool,
                                                   _VerifyMessageResponse'pubkey :: !Data.Text.Text,
                                                   _VerifyMessageResponse'_unknownFields ::
                                                   !Data.ProtoLens.FieldSet}
                               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show VerifyMessageResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField VerifyMessageResponse
           "valid"
           (Prelude.Bool)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _VerifyMessageResponse'valid
               (\ x__ y__ -> x__{_VerifyMessageResponse'valid = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField VerifyMessageResponse
           "pubkey"
           (Data.Text.Text)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _VerifyMessageResponse'pubkey
               (\ x__ y__ -> x__{_VerifyMessageResponse'pubkey = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message VerifyMessageResponse where
        messageName _ = Data.Text.pack "lnrpc.VerifyMessageResponse"
        fieldsByTag
          = let valid__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "valid"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                         Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"valid"))
                      :: Data.ProtoLens.FieldDescriptor VerifyMessageResponse
                pubkey__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "pubkey"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"pubkey"))
                      :: Data.ProtoLens.FieldDescriptor VerifyMessageResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, valid__field_descriptor),
                 (Data.ProtoLens.Tag 2, pubkey__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _VerifyMessageResponse'_unknownFields
              (\ x__ y__ -> x__{_VerifyMessageResponse'_unknownFields = y__})
        defMessage
          = VerifyMessageResponse{_VerifyMessageResponse'valid =
                                    Data.ProtoLens.fieldDefault,
                                  _VerifyMessageResponse'pubkey = Data.ProtoLens.fieldDefault,
                                  _VerifyMessageResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     VerifyMessageResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser VerifyMessageResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap ((Prelude./=) 0)
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "valid"
                                        loop
                                          (Lens.Family2.set (Data.ProtoLens.Field.field @"valid") y
                                             x)
                                18 -> do y <- (do value <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                                              Data.ProtoLens.Encoding.Bytes.getBytes
                                                                (Prelude.fromIntegral len)
                                                  Data.ProtoLens.Encoding.Bytes.runEither
                                                    (case Data.Text.Encoding.decodeUtf8' value of
                                                         Prelude.Left err -> Prelude.Left
                                                                               (Prelude.show err)
                                                         Prelude.Right r -> Prelude.Right r))
                                                Data.ProtoLens.Encoding.Bytes.<?> "pubkey"
                                         loop
                                           (Lens.Family2.set (Data.ProtoLens.Field.field @"pubkey")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "VerifyMessageResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"valid") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         (\ b -> if b then 1 else 0))
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view (Data.ProtoLens.Field.field @"pubkey") _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 18) Data.Monoid.<>
                        (((\ bs ->
                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                               Data.Monoid.<> Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Prelude.. Data.Text.Encoding.encodeUtf8)
                          _v)
                   Data.Monoid.<>
                   Data.ProtoLens.Encoding.Wire.buildFieldSet
                     (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData VerifyMessageResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_VerifyMessageResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_VerifyMessageResponse'valid x__)
                    (Control.DeepSeq.deepseq (_VerifyMessageResponse'pubkey x__)
                       (()))))
{- | Fields :

 -}
data WalletBalanceRequest = WalletBalanceRequest{_WalletBalanceRequest'_unknownFields
                                                 :: !Data.ProtoLens.FieldSet}
                              deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show WalletBalanceRequest where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message WalletBalanceRequest where
        messageName _ = Data.Text.pack "lnrpc.WalletBalanceRequest"
        fieldsByTag = let in Data.Map.fromList []
        unknownFields
          = Lens.Family2.Unchecked.lens _WalletBalanceRequest'_unknownFields
              (\ x__ y__ -> x__{_WalletBalanceRequest'_unknownFields = y__})
        defMessage
          = WalletBalanceRequest{_WalletBalanceRequest'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     WalletBalanceRequest ->
                       Data.ProtoLens.Encoding.Bytes.Parser WalletBalanceRequest
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "WalletBalanceRequest"
        buildMessage
          = (\ _x ->
               Data.ProtoLens.Encoding.Wire.buildFieldSet
                 (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData WalletBalanceRequest where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_WalletBalanceRequest'_unknownFields x__)
                 (()))
{- | Fields :

    * 'Proto.Rpc_Fields.totalBalance' @:: Lens' WalletBalanceResponse Data.Int.Int64@
    * 'Proto.Rpc_Fields.confirmedBalance' @:: Lens' WalletBalanceResponse Data.Int.Int64@
    * 'Proto.Rpc_Fields.unconfirmedBalance' @:: Lens' WalletBalanceResponse Data.Int.Int64@
 -}
data WalletBalanceResponse = WalletBalanceResponse{_WalletBalanceResponse'totalBalance
                                                   :: !Data.Int.Int64,
                                                   _WalletBalanceResponse'confirmedBalance ::
                                                   !Data.Int.Int64,
                                                   _WalletBalanceResponse'unconfirmedBalance ::
                                                   !Data.Int.Int64,
                                                   _WalletBalanceResponse'_unknownFields ::
                                                   !Data.ProtoLens.FieldSet}
                               deriving (Prelude.Eq, Prelude.Ord)
instance Prelude.Show WalletBalanceResponse where
        showsPrec _ __x __s
          = Prelude.showChar '{'
              (Prelude.showString (Data.ProtoLens.showMessageShort __x)
                 (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField WalletBalanceResponse
           "totalBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens _WalletBalanceResponse'totalBalance
               (\ x__ y__ -> x__{_WalletBalanceResponse'totalBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField WalletBalanceResponse
           "confirmedBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _WalletBalanceResponse'confirmedBalance
               (\ x__ y__ -> x__{_WalletBalanceResponse'confirmedBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Field.HasField WalletBalanceResponse
           "unconfirmedBalance"
           (Data.Int.Int64)
         where
        fieldOf _
          = (Lens.Family2.Unchecked.lens
               _WalletBalanceResponse'unconfirmedBalance
               (\ x__ y__ ->
                  x__{_WalletBalanceResponse'unconfirmedBalance = y__}))
              Prelude.. Prelude.id
instance Data.ProtoLens.Message WalletBalanceResponse where
        messageName _ = Data.Text.pack "lnrpc.WalletBalanceResponse"
        fieldsByTag
          = let totalBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "total_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"totalBalance"))
                      :: Data.ProtoLens.FieldDescriptor WalletBalanceResponse
                confirmedBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "confirmed_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"confirmedBalance"))
                      :: Data.ProtoLens.FieldDescriptor WalletBalanceResponse
                unconfirmedBalance__field_descriptor
                  = Data.ProtoLens.FieldDescriptor "unconfirmed_balance"
                      (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                         Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
                      (Data.ProtoLens.PlainField Data.ProtoLens.Optional
                         (Data.ProtoLens.Field.field @"unconfirmedBalance"))
                      :: Data.ProtoLens.FieldDescriptor WalletBalanceResponse
              in
              Data.Map.fromList
                [(Data.ProtoLens.Tag 1, totalBalance__field_descriptor),
                 (Data.ProtoLens.Tag 2, confirmedBalance__field_descriptor),
                 (Data.ProtoLens.Tag 3, unconfirmedBalance__field_descriptor)]
        unknownFields
          = Lens.Family2.Unchecked.lens _WalletBalanceResponse'_unknownFields
              (\ x__ y__ -> x__{_WalletBalanceResponse'_unknownFields = y__})
        defMessage
          = WalletBalanceResponse{_WalletBalanceResponse'totalBalance =
                                    Data.ProtoLens.fieldDefault,
                                  _WalletBalanceResponse'confirmedBalance =
                                    Data.ProtoLens.fieldDefault,
                                  _WalletBalanceResponse'unconfirmedBalance =
                                    Data.ProtoLens.fieldDefault,
                                  _WalletBalanceResponse'_unknownFields = ([])}
        parseMessage
          = let loop ::
                     WalletBalanceResponse ->
                       Data.ProtoLens.Encoding.Bytes.Parser WalletBalanceResponse
                loop x
                  = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
                       if end then
                         do let missing = [] in
                              if Prelude.null missing then Prelude.return () else
                                Prelude.fail
                                  (("Missing required fields: ") Prelude.++
                                     Prelude.show (missing :: ([Prelude.String])))
                            Prelude.return
                              (Lens.Family2.over Data.ProtoLens.unknownFields
                                 (\ !t -> Prelude.reverse t)
                                 x)
                         else
                         do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                            case tag of
                                8 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                Data.ProtoLens.Encoding.Bytes.getVarInt)
                                               Data.ProtoLens.Encoding.Bytes.<?> "total_balance"
                                        loop
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"totalBalance")
                                             y
                                             x)
                                16 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "confirmed_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"confirmedBalance")
                                              y
                                              x)
                                24 -> do y <- (Prelude.fmap Prelude.fromIntegral
                                                 Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                Data.ProtoLens.Encoding.Bytes.<?>
                                                "unconfirmed_balance"
                                         loop
                                           (Lens.Family2.set
                                              (Data.ProtoLens.Field.field @"unconfirmedBalance")
                                              y
                                              x)
                                wire -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                                   wire
                                           loop
                                             (Lens.Family2.over Data.ProtoLens.unknownFields
                                                (\ !t -> (:) y t)
                                                x)
              in
              (do loop Data.ProtoLens.defMessage)
                Data.ProtoLens.Encoding.Bytes.<?> "WalletBalanceResponse"
        buildMessage
          = (\ _x ->
               (let _v
                      = Lens.Family2.view (Data.ProtoLens.Field.field @"totalBalance") _x
                  in
                  if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                    Data.Monoid.mempty else
                    (Data.ProtoLens.Encoding.Bytes.putVarInt 8) Data.Monoid.<>
                      ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                         Prelude.fromIntegral)
                        _v)
                 Data.Monoid.<>
                 (let _v
                        = Lens.Family2.view
                            (Data.ProtoLens.Field.field @"confirmedBalance")
                            _x
                    in
                    if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                      Data.Monoid.mempty else
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 16) Data.Monoid.<>
                        ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                           Prelude.fromIntegral)
                          _v)
                   Data.Monoid.<>
                   (let _v
                          = Lens.Family2.view
                              (Data.ProtoLens.Field.field @"unconfirmedBalance")
                              _x
                      in
                      if (_v) Prelude.== Data.ProtoLens.fieldDefault then
                        Data.Monoid.mempty else
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 24) Data.Monoid.<>
                          ((Data.ProtoLens.Encoding.Bytes.putVarInt) Prelude..
                             Prelude.fromIntegral)
                            _v)
                     Data.Monoid.<>
                     Data.ProtoLens.Encoding.Wire.buildFieldSet
                       (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData WalletBalanceResponse where
        rnf
          = (\ x__ ->
               Control.DeepSeq.deepseq (_WalletBalanceResponse'_unknownFields x__)
                 (Control.DeepSeq.deepseq (_WalletBalanceResponse'totalBalance x__)
                    (Control.DeepSeq.deepseq
                       (_WalletBalanceResponse'confirmedBalance x__)
                       (Control.DeepSeq.deepseq
                          (_WalletBalanceResponse'unconfirmedBalance x__)
                          (())))))
data WalletUnlocker = WalletUnlocker{}
                        deriving ()
instance Data.ProtoLens.Service.Types.Service WalletUnlocker where
        type ServiceName WalletUnlocker = "WalletUnlocker"
        type ServicePackage WalletUnlocker = "lnrpc"
        type ServiceMethods WalletUnlocker =
             '["changePassword", "genSeed", "initWallet", "unlockWallet"]
instance Data.ProtoLens.Service.Types.HasMethodImpl WalletUnlocker
           "genSeed"
         where
        type MethodName WalletUnlocker "genSeed" = "GenSeed"
        type MethodInput WalletUnlocker "genSeed" = GenSeedRequest
        type MethodOutput WalletUnlocker "genSeed" = GenSeedResponse
        type MethodStreamingType WalletUnlocker "genSeed" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl WalletUnlocker
           "initWallet"
         where
        type MethodName WalletUnlocker "initWallet" = "InitWallet"
        type MethodInput WalletUnlocker "initWallet" = InitWalletRequest
        type MethodOutput WalletUnlocker "initWallet" = InitWalletResponse
        type MethodStreamingType WalletUnlocker "initWallet" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl WalletUnlocker
           "unlockWallet"
         where
        type MethodName WalletUnlocker "unlockWallet" = "UnlockWallet"
        type MethodInput WalletUnlocker "unlockWallet" =
             UnlockWalletRequest
        type MethodOutput WalletUnlocker "unlockWallet" =
             UnlockWalletResponse
        type MethodStreamingType WalletUnlocker "unlockWallet" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl WalletUnlocker
           "changePassword"
         where
        type MethodName WalletUnlocker "changePassword" = "ChangePassword"
        type MethodInput WalletUnlocker "changePassword" =
             ChangePasswordRequest
        type MethodOutput WalletUnlocker "changePassword" =
             ChangePasswordResponse
        type MethodStreamingType WalletUnlocker "changePassword" =
             'Data.ProtoLens.Service.Types.NonStreaming
data Lightning = Lightning{}
                   deriving ()
instance Data.ProtoLens.Service.Types.Service Lightning where
        type ServiceName Lightning = "Lightning"
        type ServicePackage Lightning = "lnrpc"
        type ServiceMethods Lightning =
             '["abandonChannel", "addInvoice", "channelBalance", "closeChannel",
               "closedChannels", "connectPeer", "debugLevel", "decodePayReq",
               "deleteAllPayments", "describeGraph", "disconnectPeer",
               "estimateFee", "exportAllChannelBackups", "exportChannelBackup",
               "feeReport", "forwardingHistory", "getChanInfo", "getInfo",
               "getNetworkInfo", "getNodeInfo", "getTransactions", "listChannels",
               "listInvoices", "listPayments", "listPeers", "listUnspent",
               "lookupInvoice", "newAddress", "openChannel", "openChannelSync",
               "pendingChannels", "queryRoutes", "restoreChannelBackups",
               "sendCoins", "sendMany", "sendPayment", "sendPaymentSync",
               "sendToRoute", "sendToRouteSync", "signMessage", "stopDaemon",
               "subscribeChannelBackups", "subscribeChannelEvents",
               "subscribeChannelGraph", "subscribeInvoices",
               "subscribeTransactions", "updateChannelPolicy", "verifyChanBackup",
               "verifyMessage", "walletBalance"]
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "walletBalance"
         where
        type MethodName Lightning "walletBalance" = "WalletBalance"
        type MethodInput Lightning "walletBalance" = WalletBalanceRequest
        type MethodOutput Lightning "walletBalance" = WalletBalanceResponse
        type MethodStreamingType Lightning "walletBalance" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "channelBalance"
         where
        type MethodName Lightning "channelBalance" = "ChannelBalance"
        type MethodInput Lightning "channelBalance" = ChannelBalanceRequest
        type MethodOutput Lightning "channelBalance" =
             ChannelBalanceResponse
        type MethodStreamingType Lightning "channelBalance" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "getTransactions"
         where
        type MethodName Lightning "getTransactions" = "GetTransactions"
        type MethodInput Lightning "getTransactions" =
             GetTransactionsRequest
        type MethodOutput Lightning "getTransactions" = TransactionDetails
        type MethodStreamingType Lightning "getTransactions" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "estimateFee"
         where
        type MethodName Lightning "estimateFee" = "EstimateFee"
        type MethodInput Lightning "estimateFee" = EstimateFeeRequest
        type MethodOutput Lightning "estimateFee" = EstimateFeeResponse
        type MethodStreamingType Lightning "estimateFee" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "sendCoins"
         where
        type MethodName Lightning "sendCoins" = "SendCoins"
        type MethodInput Lightning "sendCoins" = SendCoinsRequest
        type MethodOutput Lightning "sendCoins" = SendCoinsResponse
        type MethodStreamingType Lightning "sendCoins" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "listUnspent"
         where
        type MethodName Lightning "listUnspent" = "ListUnspent"
        type MethodInput Lightning "listUnspent" = ListUnspentRequest
        type MethodOutput Lightning "listUnspent" = ListUnspentResponse
        type MethodStreamingType Lightning "listUnspent" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "subscribeTransactions"
         where
        type MethodName Lightning "subscribeTransactions" =
             "SubscribeTransactions"
        type MethodInput Lightning "subscribeTransactions" =
             GetTransactionsRequest
        type MethodOutput Lightning "subscribeTransactions" = Transaction
        type MethodStreamingType Lightning "subscribeTransactions" =
             'Data.ProtoLens.Service.Types.ServerStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "sendMany"
         where
        type MethodName Lightning "sendMany" = "SendMany"
        type MethodInput Lightning "sendMany" = SendManyRequest
        type MethodOutput Lightning "sendMany" = SendManyResponse
        type MethodStreamingType Lightning "sendMany" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "newAddress"
         where
        type MethodName Lightning "newAddress" = "NewAddress"
        type MethodInput Lightning "newAddress" = NewAddressRequest
        type MethodOutput Lightning "newAddress" = NewAddressResponse
        type MethodStreamingType Lightning "newAddress" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "signMessage"
         where
        type MethodName Lightning "signMessage" = "SignMessage"
        type MethodInput Lightning "signMessage" = SignMessageRequest
        type MethodOutput Lightning "signMessage" = SignMessageResponse
        type MethodStreamingType Lightning "signMessage" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "verifyMessage"
         where
        type MethodName Lightning "verifyMessage" = "VerifyMessage"
        type MethodInput Lightning "verifyMessage" = VerifyMessageRequest
        type MethodOutput Lightning "verifyMessage" = VerifyMessageResponse
        type MethodStreamingType Lightning "verifyMessage" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "connectPeer"
         where
        type MethodName Lightning "connectPeer" = "ConnectPeer"
        type MethodInput Lightning "connectPeer" = ConnectPeerRequest
        type MethodOutput Lightning "connectPeer" = ConnectPeerResponse
        type MethodStreamingType Lightning "connectPeer" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "disconnectPeer"
         where
        type MethodName Lightning "disconnectPeer" = "DisconnectPeer"
        type MethodInput Lightning "disconnectPeer" = DisconnectPeerRequest
        type MethodOutput Lightning "disconnectPeer" =
             DisconnectPeerResponse
        type MethodStreamingType Lightning "disconnectPeer" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "listPeers"
         where
        type MethodName Lightning "listPeers" = "ListPeers"
        type MethodInput Lightning "listPeers" = ListPeersRequest
        type MethodOutput Lightning "listPeers" = ListPeersResponse
        type MethodStreamingType Lightning "listPeers" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "getInfo"
         where
        type MethodName Lightning "getInfo" = "GetInfo"
        type MethodInput Lightning "getInfo" = GetInfoRequest
        type MethodOutput Lightning "getInfo" = GetInfoResponse
        type MethodStreamingType Lightning "getInfo" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "pendingChannels"
         where
        type MethodName Lightning "pendingChannels" = "PendingChannels"
        type MethodInput Lightning "pendingChannels" =
             PendingChannelsRequest
        type MethodOutput Lightning "pendingChannels" =
             PendingChannelsResponse
        type MethodStreamingType Lightning "pendingChannels" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "listChannels"
         where
        type MethodName Lightning "listChannels" = "ListChannels"
        type MethodInput Lightning "listChannels" = ListChannelsRequest
        type MethodOutput Lightning "listChannels" = ListChannelsResponse
        type MethodStreamingType Lightning "listChannels" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "subscribeChannelEvents"
         where
        type MethodName Lightning "subscribeChannelEvents" =
             "SubscribeChannelEvents"
        type MethodInput Lightning "subscribeChannelEvents" =
             ChannelEventSubscription
        type MethodOutput Lightning "subscribeChannelEvents" =
             ChannelEventUpdate
        type MethodStreamingType Lightning "subscribeChannelEvents" =
             'Data.ProtoLens.Service.Types.ServerStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "closedChannels"
         where
        type MethodName Lightning "closedChannels" = "ClosedChannels"
        type MethodInput Lightning "closedChannels" = ClosedChannelsRequest
        type MethodOutput Lightning "closedChannels" =
             ClosedChannelsResponse
        type MethodStreamingType Lightning "closedChannels" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "openChannelSync"
         where
        type MethodName Lightning "openChannelSync" = "OpenChannelSync"
        type MethodInput Lightning "openChannelSync" = OpenChannelRequest
        type MethodOutput Lightning "openChannelSync" = ChannelPoint
        type MethodStreamingType Lightning "openChannelSync" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "openChannel"
         where
        type MethodName Lightning "openChannel" = "OpenChannel"
        type MethodInput Lightning "openChannel" = OpenChannelRequest
        type MethodOutput Lightning "openChannel" = OpenStatusUpdate
        type MethodStreamingType Lightning "openChannel" =
             'Data.ProtoLens.Service.Types.ServerStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "closeChannel"
         where
        type MethodName Lightning "closeChannel" = "CloseChannel"
        type MethodInput Lightning "closeChannel" = CloseChannelRequest
        type MethodOutput Lightning "closeChannel" = CloseStatusUpdate
        type MethodStreamingType Lightning "closeChannel" =
             'Data.ProtoLens.Service.Types.ServerStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "abandonChannel"
         where
        type MethodName Lightning "abandonChannel" = "AbandonChannel"
        type MethodInput Lightning "abandonChannel" = AbandonChannelRequest
        type MethodOutput Lightning "abandonChannel" =
             AbandonChannelResponse
        type MethodStreamingType Lightning "abandonChannel" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "sendPayment"
         where
        type MethodName Lightning "sendPayment" = "SendPayment"
        type MethodInput Lightning "sendPayment" = SendRequest
        type MethodOutput Lightning "sendPayment" = SendResponse
        type MethodStreamingType Lightning "sendPayment" =
             'Data.ProtoLens.Service.Types.BiDiStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "sendPaymentSync"
         where
        type MethodName Lightning "sendPaymentSync" = "SendPaymentSync"
        type MethodInput Lightning "sendPaymentSync" = SendRequest
        type MethodOutput Lightning "sendPaymentSync" = SendResponse
        type MethodStreamingType Lightning "sendPaymentSync" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "sendToRoute"
         where
        type MethodName Lightning "sendToRoute" = "SendToRoute"
        type MethodInput Lightning "sendToRoute" = SendToRouteRequest
        type MethodOutput Lightning "sendToRoute" = SendResponse
        type MethodStreamingType Lightning "sendToRoute" =
             'Data.ProtoLens.Service.Types.BiDiStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "sendToRouteSync"
         where
        type MethodName Lightning "sendToRouteSync" = "SendToRouteSync"
        type MethodInput Lightning "sendToRouteSync" = SendToRouteRequest
        type MethodOutput Lightning "sendToRouteSync" = SendResponse
        type MethodStreamingType Lightning "sendToRouteSync" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "addInvoice"
         where
        type MethodName Lightning "addInvoice" = "AddInvoice"
        type MethodInput Lightning "addInvoice" = Invoice
        type MethodOutput Lightning "addInvoice" = AddInvoiceResponse
        type MethodStreamingType Lightning "addInvoice" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "listInvoices"
         where
        type MethodName Lightning "listInvoices" = "ListInvoices"
        type MethodInput Lightning "listInvoices" = ListInvoiceRequest
        type MethodOutput Lightning "listInvoices" = ListInvoiceResponse
        type MethodStreamingType Lightning "listInvoices" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "lookupInvoice"
         where
        type MethodName Lightning "lookupInvoice" = "LookupInvoice"
        type MethodInput Lightning "lookupInvoice" = PaymentHash
        type MethodOutput Lightning "lookupInvoice" = Invoice
        type MethodStreamingType Lightning "lookupInvoice" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "subscribeInvoices"
         where
        type MethodName Lightning "subscribeInvoices" = "SubscribeInvoices"
        type MethodInput Lightning "subscribeInvoices" =
             InvoiceSubscription
        type MethodOutput Lightning "subscribeInvoices" = Invoice
        type MethodStreamingType Lightning "subscribeInvoices" =
             'Data.ProtoLens.Service.Types.ServerStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "decodePayReq"
         where
        type MethodName Lightning "decodePayReq" = "DecodePayReq"
        type MethodInput Lightning "decodePayReq" = PayReqString
        type MethodOutput Lightning "decodePayReq" = PayReq
        type MethodStreamingType Lightning "decodePayReq" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "listPayments"
         where
        type MethodName Lightning "listPayments" = "ListPayments"
        type MethodInput Lightning "listPayments" = ListPaymentsRequest
        type MethodOutput Lightning "listPayments" = ListPaymentsResponse
        type MethodStreamingType Lightning "listPayments" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "deleteAllPayments"
         where
        type MethodName Lightning "deleteAllPayments" = "DeleteAllPayments"
        type MethodInput Lightning "deleteAllPayments" =
             DeleteAllPaymentsRequest
        type MethodOutput Lightning "deleteAllPayments" =
             DeleteAllPaymentsResponse
        type MethodStreamingType Lightning "deleteAllPayments" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "describeGraph"
         where
        type MethodName Lightning "describeGraph" = "DescribeGraph"
        type MethodInput Lightning "describeGraph" = ChannelGraphRequest
        type MethodOutput Lightning "describeGraph" = ChannelGraph
        type MethodStreamingType Lightning "describeGraph" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "getChanInfo"
         where
        type MethodName Lightning "getChanInfo" = "GetChanInfo"
        type MethodInput Lightning "getChanInfo" = ChanInfoRequest
        type MethodOutput Lightning "getChanInfo" = ChannelEdge
        type MethodStreamingType Lightning "getChanInfo" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "getNodeInfo"
         where
        type MethodName Lightning "getNodeInfo" = "GetNodeInfo"
        type MethodInput Lightning "getNodeInfo" = NodeInfoRequest
        type MethodOutput Lightning "getNodeInfo" = NodeInfo
        type MethodStreamingType Lightning "getNodeInfo" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "queryRoutes"
         where
        type MethodName Lightning "queryRoutes" = "QueryRoutes"
        type MethodInput Lightning "queryRoutes" = QueryRoutesRequest
        type MethodOutput Lightning "queryRoutes" = QueryRoutesResponse
        type MethodStreamingType Lightning "queryRoutes" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "getNetworkInfo"
         where
        type MethodName Lightning "getNetworkInfo" = "GetNetworkInfo"
        type MethodInput Lightning "getNetworkInfo" = NetworkInfoRequest
        type MethodOutput Lightning "getNetworkInfo" = NetworkInfo
        type MethodStreamingType Lightning "getNetworkInfo" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "stopDaemon"
         where
        type MethodName Lightning "stopDaemon" = "StopDaemon"
        type MethodInput Lightning "stopDaemon" = StopRequest
        type MethodOutput Lightning "stopDaemon" = StopResponse
        type MethodStreamingType Lightning "stopDaemon" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "subscribeChannelGraph"
         where
        type MethodName Lightning "subscribeChannelGraph" =
             "SubscribeChannelGraph"
        type MethodInput Lightning "subscribeChannelGraph" =
             GraphTopologySubscription
        type MethodOutput Lightning "subscribeChannelGraph" =
             GraphTopologyUpdate
        type MethodStreamingType Lightning "subscribeChannelGraph" =
             'Data.ProtoLens.Service.Types.ServerStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "debugLevel"
         where
        type MethodName Lightning "debugLevel" = "DebugLevel"
        type MethodInput Lightning "debugLevel" = DebugLevelRequest
        type MethodOutput Lightning "debugLevel" = DebugLevelResponse
        type MethodStreamingType Lightning "debugLevel" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "feeReport"
         where
        type MethodName Lightning "feeReport" = "FeeReport"
        type MethodInput Lightning "feeReport" = FeeReportRequest
        type MethodOutput Lightning "feeReport" = FeeReportResponse
        type MethodStreamingType Lightning "feeReport" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "updateChannelPolicy"
         where
        type MethodName Lightning "updateChannelPolicy" =
             "UpdateChannelPolicy"
        type MethodInput Lightning "updateChannelPolicy" =
             PolicyUpdateRequest
        type MethodOutput Lightning "updateChannelPolicy" =
             PolicyUpdateResponse
        type MethodStreamingType Lightning "updateChannelPolicy" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "forwardingHistory"
         where
        type MethodName Lightning "forwardingHistory" = "ForwardingHistory"
        type MethodInput Lightning "forwardingHistory" =
             ForwardingHistoryRequest
        type MethodOutput Lightning "forwardingHistory" =
             ForwardingHistoryResponse
        type MethodStreamingType Lightning "forwardingHistory" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "exportChannelBackup"
         where
        type MethodName Lightning "exportChannelBackup" =
             "ExportChannelBackup"
        type MethodInput Lightning "exportChannelBackup" =
             ExportChannelBackupRequest
        type MethodOutput Lightning "exportChannelBackup" = ChannelBackup
        type MethodStreamingType Lightning "exportChannelBackup" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "exportAllChannelBackups"
         where
        type MethodName Lightning "exportAllChannelBackups" =
             "ExportAllChannelBackups"
        type MethodInput Lightning "exportAllChannelBackups" =
             ChanBackupExportRequest
        type MethodOutput Lightning "exportAllChannelBackups" =
             ChanBackupSnapshot
        type MethodStreamingType Lightning "exportAllChannelBackups" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "verifyChanBackup"
         where
        type MethodName Lightning "verifyChanBackup" = "VerifyChanBackup"
        type MethodInput Lightning "verifyChanBackup" = ChanBackupSnapshot
        type MethodOutput Lightning "verifyChanBackup" =
             VerifyChanBackupResponse
        type MethodStreamingType Lightning "verifyChanBackup" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "restoreChannelBackups"
         where
        type MethodName Lightning "restoreChannelBackups" =
             "RestoreChannelBackups"
        type MethodInput Lightning "restoreChannelBackups" =
             RestoreChanBackupRequest
        type MethodOutput Lightning "restoreChannelBackups" =
             RestoreBackupResponse
        type MethodStreamingType Lightning "restoreChannelBackups" =
             'Data.ProtoLens.Service.Types.NonStreaming
instance Data.ProtoLens.Service.Types.HasMethodImpl Lightning
           "subscribeChannelBackups"
         where
        type MethodName Lightning "subscribeChannelBackups" =
             "SubscribeChannelBackups"
        type MethodInput Lightning "subscribeChannelBackups" =
             ChannelBackupSubscription
        type MethodOutput Lightning "subscribeChannelBackups" =
             ChanBackupSnapshot
        type MethodStreamingType Lightning "subscribeChannelBackups" =
             'Data.ProtoLens.Service.Types.ServerStreaming